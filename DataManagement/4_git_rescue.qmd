# Rescuing the repo

While git and GitHub are fairly easy to use when you do things correctly, make a mistake and you can end up in a pickle.
But you won't be the first person to make that mistake.
Thousands of people have probably made the same mistake before, and solutions will be available on [stackoverflow](https://stackoverflow.com/questions/tagged/git).

```{r}
#| label: fig-stackoverfow-revert
#| fig-cap: Over twenty-five thousand people found [this](https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git) stackoverflow question about how to undo commits useful.
#| fig-alt: Screenshot of a stackoverflow question with many upvotes and millions of views.
#| out-width: 90%

knitr::include_graphics("Pics/1_stackoverflow_reset.png")
```


In this section of the tutorial, we will cause problems with increasing severity in our repo and then fix them.

## Reverting uncommited changes

Imagine you have just edited the most important file in your repo and accidentally pressed save. 
You realised immediately, now you need to revert this change.

Open the git window and select the file you want to revert (you don't need to tick the staged box), then click the "Revert" button.

:::callout-note
## Exercise

Save an edit to your favourite file (or delete it), then revert this change to restore the original file.

:::


## Undoing the last commit


Sometimes you commit something by mistake. 

Maybe you committed some edits to the wrong branch, or maybe you committed a file [so large](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github) that it cannot be pushed to GitHub (if so, this would be a good time to update your .gitignore file).

Fortunately it is easy to undo the last commit **if you have not pushed to GitHub**.
We need to work in the terminal.

To undo the last commit you can run

```{bash}
#| eval: FALSE
git reset HEAD~1
```

Any edits you made will remain, and can either be committed or reverted.

:::callout-warning
## Destroying a commit

If you want to destroy the last commit and any uncommitted work, you can run

```{bash}
#| eval: FALSE
git reset --hard HEAD~1
```

This is often a bad idea.
:::




:::callout-note
## Exercise

Save an edit to your favourite file (or delete it), and commit the change. 
Reset this change to restore the original file.

:::

## Fixing merge conflicts

## Burn it all down