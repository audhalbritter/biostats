[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enough targets to Write a Thesis",
    "section": "",
    "text": "1 Introduction\nWriting a thesis requires importing data, writing code to clean, transform, analyse data, and making figures and writing the thesis. This is done by writing several R scripts and running one script after another producing results and figures (Figure 1.1). All the time, the code is updated, to add new data, transforming the data, changing analysis or adding a figure. And often several iterations of running the same scripts are needed and it is difficult to keep track of which scripts need rerunning. In addition, complex and computational heavy data analysis can take a lot of time and rerunning such analysis is inefficient.\nThis workflow is very inefficient and error prone. And there is a better way.\n\n\n\n\nFigure 1.1: Non-reproducible data workflow.\n\n\n\n\nTargets is a pipeline tool which takes care of dependencies in the code and keeps track of outdated objects (Figure 1.2). When updating and rerunning code, targets will skip parts where the upstream code has not changed, and which is still up to date and it will only rerun the code that is outdated. Targets ensures that your results always match the underlying code and maintains a reproducible workflow. It avoids unnecessary repetition and can saves costly running time.\n\n\n\n\nFigure 1.2: Reproducible targets pipeline.\n\n\n\n\nWhen is targets useful?\n\nWhen the code has a long runtime because it is slow or complex\nWhen the workflow has interconnected tasks with dependencies\n\n\n\n\n\n\n\nBefore you start\n\n\n\nUse the checker function to check what software and R packages you have already installed and what needs updating or installing.\nIf you have never used the package before run:\nmaybe first: install.packages(\"remotes\")\nthen remotes::install_github(\"richardjtelford/checker\")\n\nTo check what you have already installed use: chk_requirements(...)\nFor this tutorial you will need:\n\n\nRStudio (version 2022.2 or newer)\nR\nquarto\nquarto R package (install.packages(\"quarto\"))\ntargets R package (install.packages(\"targets\"))\ntarchetypes R package (install.packages(\"tarchetypes\"))\n\nIf quarto is new to you, have a look at the Reproducible documents tutorial (REF to Quarto book) before proceeding here."
  },
  {
    "objectID": "02-workflow.html#the-targets-pipeline",
    "href": "02-workflow.html#the-targets-pipeline",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.1 The targets pipeline",
    "text": "2.1 The targets pipeline\nA target workflow has a specific file structure including R code, functions, qmd files, data and a _targets.R file (Figure 2.1). The _targets.R file is mandatory and the most important file defining the targets pipeline. This file lives at the root of the R project folder.\nAn R project has many other files and it is recommended to keep code and data files in separate folders to keep the repository tidy. It is common to have one or several scripts that contain custom user-defined functions (R/functions.R). Targets pipelines are based on functions, which is good practice coding (e.g. avoid repetition), and also keeps the pipeline tidy.\n\n\n\n\nFigure 2.1: File structure of an R Studio project with a target pipeline.\n\n\n\n\nTo set up this file structure use the use_targets() function, which creates an initial _targets.R script with comments to help you populate the script.\nNote that it also creates a couple of other files, one of which is called run.R. This is a helper script to run the pipeline and will be explained later.\n\n\n\n\n\n\nExercise\n\n\n\nGo to the Svalbard trait project and start to set up a targets pipeline by using the use_targets() function.\n\n\n\n2.1.1 _target.R script file\nThe _targets.R file configures and defines the pipeline. This file is mandatory and without it the targets pipeline will not work. When using the use_targets() function, it sets up the basic structure and comments to help fill out the rest (see below).\nThe _targets.R file contains the following components:\n\nSet options such as load necessary packages or defining the output format using tar_option_set().\nRun R scripts containing custom functions using the tar_source() function.\nMake a list of targets, which define the pipeline and is created with tar_target(). Each target is a step in the workflow, for example importing data, analysis or figure and looks like a normal R object (e.g. tibble, vector, figure). The targets are stored in _targets/objects/ and can be used downstream in the pipeline. One advantage of the targets pipeline is that once the pipeline has run, all targets can be reproduced using tar_load() and the pipeline does not need rerunning each time before accessing the targets. To access all the targets at once. use tar_load_everything(). In tar_load() you can also use tidy select commands to load specific targets, e.g. tar_load(starts_with(\"y\"))\n\nNote that the file also contains other options which are optional.\n\n# Created by use_targets().\n# Follow the comments below to fill in this target script.\n# Then follow the manual to check and run the pipeline:\n#   https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline # nolint\n\n# Load packages required to define the pipeline:\nlibrary(targets)\n# library(tarchetypes) # Load other packages as needed. # nolint\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n\n# tar_make_clustermq() configuration (okay to leave alone):\noptions(clustermq.scheduler = \"multicore\")\n\n# tar_make_future() configuration (okay to leave alone):\n# Install packages {{future}}, {{future.callr}}, and {{future.batchtools}} to allow use_targets() to configure tar_make_future() options.\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n# source(\"other_functions.R\") # Source other scripts as needed. # nolint\n\n# Replace the target list below with your own:\nlist(\n  tar_target(\n    name = data,\n    command = tibble(x = rnorm(100), y = rnorm(100))\n#   format = \"feather\" # efficient storage of large data frames # nolint\n  ),\n  tar_target(\n    name = model,\n    command = coefficients(lm(y ~ x, data = data))\n  )\n)\n\nNow it is your turn to populate the targets pipeline.\n\n2.1.2 Make custom functions\nTargets workflows are based on functions. Functions are very useful if a task has to be done multiple times.\nFunctions are made with the keyword function(), can have one or more arguments separated by commas, and need assigning to a name (e.g. my_function). Let us make an example we multiply two numbers, but the numbers are not always the same. This is a case for a function.\n\nmy_function <- function(arg1, arg2){\n  arg1 * arg2\n}\n\nmy_function(arg1 = 3, arg2 = 4)\n\nFunctions in the targets workflow need to be saved in a script in the folder R/. The _target.R script will look for all R files in this folder and run them.\nHere is a working example for a function that runs a linear regression:\n\nfit_model <- function(data){\n  mod <- lm(Value ~ Treatment, data = data)\n  mod\n}\n\nfit_model(data = my_data)\n\n\n\n\n\n\n\nExercise\n\n\n\nGo to the Svalbard trait project create a file called functions.R and save it in the R/ folder. Then add three functions that do the fallowing:\n\nimport the data and filter the species Bistorta vivipara and the trait plant height\nfit a linear regression to test how the warming treatment affects plant height\nand make a boxplot showing plant height in control and warming treatments.\n\nThe code you need for this exercise is already in the svalbard_trait.qmd file. You need to copy it and turn it into functions.\nWhen you are finished, test if the functions are doing what you think they do, i.e. test them with a small dataset.\n\n\nThe next step is to configure and define the targets pipeline.\n\n2.1.3 Populate the _targets.R file\nThe _targets.R file has 3 main components that need to be populated.\n\nUse tar_option_set() and the argument package to load all the required packages that are needed to run the pipeline. Note that targets and tarchetypes need to be loaded first and outside this function, otherwise the pipeline will not work. Functions that are only used in a quarto file can be loaded directly in there and do not need to be loaded here. The argument format let’s you define default storage format.\n\n\n# Load packages required to define the pipeline:\nlibrary(targets)\nlibrary(tarchetypes) # Load other packages as needed.\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n\n\nThe function tar_source() will source all the R scripts in the R/ folder. You do not need to do anything else here. If there are scripts that you do not want to run at the moment, move them to another place.\nThe pipeline is a list of target objects, separated by commas. Each target is declared by the tar_target() function. This function needs the argument name and command that defines the code to produce the target. Here is an example of a target that uses the function to run a regression from above.\n\n\n# fit model for plant height\nlist(\n  tar_target(name = mod_height,\n             command = fit_model(data))\n  )\n\nTarget names should be unique (no duplicates), should not start with a dot and the name should be meaningful (do not use my_variable).\nData files are special, because they also need the argument format to decalre that this is a file. Targets will check if the file has been changed and automatically import the data again the next time the pipeline is run.\n\nlist(\n  tar_target(name = file,\n             command = \"data/PFTC4_Svalbard_2018_ITEX_Traits.csv\",\n             format = \"file\")\n  )\n\nA target usually creates a dataset, analyse data using a model or summarise or vizualise a dataset. A target should do one thing only and if a functions gets too long, it can be split into nested sub-functions to make the code readable and easier to maintain. You also want to keep the number of targets manageble. Do not put too much in one target, and also try not to procude too many.\n\n\n\n\n\n\nExercise\n\n\n\nPopulate the _targets.R file:\n\nadd all packages to the tar_option_set() function in the _targets.R file that are needed to run the pipeline.\ncheck that your _targets.R file sources the custom functions tar_source() and that all your functions are in the right place.\nand set up the pipeline with three targets that imports the data, runs the model and makes a figure.\n\n\n\n\n2.1.4 Output files\n\nThe results and figures of an analysis are usually presented in a document or presentation. An output files, such as a reproducible quarto document can be added to a targets pipeline. The targets that have been produced in the pipeline can be used in the quarto file, for example a figure can be plotted.\nThe targets that are used in the quarto document need to be loaded into the current environment. For this we can use tar_load() or tar_read(). The first function is used when a target is used several times. tar_read() is useful if a target is only needed once, e.g. to show a figure.  Once the target is loaded, it can be printed.\n\n# print model output\ntar_read(mod_height)\ntidy(mod_height)\n\nTo add the quarto document to the pipeline, the manuscript has to be rendered. This is done in _targets.R file in the list of targets using tar_quarto().\n\n# render ms\ntar_quarto(name = manuscript, path = \"svalbard_traits.qmd\")\n\nNote that all packages that are needed to run the quarto file need to be loaded in the .qmd file. If you are using a function exclusively in the quarto script, the package can be loaded only in the quarto file, but not in the _target.R file. targets and tarchetypes always need to be loaded in both files.\n\n\n\n\n\n\nExercise\n\n\n\nPrepare your svalbard_traits.qmd script and add it to the pipeline.\n\nLoad all the necessary R packages in the quarto file.\nLoad all the necessary targets that you want to use in the quarto file.\nAnd add the quarto file to the pipeline using tar_quarto().\nClean the quarto file and remove the unnecessary code, which has been moved to the custom functions.\n\n\n\n\n2.1.5 Inspect and run the pipeline\nWe are now ready to inspect the pipeline, check for errors and run it. Use tar_manifest() to check for errors. This function lists useful information about each target, let you know if you are missing a R package and check for missing or duplicate targets (Figure 2.2).\n\n\n\n\nFigure 2.2: Names and commands for each target in the pipeline.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nRun the tar_manifest() function to check if the pipeline is properly set up.\n\n\nNow we are ready to run the pipeline. For this open the run.R script and run the tar_make() function. This function looks for the _targets.R in the working directory and runs the pipeline.\nWhen running the pipeline for the first time you will see a list of all the targets and each of them is built. Once you have run the pipeline, it will always skip the targets that have not changed and are up to date and only run the once that need updating (Figure 2.3). In the long run this will save a lot of computational time and is one of the big advantages of using targets pipelines.\n\n\n\n\nFigure 2.3: R output after running the pipeline.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nOpen the run.R script and run the pipeline. Hopefully, everything will run smoothly 🤞! If not check out the Trouble shooting section below.\nRun the pipeline again and check if the targets that are already built are skipped.\nChange something in your pipeline and run it again and see what happens. You can for example add a sentence in the quarto file, or change the colour in the figure.\n\n\n\n\n\n\n\n\nDo it step by step\n\n\n\nTarget plans can be huge and complex. Start small, create a few targets and functions and make the plan running. Then add new code in small steps and check regularly if the plan is still working This will help to understand and solve errors (see next section).\n\n\n\n\nFigure 2.4: Vizualisation of complex target pipeline."
  },
  {
    "objectID": "02-workflow.html#trouble-shooting",
    "href": "02-workflow.html#trouble-shooting",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.2 Trouble shooting",
    "text": "2.2 Trouble shooting\n\n2.2.1 Vizualise the pipeline\nIf something goes wrong, a good place to start is to vizualise your pipeline. The tar_visnetwork() function shows the dependency graph of the pipeline. Circles are targets, triangles functions, and the colour indicates if the targets are up to date or not.\n\n\n\n\nFigure 2.5: Vizualise the targets pipeline.\n\n\n\n\n\n2.2.2 Object not found\nA common error is to call a target that does not exist. When running the pipeline this error will appear (Figure 2.6). This is usually if the name is spelled wrong or when using an old name.\n\n\n\n\nFigure 2.6: Error message for missing object\n\n\n\n\n\n2.2.3 Duplicate target\nAnother common mistake is to use the same name for two different targets (Figure 2.7). This is common when copy pasting code. Rename one of the objects and the problem is solved.\n\n\n\n\nFigure 2.7: Error message for duplicate target.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nIf you have problems getting the target pipeline running, here is a working example that you can download or check online. Note that you need to have all the packages that are required for the targets pipeline to run installed.\n\n#install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"biostats-r/targets_workflow_svalbard\")"
  },
  {
    "objectID": "02-workflow.html#resources",
    "href": "02-workflow.html#resources",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.3 Resources",
    "text": "2.3 Resources\n\nThe target manual contains everything you need to know \n\nHere is a large and working target plan\n\nHere is a short introduction video"
  }
]