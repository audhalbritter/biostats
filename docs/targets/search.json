[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enough targets to Write a Thesis",
    "section": "",
    "text": "1 Introduction\nWriting a thesis requires importing data, writing code to clean, transform, analyse data, and making figures and writing the thesis. This is usually done by writing a couple of R scripts (or an other programming language) and running one script after another that produce results and figures. The thesis can also be written in R and results and figures are produced by the same code (see quarto chapter). The scripts usually have to be updated, because new data is added, more cleaning is needed, and analysis are changed or new once added. We often need several iterations of running the same scripts again and again. Sometimes, analysis are computational demanding and can take a lot of time. Or analysis are complex and it is difficult to keep track of which scripts need rerunning when one part has been updated.\nThis workflow is very inefficient and error prone. And there is a better way.\nTargets is a pipeline tool which takes care of dependencies in the code and keeps track of outdated code. When updating and rerunning your code, targets will skip parts where the upstream code has not been changed, and which is still up to date and only run the parts that are outdated. Targets ensures that your results always match the underlying code and maintains reproducible workflows. It avoids unnecessary repetition and can save costly running time.\nWhen is targets useful?\n\nWhen the code has a long runtime because it is slow or complex\nWhen the workflow has interconnected tasks with dependencies\nWhen there are different outputs (e.g. presentation and report)\n\n\n\n\n\n\n\nBefore you start\n\n\n\nYou will need to have installed\n\n\nRStudio (version 2022.2 or newer)\nR\nquarto\nquarto R package (install.packages(\"quarto\"))\ntargets R package (install.packages(\"targets\"))\ntarchetypes R package (install.packages(\"tarchetypes\"))\n\nIf you don’t know what quarto is, have a look at the quarto tutorial (REF) before proceeding with this tutorial."
  },
  {
    "objectID": "02-workflow.html#the-targets-pipeline",
    "href": "02-workflow.html#the-targets-pipeline",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.1 The targets pipeline",
    "text": "2.1 The targets pipeline\nA target pipeline has a specific file structure including R code, functions, qmd files, data and a _targets.R file (Figure 2.1). The _targets.R file is mandotory and the most important file defining the targets pipeline. This file lives at the root of the R project folder.\nAn R project has many other files and it is recommended to keep code and data files in separate folders to keep the repository tidy. It is common to have one or several scripts that contain custom user-defined functions (R/functions.R). Targets pipelines are based on functions, which is good practice coding (e.g. avoid repetition), and also keeps the pipeline tidy.\n\n\n\n\nFigure 2.1: File structure of an R Studio project with a target plan.\n\n\n\n\nTo set up this file structure use the use_targets() function, which creates an initial target script with comments to help you populate the script.\nNote that there is a file called run.R. This is a helper script to run the pipeline and will be explained later.\n\n\n\n\n\n\nExercise\n\n\n\nGo to the Svalbard trait R project and set up a targets file using the use_targets() function.\n\n\n\n2.1.1 _target.R script file\nThe _targets.R file configures and defines the pipeline (?fig-target-file). This file is mandatory and without it the targets pipeline will not work.\nThe _targets.R file should contain the following components:\n\nload necessary packages and set options, such as defining the output format. This can be defined with the tar_option_set() function.\nrun R scripts containing custom functions source(R/function.R)\ndefine pipeline, as a list of targets that are created with tar_target(). Each target is a step in the workflow, for example importing data, analysis and figure and are stored in the _targets/objects/\n\n\n# Created by use_targets().\n# Follow the comments below to fill in this target script.\n# Then follow the manual to check and run the pipeline:\n#   https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline # nolint\n\n# Load packages required to define the pipeline:\nlibrary(targets)\n# library(tarchetypes) # Load other packages as needed. # nolint\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n\n# tar_make_clustermq() configuration (okay to leave alone):\noptions(clustermq.scheduler = \"multicore\")\n\n# tar_make_future() configuration (okay to leave alone):\n# Install packages {{future}}, {{future.callr}}, and {{future.batchtools}} to allow use_targets() to configure tar_make_future() options.\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n# source(\"other_functions.R\") # Source other scripts as needed. # nolint\n\n# Replace the target list below with your own:\nlist(\n  tar_target(\n    name = data,\n    command = tibble(x = rnorm(100), y = rnorm(100))\n#   format = \"feather\" # efficient storage of large data frames # nolint\n  ),\n  tar_target(\n    name = model,\n    command = coefficients(lm(y ~ x, data = data))\n  )\n)\n\nNow it is your turn to start adding a target pipeline to the Svalbard traits R project.\n\n\n\n\n\n\nExercise\n\n\n\n2.1.2 Make custom functions\nGo to the Svalbard trait project and add three functions to the R/functions.R script that:\n\nimport the data and filter the bistorta vivipara species\nfit the lm model for plant height\nmake a boxplot for plant height\n\nAlmost all the code you need is in the manuscript/svalbard_trait.qmd file.\nHere is an example for how to write a function:\n\nmy_function <- function(data){\n  mod <- lm(Value ~ Treatment, data = data)\n  }\n\n\nHint\n\n# import and select bistorta\nget_file <- function(file){\n  dat <- read_csv(file) |> \n    filter(Taxon == \"...\")\n  }\n  \n# fit lm\nfit_model <- function(dat){\n  mod <- lm(Value ~ Treatment, data = ...)\n  }\n  \n# make figure\nmake_figure <- function(dat){\n  ggplot(dat, aes(x = ..., y = ...)) + \n    geom_boxplot() +\n    labs(x = \"Treatment\", y = \"Height cm\")\n}\n\nOnce all the functions are written it’s important to test if the functions are doing what you want them to do.\n\n\nThe custom functions are made. The next step is to configure and define the targets pipeline.\n\n\n\n\n\n\nExercise\n\n\n\n2.1.3 Populate the _targets.R file\nPopulate the _targets.R file with the necessary packages, source the custom functions and set up the targets pipeline:\n\nadd the all necessary packages to the tar_option_set() function in the _targets.R file\nadd code to source the functions\nset up the pipeline with three targets that imports the data and selects bistorta vivipara, run the model and make the figure.\n\n\nSolution\n\n# Load packages required to define the pipeline:\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tidyverse\", \"here\", \"lubridate\", \"gt\", \"broom\") # packages that targets need to run\n)\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source(\"R/functions.R\")\n\n# target list\nlist(\n  # data file\n  tar_target(name = file,\n             command = \"data/PFTC4_Svalbard_2018_ITEX_Traits.csv\",\n             format = \"file\"),\n  # import and transform\n  tar_target(\n    name = bistorta,\n    command = get_file(file)\n  ),\n  # fit model for plant height\n  tar_target(\n    name = mod_height,\n    command = fit_model(bistorta |>\n                          filter(Trait == \"Plant_Height_cm\"))\n  ),\n  # make figure\n  tar_target(\n    name = fig_height,\n    command = make_figure(bistorta |>\n                            filter(Trait == \"Plant_Height_cm\"))\n  )\n)\n\n\n\n\n2.1.4 Output files\nUsually, we want to add the results and figure to an output file, like a text file or presentation. This output file can also be added to the targets pipeline.\nThis can be done by using the tar_render() function in the list of targets.\n\n# render ms\ntar_render(name = ms, path = \"manuscript/svalbard_traits.qmd\")\n\n\n\n\n\n\n\nExercise\n\n\n\n2.1.5 Render manuscript\nClean the svalbard_traits.qmd file and remove the unnecessary code (e.g. loading libraries, code in the functions), because this was moved to the functions of _targets.R script.\nAnd add tar_render(name = ms, path = \"manuscript/svalbard_traits.qmd\") to the pipeline.\n\n\n\n2.1.6 Inspect and run the pipeline\nWe are now ready to inspect the pipeline and check for errors. Use tar_manifest(fields = all_of(\"command\")) to check for errors. This function lists all the targets and some information about them.\n\n\n\n\nInspect the pipeline\n\n\n\n\ntar_visnetwork() shows the dependency graph of the pipeline. Circles are targets, triangles functions, and the colour indicates if the targets are up to date or not.\n\n\n\n\nInspect the pipeline\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nRun these two functions and check if the pipeline is properly set up.\n\n\nNow we are ready to run the pipeline. The tar_make() function looks for the _targets.R in the working directory and runs the pipeline.\n\n\n\n\n\n\nExercise\n\n\n\nOpen the run.R script and run the pipeline."
  },
  {
    "objectID": "02-workflow.html#resources",
    "href": "02-workflow.html#resources",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.3 Resources",
    "text": "2.3 Resources\n\nThe target manual contains everything you need to know\nHere is a short introduction"
  },
  {
    "objectID": "02-workflow.html",
    "href": "02-workflow.html",
    "title": "\n2  Getting started with targets\n",
    "section": "",
    "text": "3 import and select bistorta\nget_file <- function(file){ dat <- read_csv(...) |> filter(Taxon == ...) }\nfit_model <- function(dat){ mod <- lm(Value ~ Treatment, data = ...) }\nmake_figure <- function(dat){ ggplot(dat, aes(...)) + geom_boxplot() }"
  },
  {
    "objectID": "02-workflow.html#trouble-shooting",
    "href": "02-workflow.html#trouble-shooting",
    "title": "\n2  Getting started with targets\n",
    "section": "\n2.2 Trouble shooting",
    "text": "2.2 Trouble shooting\n\n2.2.1 Object not found\nA common error is to call a target that does not exist. When running the pipeline this error will appear (Figure 2.2). This is usually if the name is spelled wrong or when using an old name.\n\n\n\n\nFigure 2.2: ?(caption)\n\n\n\n\n\n2.2.2 Duplicate target\nAnother common mistake is to use the same name for two different targets (Figure 2.3). This is common when copy pasting code. Rename one of the objects and the problem is solved.\n\n\n\n\nFigure 2.3: ?(caption)"
  }
]