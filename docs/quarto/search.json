[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enough Markdown to Write a Thesis",
    "section": "",
    "text": "The traditional way to write a report, manuscript or thesis is to run the analyses in R or some other software and then copy the figures, tables etc. into a word processor. Then you find an error in the code or data and need to repeat the process. Repeatedly.\nThis is very inefficient and error prone: there is a better way.\nQuarto lets you have the code and the text in one document. If the code or the data are updated, new versions of the figures and tables are automatically generated and inserted into the corrected document. This is a much more reproducible process.\nThis book is written with Quarto.\n\n\n\n\n\n\nReading\n\n\n\nPerkel (2022) Cut the tyranny of copy-and-paste with these coding tools, Nature 603, 191-192 doi: https://doi.org/10.1038/d41586-022-00563-z\n\n\n\nFirst Steps with Quarto shows you how to create a quarto document, edit it, add figures and tables, and render it as a finished document.\nTowards a Thesis shows you how author a manuscript, report or thesis in quarto by adding citations and cross-references to figures and tables.\nFixing Problems The final section has some trouble shooting suggestions.\n\n\n\n\n\n\nQuarto and R markdown\n\n\n\nQuarto is based on R markdown. If you know how to use R markdown, you know how to use quarto as almost any R markdown document should also work with quarto.\nThere are several improvements in quarto over R markdown which make it easier to use.\n\nNo need to remember different behaviour and capabilities of rmarkdown vs bookdown etc.\nSimplified cross-references\nBetter support for multiple programming languages\n\n\n\n\nYou will need to have installed\n\n\nRStudio (version 2022.2 or newer)\nR\nquarto\nquarto R package (install.packages(\"quarto\"))"
  },
  {
    "objectID": "gettingStarted.html",
    "href": "gettingStarted.html",
    "title": "\n2  Getting started\n",
    "section": "",
    "text": "An quarto file is a plain text file. You can create a new text file, give it the “.qmd” extension, and start typing. But it is better to use RStudio.\nGo to the “File” menu bar, then “New File”, then “Quarto Document…”. (If you don’t see this option, check you have quarto installed). The first time you do this, you may be asked to install some extra packages. Now you will have a pop-up window asking for the Title, author and output format (Figure 2.1). Make sure the “Use visual markdown editor” option it ticked.\n\n\n\n\nFigure 2.1: Choose the output format\n\n\n\n\nYou can fill these in now, or edit the document later. I recommend you start with “HTML” format as is doesn’t require any other software to be installed. When you are ready, click OK, and a new quarto file will open. It will look something like Figure 2.2\n\n\n\n\nFigure 2.2: The default quarto document.\n\n\n\n\nYou will learn about the elements of this file in Chapter 3.\n\nCreate an quarto document with output format HTML."
  },
  {
    "objectID": "gettingStarted.html#rendering-the-quarto-document",
    "href": "gettingStarted.html#rendering-the-quarto-document",
    "title": "\n2  Getting started\n",
    "section": "\n2.2 Rendering the quarto document",
    "text": "2.2 Rendering the quarto document\nYou can see the rendered quarto document by knitting it. Click the blue “Render” button which is above the document.\n\n\n\n\nThe render button\n\n\n\n\nThe first time you render the document, you need to save it first.\nExercise\nRender your quarto document and examine the output. If it worked then everything is set up correctly.\nFor the rest of this tutorial, we will analyse Bergen climate data and make a reproducible report.\nTo download the data and quarto document, you need to run\n\n#install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"biostats-r/BergenClimate\")\n\nThen follow the instructions. This will open the BergenClimate Rstudio project. Open the file bergen_weather.qmd and render it. The output is a bit of a mess - we are going to make it better!"
  },
  {
    "objectID": "elements.html",
    "href": "elements.html",
    "title": "3  Elements of an quarto file",
    "section": "",
    "text": "The YAML is metadata for the document that goes right at the top of the file between two sets of three dashes. The YAML consists of key: values pairs. The colon and space are required. Rstudio will autocomplete the keys.\n---\ntitle: \"My Manuscript\"\nformat: html\ndate: 2022-04-03\n---\nThe YAML can set the document author and title, the output format and many other things.\n\n\n\n\n\n\nWhite space\n\n\n\nYAML is sensitive to white space. For example, you must have the space after the colon.\n\n\nYou can use an RStudio Addin from the package ymlthis to help write the YAML.\n\n\n\n\n\n\nToday’s date\n\n\n\nWith the keyword today, you can make the document report the date it was rendered.\n---\ntitle: \"My Manuscript\"\nformat: html\ndate: today\n---\n\n\n\nAdd date and author to the YAML of your BergenClimate quarto document so it shows today’s date and your name when rendered.\n\nQuarto documents can be rendered in about 40 formats! The format can be specified when the quarto file is created in RStudio or by editing the YAML.\nProducing an html file to view in a browser is the simplest, as no extra software needs installing. The YAML should look something like this.\n---\ntitle: \"My Manuscript\"\nformat: html\n---\nWord documents are also easy; just change the format to docx. This can be very useful if you have a supervisor or collaborators who cannot cope with markdown directly.\nRendering the quarto file as a PDF requires some external tools (LaTeX) to be installed (you don’t need to learn any LaTeX). This can be done with the tinytxt package.\n\n# run this only once\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n\nThen the format in the YAML can be changed to pdf. With PDF documents, it can be tricky to control exactly where the figures are positioned, so I recommend working with html as long as possible.\n\n\n\n\n\n\nQuarto, PDF and LaTeX\n\n\n\nQuarto uses LaTeX to make PDFs. You don’t need to know any LaTeX, but you can include some if you want to change the formatting etc. For example, you force a new page, you could use the command.\n\\\\newpage\n\n\n\n\n\n\n\n\nCoauthoring with quarto\n\n\n\nPerhaps the best way to collaborate with coauthors on a quarto document is to use version control for example with GitHub.\nAn alternative is to use the trackdown package to upload markdown files to Google Drive where they can be edited and then downloaded again.\n\n\n\n\n\n\n\n\nComments\n\n\n\nA comment in an R code block starts with a #, just as in an ordinary R script.\nA comment in the text is enclosed an html comment mark\n<!-- This is a comment  -->\nType Ctrl + Shift + C to get this comment mark.\nIn the source editor, you can select text you want to hide and use this keyboard short-cut to comment it out."
  },
  {
    "objectID": "elements.html#text",
    "href": "elements.html#text",
    "title": "3  Elements of an quarto file",
    "section": "\n3.2 Text",
    "text": "3.2 Text\nType to make text! In the visual editor, you can format the text in much the same way you would work in MS word or Libra Office. RStudio has a built-in spell checker that will underline words it doesn’t recognise in red. Go to “Tools” >> “Global Options…” >> “Spelling” to change the language.\n\n3.2.1 Source editor\nSometimes it is useful to be able to write in markdown directly, rather than using the visual editor, for example if you are writing a question for stackoverflow.com or an issue on github.com. You can see this mode by clicking on “Source” above the document\n\n\n\n\n\n\nFigure 3.1: The Source code and Visual editors\n\n\n\nParagraphs have a blank line between them. It is good practice to write one sentence per line. The extra line breaks will be removed when the document in knitted. If you want to force a line break, put two spaces at the end of the line.\nFormatting is generated with some special characters. For example:\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n# Header 1\n\n4 Header 1\n\n\n## Header 2\n\n4.1 Header 2\n\n\n### Header 3\n\n4.1.1 Header 3\n\n\n*italics* and **bold**\n\nitalics and bold\n\n\n\nsuperscript m^2^\nsuperscript m2\n\n\n\nsubscript CO~2~\nsubscript CO2\n\n\n\n`verbatim code`\nverbatim code\n\n\n\n\n\n\n\n\n\nEscaping characters\n\n\n\nIf you actually want a *_^~ in the text, you need to escape it by putting a backslash \\ before it, e.g. \\*.\n\n\nA more complete list of formatting is given in the R markdown cheat sheet, and in the quarto documentation.\n\n\n\n\n\n\nVil du skrive på norsk\n\n\n\nVil du har Dato i stedet for Date, og Figur frem for Figure? Se denne siden om hvordan man kan oversette disse ordene i quarto.\n\n\nExercise\nThe Results section of the Bergen Climate document should be in Header 1 style. Fix this and render the document to check the formatting has worked."
  },
  {
    "objectID": "elements.html#code-blocks",
    "href": "elements.html#code-blocks",
    "title": "3  Elements of an quarto file",
    "section": "\n4.2 Code blocks",
    "text": "4.2 Code blocks\nCode in an R markdown document is contained in code blocks.\nThis is a code chunk that loads the penguin data from the palmerpenguins package.\n\n```{r}\ndata(penguins, package = \"palmerpenguins\")\n```\n\nIt starts with three back-ticks, followed by braces. Inside the braces, the “r” indicates that this block is in the R language. Next, on a new line, is the body of the code block. The block ends with three back-ticks on their own line. In the visual editor, you won’t see the back-ticks, but the code block will start with {r} and have a grey background.\n\n\n\n\nFigure 4.1: A code block in the visual editor\n\n\n\n\n\n4.2.1 Making a block\nYou can type the back-ticks and braces needed to make a block, but, when using the visual editor, it is easier to get RStudio to insert the block with the insert tool. Type a forwards slash / on a blank line and choose “R code chunk”.\n\n4.2.2 Block language\nWe will just work with R code blocks, but it is possible to run block in other languages, including Python and Julia.\nExercise\nMake a new code block (or blocks) that make a plot showing annual precipitation for Bergen.\nHint\nYou can copy and modify some of the existing code rather than writing from scratch.\n\n4.2.3 Block options\nCode block options control how the blocks work and how any output is treated. Options are given in special comments at the top of the block.\n\n```{r}\n#| label: penguins-bill-body\n#| warning: false\n#| fig-cap: \"The figure caption\"\n#| fig-alt: Plot of penguin bill length against body mass by species\n\nlibrary(ggplot2)\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point()\n```\n\n\n\nThe figure caption\n\n\n\n\n\n\n\n\n\n\nOptions format\n\n\n\nThe white space in the block options is critical.\n\nIf you don’t have the space after the #| then the option becomes a regular comment and is ignored.\nIf you don’t have a space after the colon, you get “ERROR: Render failed due to invalid YAML.”\n\ntrue and false are written in lower case (in R they are upper case).\n\n\nThere are lots of block options, but only a few that you will need to use frequently. Here are some and their default.\n\n\necho (true) Show the chunk’s code in the output.\n\neval (true) Run the chunk code.\n\ninclude (true) Include the output of the chunk in the document.\n\nmessage (true) Include messages from R.\n\nwarning (true) Include warnings from R.\n\nerror (false) If true, includes any error message and carries on. If false, stops knitting when there is an error in R code.\n\nI leave message and warning as true while I am writing the document, so I can see any possible problems, and set them to false when I render the final version.\nI sometimes find it useful to set error to true as can make it easier to debug any errors in the code.\nChunk options for figures are shown in section @figure-chunk-options.\nFor more options see https://quarto.org/docs/computations/execution-options.html\nExercise\nImporting packages produces lots of output that we don’t need to see in the final report Use block options to hide the output of this block.\nThe plot of temperature against year is giving a message about the formula for geom_smooth. Use block options to make this message go away.\n\n4.2.4 Setting global block options\nGlobal code block options can be set for all code blocks by including execute with the option in the YAML at the top of the file.\nFor example, this YAML would set echo to be false for the entire document (options for individual blocks could override this).\n---\ntitle: \"My Manuscript\"\nformat: html\nexecute:\n  echo: false\n---\nExercise\nUse global block options to stop the code from showing in the report.\n\n4.2.5 Block labels\nIt is a good idea to give code blocks labels which you can do with the label option. If you don’t, they will automatically be called “unnamed-chunk-n” where “n” is a incrementing number. This is inconvenient for debugging (you need to work out which chunk is “unnamed-chunk-38”) and for working with any image files generated by the document. In section Chapter 6 you will see how to use chunk names to cross-reference figures and tables in your document.\n\n4.2.5.1 Rules for block labels\nBlock labels should be informative and can contain letters and numbers. Words should be separated by hyphens (“-”).\n\n\n\n\n\n\nSpecial characters in labels\n\n\n\nAvoid spaces, underscores, periods and other special characters in code block labels. They will cause all sorts of strange problems.\n\n\n\n4.2.6 Running a code block\nCode in blocks will be run when the document is rendered (unless eval: false), but it is also useful to run the code interactively to check that it works. You can do this by clicking on the green play buttons at the top-right of the block (Figure 4.2) or from the Run button above the document. If the code depends on previous block, the grey/green icon will run them all.\n\n\n\n\nFigure 4.2: The green run block icon and the grey/green icon to run all previous code blocks\n\n\n\n\n\n4.2.7 Hiding a block\nIf a block has a lot of code, it can be useful to hide it to make it easier to navigate the document. The grey arrow next to the line numbers will do this. Sections of text can also be hidden.\n\n4.2.8 Environments and working directory\nR renders quarto documents in a new R session. Initially, no packages are loaded and the environment is empty: the quarto document does not have access to any objects in your current environment (this is a good thing for reproducible analyses). This means that any data or packages you want to use in the document needs to be imported by the code in the document.\nThe working directory for the new R session used when rendering the quarto file is the directory where the quarto file is. If the file is in the root directory of an RStudio project, relative paths will work the same way in the quarto document as from the console. If the quarto file is in a sub-directory, use here::here() to form paths relative to the project root."
  },
  {
    "objectID": "elements.html#inline-code",
    "href": "elements.html#inline-code",
    "title": "3  Elements of an quarto file",
    "section": "\n4.3 Inline code",
    "text": "4.3 Inline code\nIn addition to the output from code blocks, you can insert code directly into text. This lets you avoid copying and pasting numbers from the output. Inline code is enclosed by back-ticks and starts with an r.\n\n\nSeven times six is `r 7 * 6`\n\n\nSeven times six is 42\nIn the visual editor, you can make inline code by clicking on the </> icon.\n\n\n\n\n\n\nNumbers in words\n\n\n\nIf you want numbers written as words, for example at the start of a sentence, use the package english.\n\n\nSeven times six is `r english::words(7 * 6)`\n\n\nSeven times six is forty-two\n\n\nIt is best to keep inline code short to keep the text readable. One trick is to do all necessary calculations in a previous code block, so only the name of the object with the result needs to be in the inline code. If there are many results to report, consider storing them in a list as in the following example.\n\ncor_adelie <- cor.test(\n  ~ bill_length_mm + body_mass_g,\n  data = penguins,\n  subset = species == \"Adelie\")\n\nadelie_list <- list(\n  #degrees of freedom\n  df = cor_adelie$parameter,\n  # extract correlation and round\n  est = round(cor_adelie$estimate, 2),\n  #format p.value with an \"=\" is the first character is not \"<\".\n  #See the characters tutorial for more on the stringr package and regular expressions.\n  p_val = str_replace(\n    string = format.pval(cor_adelie$p.value, eps = 0.001),\n    pattern = \"^(?!<)\",\n    replacement = \"= \")\n)\n\n\ncat(\"Bill length and body mass in Adelie penguins are positively correlated,\nr = `r adelie_list$est` (df = `r adelie_list$df`, p `r adelie_list$p_val`).\")\n\nBill length and body mass in Adelie penguins are positively correlated,\nr = `r adelie_list$est` (df = `r adelie_list$df`, p `r adelie_list$p_val`).\n\n\nBill length and body mass in Adelie penguins are positively correlated, r = 0.55 (df = 149, p < 0.001).\nExercise\nUse some inline R code to report the maximum monthly temperatures in Bergen.\nHint\nmax()"
  },
  {
    "objectID": "figuresTables.html",
    "href": "figuresTables.html",
    "title": "\n4  Figures, tables and equations\n",
    "section": "",
    "text": "Plots can be included with a chunk that makes a figure with either base plot or ggplot.\nIf you make the plot with ggplot, remember to print it.\n\n```{r}\n#| label: fig-histogram\n#| fig-cap: \"An embedded figure\"\n#| fig-alt: \"A histogram of penguin bill lengths made with ggplot2\"\n#| message: false\np <- ggplot(penguins, aes(x = bill_length_mm)) +\n  geom_histogram()\np # remember to print the plot\n```\n\nWarning: Removed 2 rows containing non-finite values (stat_bin).\n\n\n\n\nFigure 4.1: An embedded figure\n\n\n\n\n\n\n\n\n\n\nFigure labels\n\n\n\nThe label for the figure block must start with fig- for the figure to get a figure number and be possible to link to. See Chapter 6 on cross-referencing.\n\n\n\nThere are several useful block options for figures, including:\n\n\nfig-cap figure caption.\n\nfig-alt alternate text to improve accessibility\n\nfig-height figure height in inches (1 inch = 25.4 mm)\n\nfig-width figure width in inches\n\n\nThe figure of temperature against year is missing a caption. Use code block options to give it an appropriate caption.\nMany journals require figures to be a specific size so they fit with the journal layout. For PLOSone, figures that fit in one column can be up to 13.2 cm (5.2 inches) wide. Use code block options to ensure that the figure would fit."
  },
  {
    "objectID": "figuresTables.html#embedding-external-images",
    "href": "figuresTables.html#embedding-external-images",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.2 Embedding external images",
    "text": "4.2 Embedding external images\nIn the visual editor, photographs and other figures that have been prepared outside of R can be included with the insert tool by typing “/” on a blank line and choosing “Figure/Image”. This will open an menu to get the path to the image and set the caption etc. Once you close the menu, you can set the figure size. This will generate a bit of markdown that looks like.\n![Marine diatoms](Pics/Marine_diatoms_SEM2.jpg){fig-alt=\"SEM photograph of marine diatoms\" width=\"491\"}\n\n\nMarine diatoms\n\n\nAlternatively, you can use knitr::include_graphics() in a regular code block.\n\n```{r}\n#| label: fig-include-figure\n#| out-width: \"491px\"\n#| fig-cap: \"An embedded figure of diatoms\"\n#| fig-alt: \"An embedded figure of diatoms\"\nknitr::include_graphics(\"Pics/Marine_diatoms_SEM2.jpg\")\n```\n\n\n\nFigure 4.2: An embedded figure of diatoms\n\n\n\n\nUse the out.width and out.height chunk options to set the display size of the figure."
  },
  {
    "objectID": "figuresTables.html#tables",
    "href": "figuresTables.html#tables",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.3 Tables",
    "text": "4.3 Tables\nYou can make tables in markdown by hand (the / insert tool helps a lot), but it often so much easier to use R.\nSimple tables can be made with the function knitr::kable. Several packages, including kableExtra and gt can make beautiful tables.\n\n4.3.1 kable\n\nknitr::kable(x = slice(penguins, 1:5), #the data for the table\n             caption = \"The top penguins\" # the caption\n)\n\n\nThe top penguins\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n\n\n\n\n\n\n4.3.2 gt\nThe gt package can make more elaborate tables than knitr::kable().\n\nlibrary(gt)\npenguins |>\n  slice(1:5) |> # get top few rows only\n  gt(caption = \"Basic gt table\")\n\npenguins |>\n  slice(1:5) |>\n  rename_with(str_to_sentence) |> # capitalise first letters\n  gt(caption = \"gt table with more features\") |>\n  cols_label(Bill_length_mm = \"Length mm\",\n             Bill_depth_mm  = \"Depth mm\",\n             Flipper_length_mm = \"Flipper length mm\",\n             Body_mass_g = \"Body mass g\") |>\n  tab_spanner(label = \"Bill\", columns = c(Bill_length_mm, Bill_depth_mm)) |>\n  tab_spanner(label = \"Body\", columns = c(Flipper_length_mm, Body_mass_g))\n\n\nTable 4.1: Tables with gt\n\n\n\n\n\n\n\n(a) Basic gt table\n  \n  \nspecies\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n      year\n    \n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n\n\n\n\n\n\n\n\n\n\n\n\n(b) gt table with more features\n  \n  \n\nSpecies\n      Island\n      \n        Bill\n      \n      \n        Body\n      \n      Sex\n      Year\n    \n\nLength mm\n      Depth mm\n      Flipper length mm\n      Body mass g\n    \n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumber of decimal places\n\n\n\nWhen reporting real numbers (i.e. numbers that have a decimal part), you need to decide how many digits to display. Be careful not to show spurious precision. You can use round() to remove unwanted decimals, or gt::fmt_number() to clean up one or more columns in a table. To control the default number of decimals across the whole document, use options(digits = 2) in the first chunk.\n\n\nExercise\nWrite a code block to make a table showing the mean precipitation and its standard deviation for each month.\nHint\ngroup_by() and summarise() then use any of the table making functions."
  },
  {
    "objectID": "figuresTables.html#equations",
    "href": "figuresTables.html#equations",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.4 Equations",
    "text": "4.4 Equations\nEquations are embedded in a pair of dollar symbols. RStudio will show a preview of the equation as you type it. Equations are written with LaTeX notation.\n\n\n\n\nWhat\nHow\nOutput\n\n\n\nLower-case Greek letters\n$\\sigma$\n\\(\\sigma\\)\n\n\nUpper-Case Greek Letters\n$\\Sigma$\n\\(\\Sigma\\)\n\n\nSubscript\n$\\beta_{0}$\n\\(\\beta_{0}\\)\n\n\nSuperscript\n$\\chi^{2}$\n\\(\\chi^{2}\\)\n\n\nFractions\n$\\frac{1}{2}$\n\\(\\frac{1}{2}\\)\n\n\nRoots\n$\\sqrt{4} = 2$\n\\(\\sqrt{4} = 2\\)\n\n\n\n\n\n\nHere is an example of using an inline equation.\nThe $\\delta^{13}C$ value ...\nThe \\(\\delta^{13}C\\) value …\nA double dollar enclosure gives the equation its own line. For example, this is the equation of a standard deviation that uses several different elements.\n$$\nSD = \\sqrt{\\frac{\\sum_{i=1}^{n}{(x_i - \\bar{x})^2}}{n-1}}\n$$\n\n\\[\nSD = \\sqrt{\\frac{\\sum_{i=1}^{n}{(x_i - \\bar{x})^2}}{n-1}}\n\\]\nWhen making a complex formula, build one element at a time, often starting in the middle, rather than trying to get it all working at once."
  },
  {
    "objectID": "figuresTables.html#chemistry",
    "href": "figuresTables.html#chemistry",
    "title": "\n4  Figures, tables and equations\n",
    "section": "\n4.5 Chemistry",
    "text": "4.5 Chemistry\nEquations are printed in an italic font, which is not great for chemical formulae. We can fix this with the \\mathrm LaTeX command which forces roman typeface.\nSulphate $\\mathrm{SO_4^{2-}}$\nSulphate \\(\\mathrm{SO_4^{2-}}\\)\n\n\n$$\\mathrm{CO_3^{2-} + H^+ \\rightleftharpoons HCO_3^{2-}}$$\n\n\\[\\mathrm{CO_3^{2-} + H^+ \\rightleftharpoons HCO_3^{2-}}\\]"
  },
  {
    "objectID": "bibcite.html",
    "href": "bibcite.html",
    "title": "\n5  Citations and bibliographies\n",
    "section": "",
    "text": "Quarto can add citations and a bibliography to a document. Use the bibliography field in the YAML to point to the bibliography file.\nThe bibliography file can be in one of several formats, including bibTeX (*.bib) and endnote (*.enl). Any reference manager should be able to export to a bibTeX file."
  },
  {
    "objectID": "bibcite.html#citations",
    "href": "bibcite.html#citations",
    "title": "\n5  Citations and bibliographies\n",
    "section": "\n5.1 Citations",
    "text": "5.1 Citations\nUse the citation keys from the bibliography to cite the reference in the text. So to cite the reference with the citation key “Cooper2017” we would use.\nReproducible code [@Cooper2017] ...\n@Cooper2017 discuss ...\nThe output depends on the csl file (see below). Using the default author-date style gives\n\nReproducible code (Cooper and Hsing 2017) …Cooper and Hsing (2017) discuss …\n\nIn the visual editor, type @ to get suggestions from the bibliography. This is not so useful if you have many references. Alternatively, summon the import anything tool by typing ctrl + / and opening the citation menu, which lets you search for references in the bibliography or add new ones.\nExercise\nAdd a citation to Töpper et al (2018) to the introduction to your quarto document as an example of climate change impacts on terrestrial ecosystems."
  },
  {
    "objectID": "bibcite.html#citation-style",
    "href": "bibcite.html#citation-style",
    "title": "\n5  Citations and bibliographies\n",
    "section": "\n5.2 Citation style",
    "text": "5.2 Citation style\nIf you don’t like the default citation style, or you want to submit a manuscript to a journal with an overly pedantic editor, you can change the citation style by specifying a csl file in the YAML.\n---\ntitle: \"My Manuscript\"\noutput: html_document\nbibliography: reproducibility.bib\ncsl: plos.csl\n---\nThe csl (Citation Style Language) file defines the citation style. There are thousands of citation style available from http://zotero.org/styles (there are specific formats for publishers and many journals).\nExercise\nChange the csl file from nordic-journal-of-botany.csl to plos.cls. Render the document to see how the citations change in the text and in the bibliography."
  },
  {
    "objectID": "bibcite.html#citation-problems",
    "href": "bibcite.html#citation-problems",
    "title": "\n5  Citations and bibliographies\n",
    "section": "\n5.3 Citation problems",
    "text": "5.3 Citation problems\nUnfortunately, there can be problems with the bibliography and citation. Most can be solved by googling the error message. A few common problems are addressed here.\n\n5.3.1 Incorrect capitalisation\nMany CLS styles convert the title to title case (i.e. only first letter of the first word is capitalised). This can be annoying as names (people, countries, species) can be given in the wrong case.\nA paper with the title\nPopulation ecology of polar bears at Svalbard, Norway.\nmay appear as\nPopulation ecology of polar bears at svalbard, norway.\nThis can be fixed by editing the bibtex file, putting braces around the word with capitals that need to be kept.\nPopulation ecology of polar bears at {Svalbard}, {Norway}.\n\n5.3.2 Accents and other special characters\nThe tool-chain that processes quarto files can sometimes fall over with accented characters or other diacritic marks in the references. The error message will look something like this\n! Package inputenc Error: Unicode character ́ (U+0301)\n(inputenc)                not set up for use with LaTeX.\nOne solution is to edit the bibtex file to replace the accented character with an escaped code. For example, the “í” in “Martínez” could be replaced by “\\’{i}”."
  },
  {
    "objectID": "bibcite.html#bibliography-placement",
    "href": "bibcite.html#bibliography-placement",
    "title": "\n5  Citations and bibliographies\n",
    "section": "\n5.4 Bibliography placement",
    "text": "5.4 Bibliography placement\nBy default, the bibliography is placed at the end of the document. It will be given the header “References”. If you want a different header, end the document with it.\n# Conclusions\n\nQuarto is cool.\n\n# Bibliography {-}\nThe {-} stops quarto from numbering the reference section header.\nIf you want to move the bibliography, for example because you need to finish with an appendix, you need to use this bit of magic.\n# Conclusions\n\nQuarto is very cool.\n\n# References {-}\n\n::: {#refs}\n:::\n\n# Appendix A"
  },
  {
    "objectID": "crossReference.html",
    "href": "crossReference.html",
    "title": "6  Cross-referencing",
    "section": "",
    "text": "Cross-referencing lets you refer to figures and tables in your document. Once set up, this happens automatically, so you don’t need to re-number all the figures when you add or delete one."
  },
  {
    "objectID": "crossReference.html#cross-referencing-figures-and-tables",
    "href": "crossReference.html#cross-referencing-figures-and-tables",
    "title": "6  Cross-referencing",
    "section": "\n6.1 Cross-referencing figures and tables",
    "text": "6.1 Cross-referencing figures and tables\nThe block that made the figure or table needs to have a label that starts with fig- or tbl-, respectively. The figure or table also need a caption.\n\n```{r}\n#| label: fig-penguin-dens\n#| fig-cap: Histogram of penguin body mass\n#| fig-alt: Histogram of penguin body mass made with ggplot2\n#| warning: false\n\npenguins |>\n  ggplot(aes(x = flipper_length_mm, fill = species)) +\n  geom_density(alpha = 0.7) +\n  scale_fill_brewer(palette = \"Set1\")\n```\n\n\n\nFigure 6.1: Histogram of penguin body mass\n\n\n\n\nTo cross-reference the figure made by the above chunk, we need to use this notation.\nPenguins are cool (@fig-penguin-dens)\nPenguins are cool (Figure 6.1)\nIf you type an @ in the visual editor it will make suggestion. If, in the visual editor, it does not show up in a smaller blue font, something has gone wrong. Delete it and make sure there is a space before the @.\nTo refer to a table made by a block labelled tbl-penguin-results, you would use\nPenguins are cool (@tbl-penguin-results))\nIf you get the chunk name wrong, there will be a warning when the document in knitted, and question marks shown where the reference should be.\nFigure @fig-no-exist) does not exist\nNon-existing figure (?fig-no-exist))"
  },
  {
    "objectID": "crossReference.html#cross-referencing-equations",
    "href": "crossReference.html#cross-referencing-equations",
    "title": "6  Cross-referencing",
    "section": "\n6.2 Cross-referencing equations",
    "text": "6.2 Cross-referencing equations\nTo cross-reference an equation, we need to give it a label.\n$$\n\\frac{\\sum_{i=1}^{n}{x_i}}{n}\n$${#eq-mean}\n\nNow the label can be used.\nThe mean (equation @eq-mean).\n\\[\n\\frac{\\sum_{i=1}^{n}{x_i}}{n}\n\\qquad(6.1)\\]\nThe mean (equation Equation 6.1)."
  },
  {
    "objectID": "crossReference.html#sec-cross-referencing-document-sections",
    "href": "crossReference.html#sec-cross-referencing-document-sections",
    "title": "6  Cross-referencing",
    "section": "\n6.3 Cross-referencing document sections",
    "text": "6.3 Cross-referencing document sections\nYou can also make cross-references to other sections of the document. First, you need to set up a identifier for the section you want to link to. In the visual editor, this can be done by clicking on the three dots to the right of the header ( Figure 6.2) . The ID should start with #sec- and be in lower case ( Figure 6.3). Now you can use this ID to make a link by typing @.\n\n\n\n\nFigure 6.2: Click on the three dots to get the Edit Attributes menu\n\n\n\n\n\n\n\n\nFigure 6.3: The Edit Attributes menu\n\n\n\n\n## Cross-referencing document sections {#sec-cross-referencing-document-sections}\n\nCross-referencing (@sec-cross-referencing-document-sections)\nCross-referencing (Section 6.3)\nNote that the reference must be written in lower case and spaces must be replaced by hyphens. Punctuation is deleted."
  },
  {
    "objectID": "journalFormatting.html",
    "href": "journalFormatting.html",
    "title": "\n7  Formatting for a thesis or article\n",
    "section": "",
    "text": "We have made a quarto Masters thesis template that you can download and use. It takes care of formatting the thesis’ cover page which otherwise would need you to know some LaTeX."
  },
  {
    "objectID": "journalFormatting.html#journal-specific-formatting",
    "href": "journalFormatting.html#journal-specific-formatting",
    "title": "\n7  Formatting for a thesis or article\n",
    "section": "\n7.2 Journal-specific formatting",
    "text": "7.2 Journal-specific formatting\nUse the rticles package to produce a draft manuscript in a journal-specific format. Many journal formats are available. Currently this is available for R markdown, but not yet quarto.\n\nlibrary(\"rmarkdown\")\ndraft(\"MyArticle.Rmd\", template = \"plos\", package = \"rticles\")"
  },
  {
    "objectID": "journalFormatting.html#line-numbers",
    "href": "journalFormatting.html#line-numbers",
    "title": "\n7  Formatting for a thesis or article\n",
    "section": "\n7.3 Line numbers",
    "text": "7.3 Line numbers\nIf you are creating a PDF, you can include line numbers by adding a header-includes section to the YAML.\n---\ntitle: \"My Manuscript\"\noutput: bookdown::pdf_document2\nheader-includes:\n   - \\usepackage{lineno}\n   - \\linenumbers\n---\nOther LaTeX packages can be added in a similar way to add extra functionality, for example, pages in landscape."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "\n8  Presentations in quarto\n",
    "section": "",
    "text": "Figure 8.1: Creating a new quarto presentation\n\n\n\n\nThis will open a new presentation with some place-holder text. Press Render to see the rendered presention.\nEverything about text, code blocks, tables and figures you know from quarto still applies to quarto presentations. The most important thing to learn is how to make new slides.\n---\ntitle: \"My beautiful presentation\"\nauthor: Richard Telford\nformat: revealjs\neditor: visual\n---\n\n## This is a new slide\n\nlevel 2 headers make new slides\n\n# This is a new section\n\n## Another new slide\n\nLevel 1 headers make new sections\n\n---\nThis slide does not start with a title\nThis demo shows what you can do with a Revealjs presentation made with quarto.\n\n\n\n\n\n\nReading\n\n\n\nRevealjs with quarto"
  },
  {
    "objectID": "otherTopics.html",
    "href": "otherTopics.html",
    "title": "9  Other topics",
    "section": "",
    "text": "If code runs slowly, the output of code blocks can be cached, so next time the document is rendered the existing cached results can be used, unless the code has been changed. The caching system in quarto can be activated by setting the code block option cache = TRUE. The caching system can be tricky to set up for complex projects, and the targets package is a much more robust framework for building reproducible analysis pipelines. See this demonstration project for an example of how to set up targets."
  },
  {
    "objectID": "otherTopics.html#paramertised-reports",
    "href": "otherTopics.html#paramertised-reports",
    "title": "9  Other topics",
    "section": "9.2 Paramertised reports",
    "text": "9.2 Paramertised reports\nIf you need a template for many reports, for example, showing results for a specific location or time period, consider using Paramertised reports which allow you to pass a variable into an R markdown document when it is knitted."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "10  Troubleshooting",
    "section": "",
    "text": "It is normal to have errors when working with R and quarto. Problems can be minimised by developing the document and code incrementally and rendering it repeatedly so that errors can be detected immediately.\nHere are some common problems."
  },
  {
    "objectID": "troubleshooting.html#duplicate-block-labels",
    "href": "troubleshooting.html#duplicate-block-labels",
    "title": "10  Troubleshooting",
    "section": "10.1 Duplicate block labels",
    "text": "10.1 Duplicate block labels\nCode block labels must be unique. If they are not you will get an error message including the following\n  Duplicate chunk label 'import', which has been used for the chunk:\nIdentify the offending code block and re-label it."
  },
  {
    "objectID": "troubleshooting.html#more-errors-to-come",
    "href": "troubleshooting.html#more-errors-to-come",
    "title": "10  Troubleshooting",
    "section": "10.2 More errors to come",
    "text": "10.2 More errors to come\nTell me what you find difficult."
  },
  {
    "objectID": "furtherReading.html",
    "href": "furtherReading.html",
    "title": "11  Further reading",
    "section": "",
    "text": "R markdown cheat sheet\nR markdown from RStudio\nR Markdown: The Definitive Guide"
  }
]