[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"index.html","id":"before-we-start","chapter":"1 Introduction","heading":"Before we start","text":"must successfully switched PC, Mac Linux machine.","code":""},{"path":"index.html","id":"what-is","chapter":"1 Introduction","heading":"1.1 What is ?","text":" powerful statistical graphical tool available platforms (Windows, Mac, Linux, etc.).\nR free open source, means anyone can freely use access source code, understand actually data, create add-ons fit specific purpose, etc.R conventional software tools available via graphical user interface (GUI) menus buttons.\nInstead, users run commands via script, read output either console, separate, dedicated window.R also programming language organized around objects store data functions manipulate data.\nThroughout website, learn language art writing meaningful code chunks transform raw data understandable results form plots, tables, figures reports.","code":""},{"path":"index.html","id":"why-using-r","chapter":"1 Introduction","heading":"1.1.1 Why using R?","text":"R widely adopted biologists generally life science community. reasons include:R free.R efficient terms data processing, even large data sets.R large online community ready help answer questions.R adaptable: certainly find one several packages (.e. add-ons) discipline, solving problems face.R transparent: code behind functions packages accessible, meaning know exactly R raw data (don’t assume ).R produces clean figures ready publication scientific journals.R allows reproducible research: anyone running code data get exact result .R code easy share publish.R contributes replicability: anyone can use published code another data set replicate findings ().","code":""},{"path":"getting-started-with-r.html","id":"getting-started-with-r","chapter":"2 Getting started with R","heading":"2 Getting started with R","text":"","code":""},{"path":"getting-started-with-r.html","id":"working-in-r-via-rstudio","chapter":"2 Getting started with R","heading":"2.0.1 Working in R via RStudio","text":"R comes GUI depicted Figure 2.1.\nNearly everything R happens either script editor (R editor - Figure 2.1, left window) user writes code, console (R console - Figure 2.1, right window) runs commands prints results.\nFigure 2.1: R Graphical User Interface.\nminimalist GUI offer much short main menu five buttons total.\nengine analyses, look user-friendly.Fortunately, programs can fix .\nRStudio one .","code":""},{"path":"getting-started-with-r.html","id":"what-is-rstudio","chapter":"2 Getting started with R","heading":"2.0.2 What is RStudio?","text":"RStudio integrated development environment (IDE) R language.\nRStudio runs R “background”, replaces minimalist interface .\nmeans lose anything R’s power, simply work different perspective.Figure 2.2 shows RStudio’s GUI.\nFigure 2.2: RStudio Graphical User Interface.\ninterface complex organized.\nscript editor (top left) advanced equipped syntax highlighter, prove useful writing code.\nMany functions (console, file explorer, etc) available dispatched panes tabs.\nsignificant benefit using RStudio possibility create manage projects.\nProjects let organize tasks load files packages define necessary workflow.describe RStudio’s interface section 2.2.1 set projects section 2.4.\nnow, let’s install everything need, starting R RStudio.","code":""},{"path":"getting-started-with-r.html","id":"installing-r-and-rstudio","chapter":"2 Getting started with R","heading":"2.1 Installing R and RStudio","text":"several ways install R RStudio machine, depending whether UiB/NTNU student staff, neither.\nfollowing sections give way proceed cases.","code":""},{"path":"getting-started-with-r.html","id":"uib-student","chapter":"2 Getting started with R","heading":"2.1.1 UiB student","text":"UiB students can access download R RStudio virtual machine, Third Party Portal (apps.uib.).\nSimply go apps.uib., search R RStudio install virtual machine.\nfind information log use Third Party Portal first time Mitt UiB.","code":""},{"path":"getting-started-with-r.html","id":"uib-staff","chapter":"2 Getting started with R","heading":"2.1.2 UiB staff","text":"UiB staff working client setup machine use app “Software Center” (Windows 10) “Managed Software Center” (Mac OS) install R RStudio.\nfind help programme installation (Windows) (Mac OS).UiB staff wish install R RStudio virtual machine can use Third Party Portal (apps.uib.).\nSimply go apps.uib., search R RStudio install machine.\nfind information log use Third Party Portal Mitt UiB.","code":""},{"path":"getting-started-with-r.html","id":"ntnu-student","chapter":"2 Getting started with R","heading":"2.1.3 NTNU student","text":"NTNU students can access download many programmes, including R RStudio, software.ntnu..\nSimply go software.ntnu., search R RStudio install machine.","code":""},{"path":"getting-started-with-r.html","id":"ntnu-staff","chapter":"2 Getting started with R","heading":"2.1.4 NTNU staff","text":"NTNU staff working client setup Windows machine shall use app “Software Center” comes preinstalled install R RStudio.\ndescription find use Software Center can found .\nSearch R RStudio “Applications”, install machine.Alternatively, go software.ntnu., search R RStudio install .","code":""},{"path":"getting-started-with-r.html","id":"anyone","chapter":"2 Getting started with R","heading":"2.1.5 Anyone","text":"","code":""},{"path":"getting-started-with-r.html","id":"installing-r","chapter":"2 Getting started with R","heading":"2.1.5.1 Installing R","text":"Go Comprehensive R Archive Network.\ntop section “Download Install R”, click link matches platform follow instructions install version R designed OS.","code":""},{"path":"getting-started-with-r.html","id":"install-rstudio","chapter":"2 Getting started with R","heading":"2.1.5.2 Install RStudio","text":"Go RStudio’s website download free version RStudio Desktop made OS.\nInstall machine.","code":""},{"path":"getting-started-with-r.html","id":"section","chapter":"2 Getting started with R","heading":"","text":"","code":""},{"path":"getting-started-with-r.html","id":"exercise","chapter":"2 Getting started with R","heading":"Exercise","text":"Install R RStudio either laptop (UiB students can use Third Party Portal instead).\nneed R version 4.1 newer recent version RStudio.\ninstalled R RStudio months ago, need reinstall .","code":""},{"path":"getting-started-with-r.html","id":"starting-with-rstudio","chapter":"2 Getting started with R","heading":"2.2 Starting with RStudio","text":"Now R RStudio installed machine, ready start.\nNote need anything link RStudio R vice versa.\nEverything ready use.","code":""},{"path":"getting-started-with-r.html","id":"the-interface","chapter":"2 Getting started with R","heading":"2.2.1 The interface","text":"\nFigure 2.3: Opening RStudio first time.\ninterface divided 3 panes:large one left contains tabs Console, Terminal Jobs,smaller one top right quadrant tabs Environment, History, Connections Tutorial,last one bottom right quadrant tabs Files, Plots, Packages, Help Viewer.upcoming sections, see tabs made (NB: tabs bold dealt ).","code":""},{"path":"getting-started-with-r.html","id":"scripts","chapter":"2 Getting started with R","heading":"2.2.2 Scripts","text":"First, go main menu File > New File choose R Script.\nopens new, empty tab called Untitled1 top left pane (see Figure 2.4).\nFigure 2.4: script Untitled1 shows top left pane.\ntab displays script.\nscript worksheet looks lot like plain text file.\nwrite code, edit , correct necessary.\nmay contain just lines, hundreds .\nmay also contain comments (lines starting symbol #) help keep track work.simple script:may open several scripts time.\nshow separate tab top left pane RStudio.\ntab title red followed star *, means script yet saved, edited since last time saved.\nScripts may saved time using CTRL + S (⌘ + S).section 2.5, talk working scripts adding comments.","code":"\n# this is my data\nsimple_data <- c(4, 5, 9, 75, 2, 11, 8, 45, 61, 64, 54, 5, 4, 4, 16, 65, 4, 65, 1, 56, 16, 5, 49, 4, 65)\n\n# calculate the mean\nmean(simple_data)\n\n# calculate the standard deviation\nsd(simple_data)"},{"path":"getting-started-with-r.html","id":"console-and-terminal","chapter":"2 Getting started with R","heading":"2.2.3 Console and Terminal","text":"tabs Console Terminal located bottom left pane RStudio, along Jobs (see Figure 2.5).\nFigure 2.5: tabs Console Terminal located bottom left pane.\n","code":""},{"path":"getting-started-with-r.html","id":"the-console-tab","chapter":"2 Getting started with R","heading":"2.2.3.1 The Console tab","text":"console R module executes commands.\nfind output/results commands providing can display symbols characters (opposed graphics).greater-sign > displays beginning line.\nprompt.\nconsole, every command enter prompt appears blue; output commands printed black, errors warning messages appear red (see Figure 2.6).\nFigure 2.6: console prints code, output messages different colors.\ncan actually write simple command directly console run Enter, good practice: one always write code script run console (see section 2.5).\nexception code don’t want run , code install package.plus sign + appears instead >, means command incomplete (possibly missing bracket quote mark) R waiting something .\nmay either complete code, press Esc return prompt.","code":""},{"path":"getting-started-with-r.html","id":"the-terminal-tab","chapter":"2 Getting started with R","heading":"2.2.3.2 The Terminal tab","text":"tab Terminal allows manipulating files locally machine remotely server, running Python scripts, etc (see Figure 2.7).\nFigure 2.7: tab Terminal allows running commands outside R environment.\n","code":""},{"path":"getting-started-with-r.html","id":"files-plots-and-packages","chapter":"2 Getting started with R","heading":"2.2.4 Files, Plots and Packages","text":"tabs Files, Plots Packages located bottom right pane, along Help Viewer (see Figure 2.8).\nFigure 2.8: tab Files, Plots Packages located bottom right pane.\n","code":""},{"path":"getting-started-with-r.html","id":"the-files-tab","chapter":"2 Getting started with R","heading":"2.2.4.1 The Files tab","text":"tab Files file explorer lets navigate folder structure project (info projects, see section 2.4).RStudio starts given project, tab Files displays default content project folder.\nnew project, content able see single .Rproj file.\nNB: see section 2.4 benefits work project .\nalso folder scripts create preferentially saved stored.\nFeel free add subfolders, data files anything else relevant work.\nFigure 2.9: menu tab Files\nVia menu, can rename /delete files checked list beforehand; can also create new folders, copy move items places via dropdown menu button .","code":""},{"path":"getting-started-with-r.html","id":"the-plots-tab","chapter":"2 Getting started with R","heading":"2.2.4.2 The Plots tab","text":"tab Plots place graphic outputs result code displayed.Whenever code chunk leading plot run console, corresponding plot appears tab size adapt automatically size pane.\nchanging dimensions pane, plots automatically refreshed fit new frame.\nFigure 2.10: menu tab Plots\nVia menu, can explore plots created (latest one) arrows, zoom , delete current plot plots.\nbutton Export offers two options save currently displayed plot file.\nmay either save image save pdf.\ncases, dialog box pops lets define dimensions, target folder, file name, file type, etc.","code":""},{"path":"getting-started-with-r.html","id":"the-packages-tab","chapter":"2 Getting started with R","heading":"2.2.4.3 The Packages tab","text":"tab Packages provides list R packages currently installed machine (see Figure 2.11).\nFigure 2.11: tab Packages shows packages installed machine.\nline corresponds specific package.\ncheckbox left indicates whether package currently loaded RStudio , case command referring perform properly.\nshort description package comes along, well version package currently installed.\nConveniently, globe icon right brings online information page, cross icon allows uninstall package.two items found menu (depicted Figure 2.12):Install, also install new packages remote repository file machine,Update, searches newer versions packages already machine.\nFigure 2.12: menu tab Packages\n","code":""},{"path":"getting-started-with-r.html","id":"environment-and-tutorial","chapter":"2 Getting started with R","heading":"2.2.5 Environment and Tutorial","text":"tabs Environment Tutorial located top right pane, along History Connections (see Figure 2.13).\nFigure 2.13: tabs Environment Tutorial located top right pane.\n","code":""},{"path":"getting-started-with-r.html","id":"the-environment-tab","chapter":"2 Getting started with R","heading":"2.2.5.1 The Environment tab","text":"tab Environment lists R objects currently stored memory current project along quick summary content.\nFigure 2.14: tab Environment shows R objects stored memory.\ncan see object displayed line, along quick overview content nature.\nlearn extensively R objects data 3.","code":""},{"path":"getting-started-with-r.html","id":"the-tutorial-tab","chapter":"2 Getting started with R","heading":"2.2.5.2 The Tutorial tab","text":"tab Tutorial lists R tutorials come preinstalled packages may run directly tab (see Figure 2.15).\nFigure 2.15: tab Tutorial located top right pane.\ntutorial displayed along short description, package originates , button Start Tutorial ? (see Figure 2.16).\nFigure 2.16: tab Tutorial provides tutorials linked R packages.\nAlong present website, written package biostats.tutorials help better learn stats R.\ninstallation procedure described section 2.3.\ninstalled, tutorials available tab.","code":""},{"path":"getting-started-with-r.html","id":"installing-packages","chapter":"2 Getting started with R","heading":"2.3 Installing packages","text":"Packages add-ons base R (R base package) expand computing possibilities R adding new functions, classes, documentation, data sets, etc.\ninstalling RStudio first time, long list packages comes along.\nfind list tab Packages (see section 2.2.4.3).section show install additional packages.\nEvery time install new one, R imports necessary files local library, activate .\nremember activate new package library() every time project require items functions package.","code":""},{"path":"getting-started-with-r.html","id":"packages-published-on-cran","chapter":"2 Getting started with R","heading":"2.3.1 Packages published on CRAN","text":"want install package published CRAN repository, may use function install.packages().\nSimply type name add quotation marks \" \".\nexample package tidyr:may use exact code update package later .want update packages , use following code:","code":"\ninstall.packages(\"tidyr\")\nupdate.packages()"},{"path":"getting-started-with-r.html","id":"packages-published-on-github","chapter":"2 Getting started with R","heading":"2.3.2 Packages published on GitHub","text":"want install package published GitHub, may use function remotes::install_github().\nFirst need install package remotes.\nType first name repository, \\ name package.\nalso, must add quotation marks \" \".","code":""},{"path":"getting-started-with-r.html","id":"recommended-packages","chapter":"2 Getting started with R","heading":"2.3.3 Recommended packages","text":"present website refers use several packages recommend, learning R, also working course assignments projects.\npackages :tidyversebiostats.tutorials,palmerpenguins.packages used throughout website, get ready install now.\nprocedure.","code":""},{"path":"getting-started-with-r.html","id":"the-tidyverse","chapter":"2 Getting started with R","heading":"2.3.3.1 The tidyverse","text":"tidyverse amazing toolbox contains growing, evolving collection R packages data science.\npackages developed philosophy fully compatible .\ntidyverse packages help read files import data, packages let draw plots make figures, others help rearrange data set. look tidyverse webpages explore collection.Install activate tidyverse following lines:","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)"},{"path":"getting-started-with-r.html","id":"palmerpenguins","chapter":"2 Getting started with R","heading":"2.3.3.2 palmerpenguins","text":"palmerpenguins package provides two real data sets.\ncontain measurements three penguin species found Palmer archipelago, Antarctica.\nSeveral variables species, island, body mass included, less 344 observations found table.\ndata sets used upcoming sections website.Install activate package lines:Type following line console want know palmerpenguins:","code":"\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\ncitation(\"palmerpenguins\")"},{"path":"getting-started-with-r.html","id":"biostatstutorials","chapter":"2 Getting started with R","heading":"2.3.3.3 biostats.tutorials","text":"Along present website, team developed package tutorials called biostats.tutorials.\npackage help learn practice R functions concepts.\nSeveral upcoming chapters refer package.\nInstall biostats.tutorials code:Now load package library(biostats.tutorials) tutorials appear tab Tutorial (see section 2.2.5.2).\nExercises tell run tutorial.\nClick “Start Tutorial” button start tutorial (may take seconds start first time).","code":"\nremotes::install_github(\"biostats-r/biostats.tutorials\")"},{"path":"getting-started-with-r.html","id":"exercise-1","chapter":"2 Getting started with R","heading":"Exercise","text":"Install tidyverse, palmerpenguins CRAN biostats.tutorials GitHub using code .R version < 4.1, follow instructionsIdeally upgrade R latest version.\n, run code modify biostats.tutorials can run computer.","code":"\nlibrary(tidyverse)\nold_pipes <- function(){\n  if(R.version >= 4.1){return()}\n  #find Rmd files in tutorial directory\n  list.files(system.file(\"tutorials\", \n                         package = \"biostats.tutorials\"), \n             recursive = TRUE, \n             pattern = \"\\\\.Rmd\", \n             full.names = TRUE) %>%\n    #iterate over files and read them\n    map(~{read_lines(.x) %>%\n        #replace new pipes with old\n    str_replace_all(pattern = fixed(\"|>\"), replacement = \"%>%\") %>%\n        #write file\n    write_lines(file = .x)})\n  }\nold_pipes()"},{"path":"getting-started-with-r.html","id":"working-with-a-project","chapter":"2 Getting started with R","heading":"2.4 Working with a project","text":"RStudio allows divide work projects independent .\nproject working directory can create specific scripts, load data sets, add external files, activate packages, etc.\nproject, thus guaranteed work dedicated workspace.Working projects great way keep things tidy.\nrisk mix files variables relatively similar names writing code, especially creative comes naming objects.\nalso find easy share work others since everything need (nothing less ) project.example, plan work assignments different courses addition data analyses master’s thesis, strongly recommend set RStudio project course, another thesis.\nFigure 2.17: Creating new project – step 1\nClick New Directory > New Project, choose project name destination disk, click button “Create Project” shown Figure 2.18:\nFigure 2.18: Creating new project – step 2\nFeel free import project folder files need later , original data sets, etc.","code":""},{"path":"getting-started-with-r.html","id":"exercise-2","chapter":"2 Getting started with R","heading":"Exercise","text":"Create project BIO300B.\nCall BIO300B save convenient location.","code":""},{"path":"getting-started-with-r.html","id":"working-with-a-script","chapter":"2 Getting started with R","heading":"2.5 Working with a script","text":"","code":""},{"path":"getting-started-with-r.html","id":"what-is-a-script","chapter":"2 Getting started with R","heading":"2.5.1 What is a script?","text":"Practically, script plain text file write code, whether contains handful lines dozens .\nevolving document helps keep track code, also workflow.time, realize script lot things time:whiteboard try coding something correct mistakes whenever find things work expected,contains coding history, steps loading data set printing final output chronologically exposed,key file may share collaborators, etc,guarantee work reproducible, meaning can run code data set , obtain result, consistently.simple script may look like :able write similar code soon.","code":"\n# activate tidyverse\nlibrary(tidyverse)\n\n# load the data from external file \nVeronica_Vestland <- read_delim(\"Veronica_Vestland.csv\", delim = \",\")\n\n# calculate the mean and standard deviation of Sepal.Length for each Location\nmean_sd_SL <- Veronica_Vestland |> \n           group_by(location) |> \n           summarise(mean(Sepal.Length), sd(Sepal.Length))\n\n# print the result\nmean_sd_SL\n\n# draw boxplot Sepal.Length for each Location \nggplot(Veronica_Vestland, aes(x = Location, y  = Sepal.Length, fill = Location)) +\n              geom_boxplot()"},{"path":"getting-started-with-r.html","id":"running-the-code","chapter":"2 Getting started with R","heading":"2.5.2 Running the code","text":"Writing code script anything per se.\ntell R something, must either:place cursor single line code press Run button script type CTRL + Enter (⌘ + Enter) run single line code, orselect several lines code press CTRL + Enter (⌘ + Enter) run selected lines , orpress CTRL + ALT + Enter (⌘ + ⌥ + Enter) run whole script.result command(s) appear tab Console commands intended print something, /tab Plots commands generate plot.","code":""},{"path":"getting-started-with-r.html","id":"code-versus-comment","chapter":"2 Getting started with R","heading":"2.5.3 Code versus comment","text":"script , two types lines: start symbol #, .Let’s start lines start #.\nreal code, commands manipulate data.\nRight now lines mean much , fact, commands R “something specific” data.\n“something specific” defined functions followed parentheses – function().\nR language, functions verbs sentences, data subject.\nexample, code , library(tidyverse) commands R activate package tidyverse found package library.lines start # comments.\ncode anything .\nrun script via console, R simply ignores .\nuse comments keep track code.\nWrite point real code line , plan .\nway, always remember originally intended code , case lose track.symbol # also convenient prevent R running specific code line chunk, without delete line.\nIndeed place # front line, console consider comment, simply skip .following example, line originally written activate different package:However, third line commented #.\nConsequently, packages ggplot2, tidyr, vroom activated; tidyverse ignored.chapter First Steps R (3), learn write R language.\nstrongly advise work scripts, make extensive use comments start.\nconsidered good coding practice, save quite time energy.","code":"\nlibrary(ggplot2)\nlibrary(tidyr)\n#library(tidyverse)\nlibrary(vroom)"},{"path":"getting-started-with-r.html","id":"customizing-rstudio","chapter":"2 Getting started with R","heading":"2.6 Customizing RStudio","text":"R/RStudio require much configuring start, even though menus Tools > Global Options… let change dozens settings time.\nfact, ready work right now.\nsaid, couple things RStudio recommend customize.","code":""},{"path":"getting-started-with-r.html","id":"taking-care-of-.rdata","chapter":"2 Getting started with R","heading":"2.6.1 Taking care of .Rdata","text":".Rdata file R uses store objects, data, etc.\nsaved automatically RStudio shuts , restored starts .\nadvise prevent RStudio saving changes restoring .Rdata improve reproducibility.Go Tools > Global Options… > General > Basic get menu shown Figure 2.19.\nsection Workspace (Fig. 2.19, red box), uncheck box, select “Never” dropdown menu.\nFigure 2.19: Taking care .Rdata\ncan code ","code":"\nusethis::use_blank_slate()"},{"path":"getting-started-with-r.html","id":"imposing-utf-8-encoding","chapter":"2 Getting started with R","heading":"2.6.2 Imposing UTF-8 encoding","text":"symbols characters accepted recognized format RStudio uses default saving scripts.\nrecommend force RStudio save scripts UTF-8 format, much permissive.Go Tools > Global Options… > Code > Saving get menu shown Figure 2.20.\nsection Serialization (Fig. 2.20, red box), click “Change” choose UTF-8.\nFigure 2.20: Saving files UTF-8\n","code":""},{"path":"getting-started-with-r.html","id":"soft-wrapping-r-scripts","chapter":"2 Getting started with R","heading":"2.6.3 Soft-wrapping R scripts","text":"length code line exceeds width editor, horizontal scrollbar appears bottom editor, allowing navigate review whole line first last character.\nsetting makes things impractical often scroll back forth reviewing multiple long lines.\nobvious solution make sure write short lines code - maximum 80 characters often recommended.\nHowever laptop, can still long, alternative force RStudio split code onto next line(s) editor – called soft-wrapping.\nrecommend activate soft-wrapping RStudio.Go Tools > Global Options… > choose Code > Editing get menu shown Figure 2.21.\nsection General (Fig. 2.21, red box), check box “Soft-wrap R source files”.\nFigure 2.21: Activating soft-wrapping R scripts\n","code":""},{"path":"getting-started-with-r.html","id":"exercise-3","chapter":"2 Getting started with R","heading":"Exercise","text":"Configure RStudio .Rdata files restored RStudio started.Rdata files saved close RStudioSoft-wrap set onUTF-8 encoding set .","code":""},{"path":"getting-started-with-r.html","id":"rstudio-keyboard-short-cuts","chapter":"2 Getting started with R","heading":"2.7 RStudio keyboard short-cuts","text":"already introduced RStudio short-cuts run code.\nmany - press Shift + Alt + k.\ncertainly don’t need learn .\nfind usefulrun line Ctrl + EnterFind/replace Ctrl + FFind files Ctrl + Shift + FInsert assignment operator Alt + -Comment selected lines Ctrl + Shift + CHelp selected function F1You introduced short-cuts later.","code":""},{"path":"getting-started-with-r.html","id":"further-reading","chapter":"2 Getting started with R","heading":"Further Reading","text":"may find following links useful:R Data ScienceUsing RStudio IDEThe tidyverse","code":""},{"path":"getting-started-with-r.html","id":"whats-next","chapter":"2 Getting started with R","heading":"What’s next","text":"now learn basics R language, make simple calculations, learn data types, store handle data R objects.","code":""},{"path":"getting-started-with-r.html","id":"contributors","chapter":"2 Getting started with R","heading":"Contributors","text":"Jonathan SouléAud HalbritterRichard Telford","code":""},{"path":"first-steps-in-r.html","id":"first-steps-in-r","chapter":"3 First steps in R","heading":"3 First steps in R","text":"","code":""},{"path":"first-steps-in-r.html","id":"before-we-start-1","chapter":"3 First steps in R","heading":"Before we start","text":"must successfully installed R RStudio machine.\nmust know install activate package.","code":""},{"path":"first-steps-in-r.html","id":"basic-operations-in-r","chapter":"3 First steps in R","heading":"3.1 Basic operations in R","text":"","code":""},{"path":"first-steps-in-r.html","id":"arithmetic-operations","chapter":"3 First steps in R","heading":"3.1.1 Arithmetic operations","text":"Performing arithmetic operations big deal R.\nSimply write operation using usual arithmetic operators +, -, * / run code.\nneed type =.R allows add parentheses ( ) need impose order operations.\ncomes raising number power another one, use symbol ^ **.","code":""},{"path":"first-steps-in-r.html","id":"exercise-4","chapter":"3 First steps in R","heading":"Exercise","text":"R, calculate:25 plus 496 minus 198 multiplied 67 divided 29 squaredmultiply sum 9 2 3","code":""},{"path":"first-steps-in-r.html","id":"comparisons","chapter":"3 First steps in R","heading":"3.1.2 Comparisons","text":"can compare 2 elements using following operators:> greater ,>= greater equal ,< less ,<= less equal ,== equal ,!= equal .comparing two elements, R returns either TRUE FALSE.","code":"\n9^2 != 9 * (3 + 6)## [1] FALSE"},{"path":"first-steps-in-r.html","id":"exercise-5","chapter":"3 First steps in R","heading":"Exercise","text":"R,Test whether 22/7 larger piTest cats greater dogs. ? (remember use quote marks)","code":""},{"path":"first-steps-in-r.html","id":"operations-with-functions","chapter":"3 First steps in R","heading":"3.1.3 Operations with functions","text":"complex operations square root, logarithms exponentiation shall run using specific functions.\nfunctions sqrt(), log(), exp(), etc.","code":""},{"path":"first-steps-in-r.html","id":"exercise-6","chapter":"3 First steps in R","heading":"Exercise","text":"R, calculateThe square root 29The exponent 29The natural logarithm 29The base 10 logarithm 29You may need look built help .","code":""},{"path":"first-steps-in-r.html","id":"help","chapter":"3 First steps in R","heading":"3.2 Help!","text":"can get help function putting ? name function.get help function log(), runThis open help file Help tab RStudio (default lower left quadrant.help files similar structure (although sections optional).Description briefly describes functionUsage shows function arguments including defaultsArguments describes arguments functions usedDetails Give details use functionValue Describes output functionExamples Gives examples use function.\noften one useful parts help.\ncan run functions either copy-pasting , using function example.","code":"\n?log\nexample(log)"},{"path":"first-steps-in-r.html","id":"other-sources-of-help","chapter":"3 First steps in R","heading":"3.2.1 Other sources of help","text":"help files sometimes user friendly.\nintroverse package simplified help pages many common base R tidyverse functions.One great things R many sources help .R questions stackoverflow.comRstudio communityThere hundreds thousands answers sites, likely people problem asked question.\nAlways search see find answer asking question.\nsite, important provide minimal reproducible example.\nexample data (perhaps built-dataset) code can run show problem.\nCode relevant problem removed.\npackage reprex useful making reproducible example.\noften, making reproducible example enough identify fix problem.","code":"\n# install from github\nremotes::install_github(\"spielmanlab/introverse\")\nlibrary(introverse)\nget_help(\"length\")"},{"path":"first-steps-in-r.html","id":"exercise-7","chapter":"3 First steps in R","heading":"Exercise","text":"Look help file length() run examples.","code":""},{"path":"first-steps-in-r.html","id":"built-in-data-sets","chapter":"3 First steps in R","heading":"3.2.2 Built-in data sets","text":"many datasets objects built R R packages.\npackage loaded, can used typing name.make objects packages available can either load package library() first, use data().penguins dataset contains morphological data three species penguin.\nmeet dataset repeatedly provides convenient set variables observations well-suited illustrating many purposes.","code":"\npi## [1] 3.141593\nmonth.abb# abbreviated month names##  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\"\n## [12] \"Dec\"\npenguins # not available## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\ndata(penguins, package = \"palmerpenguins\")\npenguins## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"first-steps-in-r.html","id":"storing-data-in-objects","chapter":"3 First steps in R","heading":"3.3 Storing data in objects","text":"R uses objects store data memory.\nStoring data object referred “assigning data”.\ndifferent types data objects; talk much .\nnow, let’s see one assign data objects, .","code":""},{"path":"first-steps-in-r.html","id":"why-assigning-data","chapter":"3 First steps in R","heading":"3.3.1 Why assigning data?","text":"Putting data named objects allows :store massive amounts data /code later reuse calculations, analysis, plots figures,divide code separate steps, clearly identifiable name thus reusable,simplify code referring previous calculations plots.Let’s take look following figure. made 3 plots, based different variables taken single data set:Believe , code builds figure simple :fact, everything R needed order make figure previously stored objects plot1, plot2 plot3.clear benefit assigning data -mentioned objects simplified lot code figure.","code":"\nplot1 / (plot2 + plot3)"},{"path":"first-steps-in-r.html","id":"assigning-data-to-an-object","chapter":"3 First steps in R","heading":"3.3.2 Assigning data to an object","text":"assign data object, type first name want give followed operator <- data store.\nfollowing example, assign result operation sqrt(42) memory object named result:, object result associated value show Environment tab RStudio.now , can display content result simply typing name:can also reuse object operations:","code":"\nresult <- sqrt(42)\nresult## [1] 6.480741\nresult * 3## [1] 19.44222\nresult * result## [1] 42"},{"path":"first-steps-in-r.html","id":"modifying-object-content","chapter":"3 First steps in R","heading":"3.3.3 Modifying object content","text":"modify content object, simply assign new data .\nmodify object result:content result automatically modify, shown Environment tab.Note previous content result lost soon new data assigned.\nrestore original value, go back script rerun original command assigned square root 42 result.\none many reasons always work script annotate : life line case make mistake, lose objects, modify data elements, etc.","code":"\nresult <- exp(42)"},{"path":"first-steps-in-r.html","id":"concatenating-data","chapter":"3 First steps in R","heading":"3.3.4 Concatenating data","text":"want assign one data element object, use function c() concatenates elements given parentheses.\nconcatenating data elements assigning object, create vector, one simplest objects R.\nlook vectors section 3.5.3.1.\ndata elements concatenate must separated comma ,.may applied numerical values, also characters strings.\nstoring characters, must use quotation marks \" \" around elements.Note may concatenate data elements various natures.\nconcatenate store numbers strings, everything becomes string:","code":"\nresults <- c(42, sqrt(42), 42^2)\nresults## [1]   42.000000    6.480741 1764.000000\none_two_three <- c(\"one\", \"two\", \"three\")\none_two_three## [1] \"one\"   \"two\"   \"three\"\none_2_three_4 <- c(\"one\", 2, \"three\", 4)\none_2_three_4## [1] \"one\"   \"2\"     \"three\" \"4\""},{"path":"first-steps-in-r.html","id":"naming-objects","chapter":"3 First steps in R","heading":"3.3.5 Naming objects","text":"Naming object sounds quite easy creative, set rules respect:names must start letter (lower upper case) dot ., nothing else!names may include letters (lower /upper case), numbers, underscores _ dots .use reserved names, .e. names existing functions words already used R (TRUE, FALSE, break, function, , , NA, function, see complete list running ?Reserved console)Beside rules, may find following recommendations useful:consistent use word convention writing names, snake_case words written lowercase separated using underscore symbol _give object meaningful name norwegian_seabirds, alpine_species_vestland, etcavoid names meaning may change time, new_dataset, modified_dataset, last_year_data, etcavoid long nameshave look tidyverse style guide","code":""},{"path":"first-steps-in-r.html","id":"exercise-8","chapter":"3 First steps in R","heading":"Exercise","text":"prepared learnr-tutorial describes rules naming objects, gives chance test well understood.\ntutorial biostats.tutorials package.tutorial called Naming objects.\nSimply click button Start Tutorial > right start .See section 2.3.3.3 install biostats.tutorials run tutorials.","code":""},{"path":"first-steps-in-r.html","id":"viewing-object-content","chapter":"3 First steps in R","heading":"3.3.6 Viewing object content","text":"introduced section 2.2.5.1, Environment tab RStudio lists objects stored memory given project.\nlist comes quick summary structure content objects.function View() applied object opens new tab displays whole object form table.\nFigure 3.1 shows screenshot tab appears running View() large object called tb.\nFigure 3.1: function View() opens tab content object.\nView() particularly useful want quickly check entries directly data set spares finding opening original data file disk via explorer.","code":"\nView(tb)"},{"path":"first-steps-in-r.html","id":"exercise-9","chapter":"3 First steps in R","heading":"Exercise","text":"View() penguins dataset palmerpenguins.\nCompare get printing penguins dataset.\nfind useful?","code":""},{"path":"first-steps-in-r.html","id":"deleting-objects","chapter":"3 First steps in R","heading":"3.3.7 Deleting objects","text":"done particularly large object takes lot memory use longer, may useful get rid .\ndone using function rm().\ndelete result current environment.delete several objects time, use rm() type name separated commas ,., done, one way back: go script rerun commands originally created result results.","code":"\nrm(result)\nresult <- exp(42)\nrm(result, results)"},{"path":"first-steps-in-r.html","id":"creating-sequences-and-series","chapter":"3 First steps in R","heading":"3.4 Creating sequences and series","text":"Throughout website, use examples include random series numbers, sequences characters numbers, etc.\nsequences series often created bunch functions expressions, described .","code":""},{"path":"first-steps-in-r.html","id":"repetitions","chapter":"3 First steps in R","heading":"3.4.1 Repetitions","text":"function rep() comes handy wish repeat data elements n times row, repeat sequence elements n times.\nUsing various arguments, can decide many times /manner elements sequences repeated.simplest form usage rep() rep(x, times= n) x want repeat (string, number(s), etc) n number iterations.argument = n allows repeating n times element time.","code":"\nrep(c(1, 2, 3), times= 3)## [1] 1 2 3 1 2 3 1 2 3\nrep(c(\"One\", \"Two\", \"Three\"), times= 3)## [1] \"One\"   \"Two\"   \"Three\" \"One\"   \"Two\"   \"Three\" \"One\"   \"Two\"  \n## [9] \"Three\"\nrep(c(1, 2, 3), each= 3)## [1] 1 1 1 2 2 2 3 3 3\nrep(c(\"One\", \"Two\", \"Three\"), each= 3)## [1] \"One\"   \"One\"   \"One\"   \"Two\"   \"Two\"   \"Two\"   \"Three\" \"Three\"\n## [9] \"Three\""},{"path":"first-steps-in-r.html","id":"exercise-10","chapter":"3 First steps in R","heading":"Exercise","text":"Write code willrepeat letters – C three times output B C …repeat letters – C three times output B…","code":""},{"path":"first-steps-in-r.html","id":"sequences","chapter":"3 First steps in R","heading":"3.4.2 Sequences","text":"following section provides expressions functions build sequences numerical text values.","code":""},{"path":"first-steps-in-r.html","id":"using-the-colon-operator","chapter":"3 First steps in R","heading":"3.4.2.1 Using the colon operator","text":"colon separator : used expression :b creates series consecutive numbers ranging b increment 1.Note b necessarily last element series.","code":"\n14:24##  [1] 14 15 16 17 18 19 20 21 22 23 24\n14:24.5##  [1] 14 15 16 17 18 19 20 21 22 23 24\n14.5:24##  [1] 14.5 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5"},{"path":"first-steps-in-r.html","id":"the-function-seq","chapter":"3 First steps in R","heading":"3.4.2.2 The function seq()","text":"Similar :b, seq(, b) creates series consecutive numbers ranging b increment 1., b necessarily last element series.can use set additional arguments seq() adjust output.\nAdding = allows tune incrementation value want (including decimal values). length.= adjusts incrementation provide desired number elements ranging precisely b.","code":"\nseq(14, 24)##  [1] 14 15 16 17 18 19 20 21 22 23 24\nseq(14, 24.5)##  [1] 14 15 16 17 18 19 20 21 22 23 24\nseq(14.5, 24)##  [1] 14.5 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5\nseq(14, 24, by=2.5)## [1] 14.0 16.5 19.0 21.5 24.0\nseq(14, 24, length.out=7)## [1] 14.00000 15.66667 17.33333 19.00000 20.66667 22.33333 24.00000"},{"path":"first-steps-in-r.html","id":"exercise-11","chapter":"3 First steps in R","heading":"Exercise","text":"Make sequence integers -5 10Make sequence 0 10 increment 1.7Make sequence 4 34 10 elements long","code":""},{"path":"first-steps-in-r.html","id":"random-series","chapter":"3 First steps in R","heading":"3.4.3 Random series","text":"following section provides functions build series random, numerical values.\ndemonstrates functions make sequences uniform normal distributions, many distributions available R.\nFigure 3.2: Different distributions 1000 random numbers, default options\n","code":""},{"path":"first-steps-in-r.html","id":"the-function-runif","chapter":"3 First steps in R","heading":"3.4.3.1 The function runif()","text":"runif(n) returns series n random numbers uniform distribution 0 1.runif(n, min=, max=b) returns series n random numbers range b:","code":"\nrunif(7)## [1] 0.9516305 0.2927767 0.7359247 0.1364126 0.7329007 0.9067579\n## [7] 0.6297879\nrunif(7, min=10, max=100)## [1] 99.60832 85.64344 14.46249 33.32040 75.73546 26.33933 57.44108"},{"path":"first-steps-in-r.html","id":"the-function-rnorm","chapter":"3 First steps in R","heading":"3.4.3.2 The function rnorm()","text":"rnorm(n) creates series n numbers taken normal distribution.default, normally distributed population set mean 0 standard deviation 1, may adjusted mean= sd=.","code":"\nrnorm(10)##  [1]  1.3273329 -0.5378676  1.3725210  0.5772274 -0.1180012  0.2272391\n##  [7] -0.7900033  0.3371840  0.9362170 -1.3116787\nrnorm(10, mean=50, sd=3)##  [1] 46.11462 47.69048 49.50461 51.37143 51.46346 46.84809 50.87123\n##  [8] 50.28805 44.13248 52.05091"},{"path":"first-steps-in-r.html","id":"the-function-sample","chapter":"3 First steps in R","heading":"3.4.3.3 The function sample()","text":"sample(x, n, replace = TRUE/FALSE) returns sample n integers randomly taken object x (may vector, series 1:100, etc).\nreplace= followed either TRUE FALSE defines whether data element can appear repeatedly sample.interesting property function sample() can used shuffle result expression content vector, something useful randomization data elements.\nfollowing example, sample() shuffles returns values 1:10:","code":"\nsample(1:100, 10, replace = FALSE)##  [1] 38 19 45 99 72 67  7 31 54 55\nsample(20:30, 7, replace = TRUE)## [1] 29 21 23 20 21 21 21\nsample(1:10)##  [1]  7  2 10  1  9  5  6  4  3  8"},{"path":"first-steps-in-r.html","id":"set.seed","chapter":"3 First steps in R","heading":"3.4.3.4 set.seed()","text":"sequences strictly random pseudo random.\nsequences repeat long period (219937 - 1 default Mersenne-Twister algorithm).\nwant get exactly sequence (reproducibility), can set seed random numbers set.seed().","code":"\nset.seed(300)\nrnorm(5)## [1]  1.37379088  0.86210687  0.47348910  0.70126281 -0.08505527\nset.seed(300)\nrnorm(5)## [1]  1.37379088  0.86210687  0.47348910  0.70126281 -0.08505527"},{"path":"first-steps-in-r.html","id":"exercise-12","chapter":"3 First steps in R","heading":"Exercise","text":"Generate 10 random numbers uniform distribution 10 20Generate 10 random numbers normal distribution mean 4 standard deviation 2sample 10 values sequence 1:10 replacement","code":""},{"path":"first-steps-in-r.html","id":"data-types-and-objects","chapter":"3 First steps in R","heading":"3.5 Data types and objects","text":"Objects may contain anything single numerical value fully developed data set dozens variables thousands observations.\nworking R, important understand kind data manipulate kind object build .first review primitive data types, see useful data classes, finally object types important studies.","code":""},{"path":"first-steps-in-r.html","id":"primitive-data-types","chapter":"3 First steps in R","heading":"3.5.1 Primitive data types","text":"R lets manipulate 6 primitive data types: numeric, integer, character, logical (also called boolean), complex raw.\nfirst four types relevant scope website.NB: following sections, use function class() identify nature data stored objects.","code":""},{"path":"first-steps-in-r.html","id":"numeric","chapter":"3 First steps in R","heading":"3.5.1.1 numeric","text":"number decimal value, whether positive negative, type numeric.\nobject num created contains single decimal value thus also numeric.","code":"\nnum <- -35.2\nclass(num)## [1] \"numeric\""},{"path":"first-steps-in-r.html","id":"integer","chapter":"3 First steps in R","heading":"3.5.1.2 integer","text":"Integers positive negative numbers contain decimal value.\nobject int contains single integer thus type integer.Note int assigned number 35L.\n“L” follows number forces object store integer.\nwrite 35 instead 35L, object just numeric shown .","code":"\nint <- 35L\nclass(int)## [1] \"integer\"\nint <- 35\nclass(int)## [1] \"numeric\""},{"path":"first-steps-in-r.html","id":"character","chapter":"3 First steps in R","heading":"3.5.1.3 character","text":"object containing string letters combined () numbers, even single letter, type character.\nletters may upper /lower case.\nobject char contains single word thus defined character.Note strings characters must stored objects using \" \".","code":"\nchar <- \"Letters\"\nclass(char)## [1] \"character\""},{"path":"first-steps-in-r.html","id":"logical","chapter":"3 First steps in R","heading":"3.5.1.4 logical","text":"Logical (boolean) defines binary objects contain TRUE FALSE.\ncase object logic .Note TRUE FALSE sometimes replaced “T” “F”.\nwarned bad coding practice, may result (origin ) errors may compromise work validity output.","code":"\nlogic <- TRUE\nclass(logic)## [1] \"logical\""},{"path":"first-steps-in-r.html","id":"modifying-data-types","chapter":"3 First steps in R","heading":"3.5.1.5 Modifying data types","text":"possible modify type existing object series simple functions like .numeric(), .integer(), .character(), etc.Let’s consider object integ created .integ contains single data element (35L) defined integer:integ may transformed simple numerical value using function .numeric():possible reverse action .integer():also possible transform string characters .character():","code":"\ninteg <- 35L\ninteg## [1] 35\nclass(integ)## [1] \"integer\"\ninteg_num <- as.numeric(integ)\nclass(integ_num)## [1] \"numeric\"\ninteg_int <- as.integer(integ_num)\nclass(integ_int)## [1] \"integer\"\ninteg_char <- as.character(integ)\nclass(integ_char)## [1] \"character\""},{"path":"first-steps-in-r.html","id":"exercise-13","chapter":"3 First steps in R","heading":"Exercise","text":"Make vector contains word, number logical valuewhat class itcoerce numeric vector. happens. ?","code":""},{"path":"first-steps-in-r.html","id":"advanced-data-classes","chapter":"3 First steps in R","heading":"3.5.2 Advanced data classes","text":"R allows transform format object something simple like number string characters something advanced like date factor.\nDate factor data types per se, data classes.","code":""},{"path":"first-steps-in-r.html","id":"dates","chapter":"3 First steps in R","heading":"3.5.2.1 Dates","text":"data element 1980-02-08 stored object birthdate nothing string characters.make date object, one must use function .Date():Even though seem affect way data element displayed, conversion determining regard th element going handled calculations.\ncalculation displays date occurs 10 days birthdate:calculation possible without conversion character date, demonstrated error message:","code":"\nbirthday <- \"1980-02-08\"\nbirthday## [1] \"1980-02-08\"\nclass(birthday)## [1] \"character\"\nbirthdate <- as.Date(birthday)\nbirthdate## [1] \"1980-02-08\"\nclass(birthdate)## [1] \"Date\"\nten_days_before_my_birthdate <- birthdate - 10\nten_days_before_my_birthdate## [1] \"1980-01-29\"\nten_days_before_my_birthday <- birthday - 10## Error in birthday - 10: non-numeric argument to binary operator"},{"path":"first-steps-in-r.html","id":"exercise-14","chapter":"3 First steps in R","heading":"Exercise","text":"tutorial handling dates lubridate package biostats.tutorials.","code":""},{"path":"first-steps-in-r.html","id":"factors","chapter":"3 First steps in R","heading":"3.5.2.2 Factors","text":"factor object contains predefined values.\npredefined values called levels factor.\nFactors especially useful context statistical analysis categorical data involved (like ANOVA, etc).\nCategories often appear “text labels”, may thus look like simple strings characters.following example, object scandinavian_countries factor contains 7 elements three levels: Norway, Sweden Denmark.One way build factor consists converting character object scandinavia function factor().\nHowever, one must forget set levels correctly argument levels=.","code":"\nscandinavian_countries ## [1] Norway  Denmark Sweden  Denmark Sweden  Norway  Denmark\n## Levels: Norway Denmark Sweden\nclass(scandinavian_countries)## [1] \"factor\"\nscandinavia <- c(\"Norway\", \"Denmark\", \"Sweden\", \"Denmark\", \"Sweden\", \"Norway\", \"Denmark\")\nscandinavian_kingdoms <- factor(scandinavia, levels = c(\"Norway\", \"Denmark\", \"Sweden\"))\nscandinavian_kingdoms## [1] Norway  Denmark Sweden  Denmark Sweden  Norway  Denmark\n## Levels: Norway Denmark Sweden"},{"path":"first-steps-in-r.html","id":"exercise-15","chapter":"3 First steps in R","heading":"Exercise","text":"factor tutorial yet working - look soon","code":""},{"path":"first-steps-in-r.html","id":"objects","chapter":"3 First steps in R","heading":"3.5.3 Objects","text":"Data R may stored multitude object types, important ones vector, matrix, list, data frame tibble.","code":""},{"path":"first-steps-in-r.html","id":"vectors","chapter":"3 First steps in R","heading":"3.5.3.1 Vectors","text":"vector object contains one several values data type.\nexample, object vec.char described vector contains 3 data elements type character.conducting statistical analysis, vector possibly simplest object may store entries single variable.\nfollowing example, 24 data points corresponding temperature specific location registered period 24 hours stored vector temperature:Note data type whole vector determined type elements contains, shown :","code":"\nvec.char <- c(\"one\", \"two\", \"three\")\nvec.char## [1] \"one\"   \"two\"   \"three\"\ntemperature <- c(8.7, 9.2, 9.4, 9.5, 9.7, 10.1, 10.3, 10.6, 10.7, 10.8, 11.3, 11.9, 12.2, 12.3, 11.7, 10.2, 10.3, 10.3, 10.4, 10.3, 10.1, 9.7, 9.5, 9.4)\ntemperature##  [1]  8.7  9.2  9.4  9.5  9.7 10.1 10.3 10.6 10.7 10.8 11.3 11.9 12.2\n## [14] 12.3 11.7 10.2 10.3 10.3 10.4 10.3 10.1  9.7  9.5  9.4\nclass(temperature)## [1] \"numeric\""},{"path":"first-steps-in-r.html","id":"coercion","chapter":"3 First steps in R","heading":"3.5.3.1.1 Coercion","text":"one tries store data elements different types single vector, elements vector coerced type informative.\nranking follows: logical < integer < numeric < character.\nLet’s take following example store numeric, character integer together:see type coercion character, words type informative data element.","code":"\ncoercion <- c(15, \"fifteen\", 15L)\nclass(coercion)## [1] \"character\""},{"path":"first-steps-in-r.html","id":"accessing-data-elements","chapter":"3 First steps in R","heading":"3.5.3.1.2 Accessing data elements","text":"possible extract specific data elements vector based position.\n, use brackets [ ].\nIndicate first vector name element position(s) brackets:Use negative indicies remove element.","code":"\ntemperature[c(2, 6)] ## [1]  9.2 10.1"},{"path":"first-steps-in-r.html","id":"exercise-16","chapter":"3 First steps in R","heading":"Exercise","text":"vector month.nameselect eighth elementselect third ninth elementsdrop second fifth elements","code":""},{"path":"first-steps-in-r.html","id":"matrices","chapter":"3 First steps in R","heading":"3.5.3.2 Matrices","text":"matrix two-dimensional object displays data type (numeric, character, etc) form table.\nbuilt function matrix() data imported either form concatenated data elements (ex: c(12, 54, 987, 5, ...)), series sequence data elements (ex: 1:25), vector (ex: temperature).\naddition, one must define number rows columns nrow = ncol =.following example, object neo matrix made 4 rows 6 columns filled numeric values stored vector temperature previously created.","code":"\nneo <- matrix(temperature, nrow = 4, ncol = 6)\nneo ##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]  8.7  9.7 10.7 12.2 10.3 10.1\n## [2,]  9.2 10.1 10.8 12.3 10.3  9.7\n## [3,]  9.4 10.3 11.3 11.7 10.4  9.5\n## [4,]  9.5 10.6 11.9 10.2 10.3  9.4"},{"path":"first-steps-in-r.html","id":"accessing-data-elements-1","chapter":"3 First steps in R","heading":"3.5.3.2.1 Accessing data elements","text":"matrix, row numbered [x, ] column numbered [ , y].\ndata elements may retrieved using coordinates [x, y] preceded name matrix:full row column may retrieved expression, leave empty coordinate needed:","code":"\nneo[2, 3]## [1] 10.8\nneo[2, ]## [1]  9.2 10.1 10.8 12.3 10.3  9.7\nneo[ , 3]## [1] 10.7 10.8 11.3 11.9"},{"path":"first-steps-in-r.html","id":"about-the-use-of-matrices","chapter":"3 First steps in R","heading":"3.5.3.2.2 About the use of matrices","text":"use matrices website limited.\nHowever, may meet matrices projects, best know existence.\ncan read matrices .","code":""},{"path":"first-steps-in-r.html","id":"exercise-17","chapter":"3 First steps in R","heading":"Exercise","text":"Make matix neo , thenselect first two columnsthe third column. happened?second row.element third column second row.","code":""},{"path":"first-steps-in-r.html","id":"lists","chapter":"3 First steps in R","heading":"3.5.3.3 Lists","text":"list object contains values one several data types.\ncan contain single data elements, also objects vectors, matrices, etc.Lists created function list() concatenates data elements objects.\nlist() conveniently allows naming elements mean symbol =.example , store 6 elements name string, number, temp, boolean, words matrix.\nAmong elements stored vec.char, temperature neo, 3 objects created page.","code":"\nmy_list <- list(string = \"one\", \n                number = 2, \n                temp = temperature, \n                boolean = TRUE, \n                words = vec.char, \n                matrix = neo)\nmy_list ## $string\n## [1] \"one\"\n## \n## $number\n## [1] 2\n## \n## $temp\n##  [1]  8.7  9.2  9.4  9.5  9.7 10.1 10.3 10.6 10.7 10.8 11.3 11.9 12.2\n## [14] 12.3 11.7 10.2 10.3 10.3 10.4 10.3 10.1  9.7  9.5  9.4\n## \n## $boolean\n## [1] TRUE\n## \n## $words\n## [1] \"one\"   \"two\"   \"three\"\n## \n## $matrix\n##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]  8.7  9.7 10.7 12.2 10.3 10.1\n## [2,]  9.2 10.1 10.8 12.3 10.3  9.7\n## [3,]  9.4 10.3 11.3 11.7 10.4  9.5\n## [4,]  9.5 10.6 11.9 10.2 10.3  9.4"},{"path":"first-steps-in-r.html","id":"retrieving-list-elements","chapter":"3 First steps in R","heading":"3.5.3.3.1 Retrieving list elements","text":"can access list items position [[ notation.Naming elements quite convenient allows retrieve rapidly mean symbol $.\nsyntax follows: list_name$element_name.\nretrieve element matrix list my_list:","code":"\nmy_list[[1]] #get first element## [1] \"one\"\nmy_list$matrix##      [,1] [,2] [,3] [,4] [,5] [,6]\n## [1,]  8.7  9.7 10.7 12.2 10.3 10.1\n## [2,]  9.2 10.1 10.8 12.3 10.3  9.7\n## [3,]  9.4 10.3 11.3 11.7 10.4  9.5\n## [4,]  9.5 10.6 11.9 10.2 10.3  9.4"},{"path":"first-steps-in-r.html","id":"retrieving-single-data-elements","chapter":"3 First steps in R","heading":"3.5.3.3.2 Retrieving single data elements","text":"Even better, can retrieve single data element contained list element.\nwrite expression makes use symbol $ brackets [ ]proper order.\nsyntax follows: list_name$element_name[data].\nfirst example, retrieve data element located third position object named words list my_list:second example, retrieve data element located second row third column matrix named matrix list my_list:may read information lists .","code":"\nmy_list$words[3]## [1] \"three\"\nmy_list$matrix[2, 3]## [1] 10.8"},{"path":"first-steps-in-r.html","id":"exercise-18","chapter":"3 First steps in R","heading":"Exercise","text":"Make list three named elements different types.use square bracket notation extract second elementuse $ notation extract element name.","code":""},{"path":"first-steps-in-r.html","id":"data-frames-and-tibbles","chapter":"3 First steps in R","heading":"3.5.3.4 Data frames and tibbles","text":"data frame two-dimensional object stores data various types form table.\nData frames popular way store research data since columns usually associated single variables (thus specific data type numeric character) rows associated observations.recently, data frames main storage objects research data.\nNowadays, tibbles (evolution data frame appeared tidyverse) replace data frames practical handle data sets (understand ).\ntrend, focus mainly tibbles section website.\nhowever likely meet data frames course studies.\nworry see transform data frames tibbles.Tibbles standard introduced tidyverse, must make sure package active using objects.\nSimply run command first:installed package yet, look section 2.3.3.1.","code":"\nlibrary(tidyverse)"},{"path":"first-steps-in-r.html","id":"data-frames-vs.-tibbles","chapter":"3 First steps in R","heading":"3.5.3.4.1 Data frames vs. tibbles","text":"object df printed data frame stores average temperature recorded monthly 2017, 2018 2019 Lygra (Vestland, Norway). created function data.frame().may see, get whole data set 36 rows, 3 variables, header column names first column gives number row.object tbl tibble contains exactly observations variables df. built function tibble()., get convenient display data:first 10 rows header displayed,number rows printed displayed present window (# ... 26 rows),dimensions tibble appear clearly header (# tibble: 36 x 3),column names come along quick description data type (<int> integer, <chr> character, <dbl> double, etc)., tibbles print much better give information data frames !\nalso predictable behaviour extracting data .","code":"\ndf <- data.frame(Year = rep(2017:2019, each = 12), \n                 Month = rep(month.name, 3), \n                 Avg_temperature = c(3.4, 2.8, 4.2, 5.8, 11.4, 12.6, 14.6, 13.9, 13.7, 9.2, 4.3, 3.1, 2.3, 0.5, 0.8, 6.7, 13.5, 13.6, 16.2, 13.8, 11.6, 8.0, 6.6, 3.9, 1.7, 4.6, 4.0, 9.1, 8.8, 13.2, 15.4, 15.8, 11.6, 7.8, 3.6, 4.8))\ndf##    Year     Month Avg_temperature\n## 1  2017   January             3.4\n## 2  2017  February             2.8\n## 3  2017     March             4.2\n## 4  2017     April             5.8\n## 5  2017       May            11.4\n## 6  2017      June            12.6\n## 7  2017      July            14.6\n## 8  2017    August            13.9\n## 9  2017 September            13.7\n## 10 2017   October             9.2\n## 11 2017  November             4.3\n## 12 2017  December             3.1\n## 13 2018   January             2.3\n## 14 2018  February             0.5\n## 15 2018     March             0.8\n## 16 2018     April             6.7\n## 17 2018       May            13.5\n## 18 2018      June            13.6\n## 19 2018      July            16.2\n## 20 2018    August            13.8\n## 21 2018 September            11.6\n## 22 2018   October             8.0\n## 23 2018  November             6.6\n## 24 2018  December             3.9\n## 25 2019   January             1.7\n## 26 2019  February             4.6\n## 27 2019     March             4.0\n## 28 2019     April             9.1\n## 29 2019       May             8.8\n## 30 2019      June            13.2\n## 31 2019      July            15.4\n## 32 2019    August            15.8\n## 33 2019 September            11.6\n## 34 2019   October             7.8\n## 35 2019  November             3.6\n## 36 2019  December             4.8\ntbl <- tibble(Year = rep(2017:2019, each = 12), \n             Month = rep(month.name, 3), \n             Avg_temperature = c(3.4, 2.8, 4.2, 5.8, 11.4, 12.6, 14.6, 13.9, 13.7, 9.2, 4.3, 3.1, 2.3, 0.5, 0.8, 6.7, 13.5, 13.6, 16.2, 13.8, 11.6, 8.0, 6.6, 3.9, 1.7, 4.6, 4.0, 9.1, 8.8, 13.2, 15.4, 15.8, 11.6, 7.8, 3.6, 4.8))\ntbl## # A tibble: 36 × 3\n##    Year Month    Avg_temperature\n##   <int> <chr>              <dbl>\n## 1  2017 January              3.4\n## 2  2017 February             2.8\n## 3  2017 March                4.2\n## # … with 33 more rows"},{"path":"first-steps-in-r.html","id":"retrieving-data-elements","chapter":"3 First steps in R","heading":"3.5.3.4.2 Retrieving data elements","text":"Similarly vectors, matrices lists, one can extract single elements data frames tibbles.\n, use brackets [ ] :One can also retrieve rows columns:also possible use symbol $ retrieve content specific variables:Chapter 7 see alternative way manipulating tibbles dplyr package.","code":"\ndf[3, \"Avg_temperature\"]## [1] 4.2\ntbl[3, \"Avg_temperature\"]## # A tibble: 1 × 1\n##   Avg_temperature\n##             <dbl>\n## 1             4.2\ndf[3, ]##   Year Month Avg_temperature\n## 3 2017 March             4.2\ntbl[3, ]## # A tibble: 1 × 3\n##    Year Month Avg_temperature\n##   <int> <chr>           <dbl>\n## 1  2017 March             4.2\ndf[ , \"Avg_temperature\"]##  [1]  3.4  2.8  4.2  5.8 11.4 12.6 14.6 13.9 13.7  9.2  4.3  3.1  2.3\n## [14]  0.5  0.8  6.7 13.5 13.6 16.2 13.8 11.6  8.0  6.6  3.9  1.7  4.6\n## [27]  4.0  9.1  8.8 13.2 15.4 15.8 11.6  7.8  3.6  4.8\ntbl[ , \"Avg_temperature\"]## # A tibble: 36 × 1\n##   Avg_temperature\n##             <dbl>\n## 1             3.4\n## 2             2.8\n## 3             4.2\n## # … with 33 more rows\ndf$Avg_temperature##  [1]  3.4  2.8  4.2  5.8 11.4 12.6 14.6 13.9 13.7  9.2  4.3  3.1  2.3\n## [14]  0.5  0.8  6.7 13.5 13.6 16.2 13.8 11.6  8.0  6.6  3.9  1.7  4.6\n## [27]  4.0  9.1  8.8 13.2 15.4 15.8 11.6  7.8  3.6  4.8\ntbl$Avg_temperature##  [1]  3.4  2.8  4.2  5.8 11.4 12.6 14.6 13.9 13.7  9.2  4.3  3.1  2.3\n## [14]  0.5  0.8  6.7 13.5 13.6 16.2 13.8 11.6  8.0  6.6  3.9  1.7  4.6\n## [27]  4.0  9.1  8.8 13.2 15.4 15.8 11.6  7.8  3.6  4.8"},{"path":"first-steps-in-r.html","id":"transforming-a-data-frame-into-a-tibble","chapter":"3 First steps in R","heading":"3.5.3.4.3 Transforming a data frame into a tibble","text":"previously working data frames, given data frame work , imported data using functions create data frames, may convert tibbles using as_tibble().\nconvert data frame df tibble:may read tibbles .\nmay read data frames .","code":"\ndf_as_tibble <- as_tibble(df)\ndf_as_tibble ## # A tibble: 36 × 3\n##    Year Month    Avg_temperature\n##   <int> <chr>              <dbl>\n## 1  2017 January              3.4\n## 2  2017 February             2.8\n## 3  2017 March                4.2\n## # … with 33 more rows"},{"path":"first-steps-in-r.html","id":"further-reading-1","chapter":"3 First steps in R","heading":"Further Reading","text":"R data scienceThe tidyverse","code":""},{"path":"first-steps-in-r.html","id":"whats-next-1","chapter":"3 First steps in R","heading":"What’s next","text":"Now know basics R tools “manually” create R objects, learn import data set external source.\nsee read fetch data various file types .txt, .csv, .xls, .xlsx, directly store tibbles.","code":""},{"path":"first-steps-in-r.html","id":"contributors-1","chapter":"3 First steps in R","heading":"Contributors","text":"Jonathan SouléAud HalbritterRichard Telford","code":""},{"path":"importing-data-in-r.html","id":"importing-data-in-r","chapter":"4 Importing data in R","heading":"4 Importing data in R","text":"R can import data files many different formats.\nexample:csv files readr packageexcel files readxl packagexlm files xml2 packagenetcdf files ncdf4 packageshapefiles sf packageIn chapter, learn import tabular data external text file tibble.\nuse functions package readr part tidyverse package, make sure activated library(tidyverse).","code":""},{"path":"importing-data-in-r.html","id":"before-we-start-2","chapter":"4 Importing data in R","heading":"Before we start","text":"must familiar tibbles data types (numeric, character, etc).","code":""},{"path":"importing-data-in-r.html","id":"what-are-tabular-data","chapter":"4 Importing data in R","heading":"4.1 What are tabular data?","text":"Tabular data data organized form table rows columns.\ntable often header, .e. additional row displays variable names.\nexample formatted table header:Table 4.1: simple table headerIn example, table consists 4 variables (columns) 12 observations (rows) addition header (top row).\ncell contents clearly delimited.example non-tabular dataset.\ndataset list profiles recurrent fields (Name, Position, Institution).\nprofile contains three lines field:value pair.","code":"## Name: Aud Halbritter\n## Position: Researcher\n## Institution: UiB\n## -----------------------------\n## Name: Jonathan Soule\n## Position: Senior Engineer\n## Institution: UiB\n## -----------------------------\n## Name: Richard J. Telford\n## Position: Associate Professor\n## Institution: UiB\n## -----------------------------"},{"path":"importing-data-in-r.html","id":"about-tidy-data","chapter":"4 Importing data in R","heading":"4.2 About tidy data","text":"Sooner later, read tidy data standard, consistent way organize tabular data R.\nBriefly, tidy data follows short series rules:variable data set presented specific column,observation data set presented specific row,cell intersection row column contains single value.following figure illustrates well rules.\nFigure 4.1: tidy dataset, variables columns, observations rows, values cells. — Source: R Data Science - CC -NC-ND 3.0 US\ndataset presented Table 4.1 respects three rules, thus tidy dataset.Indeed, least one rules broken since columns display data matching several variables (Date, time, Weather, etc).Importing data file containing tidy data great way start work, prerequisite data import.\nlong data tabular, able import R, later chance tidy (see chapter 6).","code":""},{"path":"importing-data-in-r.html","id":"file-formats","chapter":"4 Importing data in R","heading":"4.3 File formats","text":"Tabular data may stored files using various formats, spreadsheets, etc.\ncommon spreadsheets store data , proprietary file format, e.g. MS Excel produces .xls .xlsx files.\nformats may limitation data management R.\nSimpler formats plain text files .txt .csv always preferred saving exporting data spreadsheets.","code":""},{"path":"importing-data-in-r.html","id":"the-csv-format","chapter":"4 Importing data in R","heading":"4.3.1 The CSV format","text":"One common format storing tabular data plain text files CSV, stands Comma-Separated Values.\nformat going deal .\nNote CSV-formatted files often (always) .csv extension. may also regular .txt extension.CSV-formatted file, data stored similar manner :\nFigure 4.2: Contents CSV file viewed text editor Notepad\ninformation, file matches example Table 4.1.\nline corresponds row table (including header) cell contents separated comma ,.\nNote period symbol . used decimal separator.use commas CSV format however universal.\nsymbols semi-colon ; may used delimiter.\ncase several European countries commas decimal separator.\ndata set , time European format:\nFigure 4.3: Contents another CSV file\nFinally, know exist delimiter-separated formats, delimiters like | tabs replace commas.","code":""},{"path":"importing-data-in-r.html","id":"know-your-data","chapter":"4 Importing data in R","heading":"4.4 Know your data!","text":"several reasons different symbols used CSV files.\nAmong reasons :locale, .e. parameters define language regional settings (currency, time date, number format setting) use machine,software-based preferences, settings defined default software used punch data,user-based preferences, settings choose punching saving data.thus important know CSV file made .\ntherefore recommend systematically inspect data file importing R.\nOne way open file read_lines('file.txt') (n_max argument useful lots data) determine:symbol used decimal separator (, .)symbol used delimiter (, ;)extra lines data need removingHere previous example:file, decimal separator . delimiter ,.","code":"\nread_lines('data/weather.csv')##  [1] \"month,temperature (Celsius),precipitation (mm),Wind (m/s)\"\n##  [2] \"January,-3.4,29.4,1.3\"                                    \n##  [3] \"February,-0.4,15.4,0.9\"                                   \n##  [4] \"March,-1.7,57.6,1.7\"                                      \n##  [5] \"april,3.8,3.2,0.8\"                                        \n##  [6] \"May,5.1,25.2,1.4\"                                         \n##  [7] \"June,10.6,52.4,1.1\"                                       \n##  [8] \"July,13.1,65.0,1.0\"                                       \n##  [9] \"August,12.8,67.4,0.7\"                                     \n## [10] \"September,6.9,79.0,1.2\"                                   \n## [11] \"October,2.5,18.2,0.8\"                                     \n## [12] \"November,-2.2,7.8,0.8\"                                    \n## [13] \"December,1.5,92.0,1.5\""},{"path":"importing-data-in-r.html","id":"import-with-readr","chapter":"4 Importing data in R","heading":"4.5 Import with readr","text":"readr comes several functions read data files.\nAmong :read_delim(),read_csv(),read_csv2().focus essentially read_delim() general function can import formats.\nread_csv() read_csv2() specific functions preset import CSV-formatted files comma , semi-colon ; defined delimiter, respectively.","code":""},{"path":"importing-data-in-r.html","id":"read_delim","chapter":"4 Importing data in R","heading":"4.5.1 read_delim()","text":"read_delim() simple function several things .\nFirst, finds reads file import.\nlooks first 1000 rows file guesses number variables rows, data type variable.\nFinally, displays data tibble keeping track order columns rows, nature data.function automatically store data reading file.\ntibble produced read_delim() must assigned object using <-.read_delim() two main mandatory arguments:file = \" \" defines find data file,delim = \" \" defines symbol used delimiter.searching file, R/RStudio uses location current RStudio project root.\nconsequence, may simply write file name file folder .Rproj file.\nAlternatively, write [subfolder]/[filename] file subfolder.\ninfo RStudio projects, read section 2.4.following example, import file weather.csv located subfolder data current RStudio project object weather.\nweather.csv, delimiter , decimal separator .function executed, console shows short series warnings messages.\nframe , message Column specification tells content column month recognized data type character, three columns recognized double (similar numeric).Now tibble weather available R may see tab Environment (see figure 4.4).\nFigure 4.4: tibble weather now stored R.\ncan display table follows:","code":"\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\")## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 12 × 4\n##    month     `temperature (Celsius)` `precipitation (mm)` `Wind (m/s)`\n##    <chr>                       <dbl>                <dbl>        <dbl>\n##  1 January                      -3.4                 29.4          1.3\n##  2 February                     -0.4                 15.4          0.9\n##  3 March                        -1.7                 57.6          1.7\n##  4 april                         3.8                  3.2          0.8\n##  5 May                           5.1                 25.2          1.4\n##  6 June                         10.6                 52.4          1.1\n##  7 July                         13.1                 65            1  \n##  8 August                       12.8                 67.4          0.7\n##  9 September                     6.9                 79            1.2\n## 10 October                       2.5                 18.2          0.8\n## 11 November                     -2.2                  7.8          0.8\n## 12 December                      1.5                 92            1.5"},{"path":"importing-data-in-r.html","id":"choose-the-right-delimiter","chapter":"4 Importing data in R","heading":"4.5.1.1 Choose the right delimiter","text":"example rather straight forward, may experience issues depending content CSV file.\nRelatively often, one tries import CSV files wrongly assuming , used delimiter.\nhappens assumption file (weather2.csv) ; fact used delimiter:message Column specification tells content whole CSV file transferred one single column named month;temperature (Celsius);precipitation (mm);Wind (m/s) recognized data type character.\nAccordingly, object weather2, now visible tab Environment (see figure 4.5), described tibble 12 observations one variable.\nFigure 4.5: tibble weather2 now stored, wrongly formatted.\ncontent resulting tibble follows:shows important review data importing .\nquick check read_lines('data/weather2.csv') revealed use ; delimiter weather2.csv, certainly used follow code import ., message Column specification tells content columns month Wind (m/s) recognized data type character, two columns recognized number.\nread_delim() got things right number variables, something went wrong variables expect Wind (m/s) recognized double.\nfind issue need review imported data object weather2 compare original file weather2.csv.","code":"\nweather2 <- read_delim(file = \"data/weather2.csv\", \n                       delim = \",\")## Rows: 12 Columns: 1## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): month;temperature (Celsius);precipitation (mm);Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather2## # A tibble: 12 × 1\n##    `month;temperature (Celsius);precipitation (mm);Wind (m/s)`\n##    <chr>                                                      \n##  1 January;-3,4;29,4;1,3                                      \n##  2 February;-0,4;15,4;0,9                                     \n##  3 March;-1,7;57,6;1,7                                        \n##  4 april;3,8;3,2;0,8                                          \n##  5 May;5,1;25,2;1,4                                           \n##  6 June;10,6;52,4;1,1                                         \n##  7 July;13,1;65,0;1,0                                         \n##  8 August;12,8;67,4;0,7                                       \n##  9 September;6,9;79,0;1,2                                     \n## 10 October;2,5;18,2;0,8                                       \n## 11 November;-2,2;7,8;0,8                                      \n## 12 December;1,5;92,0;1,5\nweather2 <- read_delim(file = \"data/weather2.csv\", \n                       delim = \";\")## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \";\"\n## chr (2): month, Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"importing-data-in-r.html","id":"review-the-imported-data","chapter":"4 Importing data in R","heading":"4.5.1.2 Review the imported data","text":"example shows importance carefully verifying imported data R matches original data set.\nfollowing figure compares content file weather2.csv (Fig. 4.6 left) content object weather2 (Fig. 4.6 right):\nFigure 4.6: data object match data file.\nLooking rows pictures, one can understand commas simply ignored, excepted last column.\nproblem may occur decimal separator used file different decimal separator defined system (.k.locale).\nsolve issue, must impose separator using locale = locale(decimal_mark = \",\"):\nFigure 4.7: data object now matches data file.\n","code":"\nweather3 <- read_delim(file = \"data/weather2.csv\", \n                       delim = \";\", \n                       locale = locale(decimal_mark = \",\"))## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \";\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"importing-data-in-r.html","id":"read_csv","chapter":"4 Importing data in R","heading":"4.5.2 read_csv()","text":"seen section , read_delim() can read CSV files , ; used delimiters.\nreadr also comes functions read_csv() twin read_csv2().\n“clones” read_delim() argument delim = preset delim = \",\" delim = \";\", respectively.\nThus, argument strictly required file = \" \" determine path file.two examples. first one shows use read_csv():resulting tibble looks correct:second one shows use read_csv2():Note message Column specification indicates symbols read_csv2() considered importing data. resulting tibble looks correct:","code":"\nweather_csv <- read_csv(file = \"data/weather.csv\")## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather_csv## # A tibble: 12 × 4\n##    month     `temperature (Celsius)` `precipitation (mm)` `Wind (m/s)`\n##    <chr>                       <dbl>                <dbl>        <dbl>\n##  1 January                      -3.4                 29.4          1.3\n##  2 February                     -0.4                 15.4          0.9\n##  3 March                        -1.7                 57.6          1.7\n##  4 april                         3.8                  3.2          0.8\n##  5 May                           5.1                 25.2          1.4\n##  6 June                         10.6                 52.4          1.1\n##  7 July                         13.1                 65            1  \n##  8 August                       12.8                 67.4          0.7\n##  9 September                     6.9                 79            1.2\n## 10 October                       2.5                 18.2          0.8\n## 11 November                     -2.2                  7.8          0.8\n## 12 December                      1.5                 92            1.5\nweather_csv2 <- read_csv2(file = \"data/weather2.csv\")## ℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \";\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather_csv2## # A tibble: 12 × 4\n##    month     `temperature (Celsius)` `precipitation (mm)` `Wind (m/s)`\n##    <chr>                       <dbl>                <dbl>        <dbl>\n##  1 January                      -3.4                 29.4          1.3\n##  2 February                     -0.4                 15.4          0.9\n##  3 March                        -1.7                 57.6          1.7\n##  4 april                         3.8                  3.2          0.8\n##  5 May                           5.1                 25.2          1.4\n##  6 June                         10.6                 52.4          1.1\n##  7 July                         13.1                 65            1  \n##  8 August                       12.8                 67.4          0.7\n##  9 September                     6.9                 79            1.2\n## 10 October                       2.5                 18.2          0.8\n## 11 November                     -2.2                  7.8          0.8\n## 12 December                      1.5                 92            1.5"},{"path":"importing-data-in-r.html","id":"useful-arguments","chapter":"4 Importing data in R","heading":"4.5.3 Useful arguments","text":"read_delim(), read_csv() read_csv2() multitude arguments allow adjusting way data read displayed. review handful .","code":""},{"path":"importing-data-in-r.html","id":"n_max","chapter":"4 Importing data in R","heading":"4.5.3.1 n_max","text":"n_max sets limit number observations read.\nNote n_max consider first row (header) data file observation.","code":"\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\",\n                      n_max = 6)## Rows: 6 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 6 × 4\n##   month    `temperature (Celsius)` `precipitation (mm)` `Wind (m/s)`\n##   <chr>                      <dbl>                <dbl>        <dbl>\n## 1 January                     -3.4                 29.4          1.3\n## 2 February                    -0.4                 15.4          0.9\n## 3 March                       -1.7                 57.6          1.7\n## 4 april                        3.8                  3.2          0.8\n## 5 May                          5.1                 25.2          1.4\n## 6 June                        10.6                 52.4          1.1"},{"path":"importing-data-in-r.html","id":"skip","chapter":"4 Importing data in R","heading":"4.5.3.2 skip","text":"argument skip may used skip rows reading data file.\naware :header original data file counts one row,first row comes skipped becomes header resulting tibble.following example, read data file weather.csv skip first row:expected, first row (header) skipped, data observation January become header tibble.\nargument col_names() introduced useful solving issue.","code":"\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\", \n                      skip = 1)## Rows: 11 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): January\n## dbl (3): -3.4, 29.4, 1.3## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 11 × 4\n##    January   `-3.4` `29.4` `1.3`\n##    <chr>      <dbl>  <dbl> <dbl>\n##  1 February    -0.4   15.4   0.9\n##  2 March       -1.7   57.6   1.7\n##  3 april        3.8    3.2   0.8\n##  4 May          5.1   25.2   1.4\n##  5 June        10.6   52.4   1.1\n##  6 July        13.1   65     1  \n##  7 August      12.8   67.4   0.7\n##  8 September    6.9   79     1.2\n##  9 October      2.5   18.2   0.8\n## 10 November    -2.2    7.8   0.8\n## 11 December     1.5   92     1.5"},{"path":"importing-data-in-r.html","id":"exercise-19","chapter":"4 Importing data in R","heading":"Exercise","text":"Download Mt Gonga plant biomass data import .","code":""},{"path":"importing-data-in-r.html","id":"col_names","chapter":"4 Importing data in R","heading":"4.5.3.3 col_names","text":"argument col_names may used define name variables/columns tibble.\nuse col_names = TRUE, first row data file defines name variables.use col_names = FALSE, first row data file first observation resulting tibble, variables named X1, X2, etc.col_names = may also followed actual variable names want use.\ncase, write col_names = c() list names parentheses.\naware :names input placed top tibble,header original data file become first row resulting tibble.\nexample:","code":"\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\", \n                      col_names = TRUE)## Rows: 12 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): month\n## dbl (3): temperature (Celsius), precipitation (mm), Wind (m/s)## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 12 × 4\n##    month     `temperature (Celsius)` `precipitation (mm)` `Wind (m/s)`\n##    <chr>                       <dbl>                <dbl>        <dbl>\n##  1 January                      -3.4                 29.4          1.3\n##  2 February                     -0.4                 15.4          0.9\n##  3 March                        -1.7                 57.6          1.7\n##  4 april                         3.8                  3.2          0.8\n##  5 May                           5.1                 25.2          1.4\n##  6 June                         10.6                 52.4          1.1\n##  7 July                         13.1                 65            1  \n##  8 August                       12.8                 67.4          0.7\n##  9 September                     6.9                 79            1.2\n## 10 October                       2.5                 18.2          0.8\n## 11 November                     -2.2                  7.8          0.8\n## 12 December                      1.5                 92            1.5\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\", \n                      col_names = FALSE)## Rows: 13 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (4): X1, X2, X3, X4## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 13 × 4\n##    X1        X2                    X3                 X4        \n##    <chr>     <chr>                 <chr>              <chr>     \n##  1 month     temperature (Celsius) precipitation (mm) Wind (m/s)\n##  2 January   -3.4                  29.4               1.3       \n##  3 February  -0.4                  15.4               0.9       \n##  4 March     -1.7                  57.6               1.7       \n##  5 april     3.8                   3.2                0.8       \n##  6 May       5.1                   25.2               1.4       \n##  7 June      10.6                  52.4               1.1       \n##  8 July      13.1                  65.0               1.0       \n##  9 August    12.8                  67.4               0.7       \n## 10 September 6.9                   79.0               1.2       \n## 11 October   2.5                   18.2               0.8       \n## 12 November  -2.2                  7.8                0.8       \n## 13 December  1.5                   92.0               1.5\nweather <- read_delim(file = \"data/weather.csv\", \n                      delim = \",\", \n                      col_names = c(\"Month\", \"Temp\", \"Precip\", \"Wind\"))## Rows: 13 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (4): Month, Temp, Precip, Wind## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nweather## # A tibble: 13 × 4\n##    Month     Temp                  Precip             Wind      \n##    <chr>     <chr>                 <chr>              <chr>     \n##  1 month     temperature (Celsius) precipitation (mm) Wind (m/s)\n##  2 January   -3.4                  29.4               1.3       \n##  3 February  -0.4                  15.4               0.9       \n##  4 March     -1.7                  57.6               1.7       \n##  5 april     3.8                   3.2                0.8       \n##  6 May       5.1                   25.2               1.4       \n##  7 June      10.6                  52.4               1.1       \n##  8 July      13.1                  65.0               1.0       \n##  9 August    12.8                  67.4               0.7       \n## 10 September 6.9                   79.0               1.2       \n## 11 October   2.5                   18.2               0.8       \n## 12 November  -2.2                  7.8                0.8       \n## 13 December  1.5                   92.0               1.5"},{"path":"importing-data-in-r.html","id":"col_types","chapter":"4 Importing data in R","heading":"4.5.3.4 col_types","text":"argument col_types may used modify data type variables.\nuseful example need set variable factor whereas R defined character.\nexample three simple variables.message clearly indicates, first last variables recognized double (.e. numeric) second one recognized character.\ntibble object counts displays follows:Let’s use col_types = cols() manually set data types double, factor integer, respectively.Now tibble displays like , correct data types column:need modify one variables, must name /writing code:tibble displays like :Note col_types particularly useful importing tabular data includes formatted dates.\nDates usually recognized character format match expected format set default (locale, etc).\nfollowing example, dates entered yyyy-mm-dd last column recognized type date:However, example , dates entered dd-mm-yyyy converted character:solve issue, add function col_date() cols() help R understand dates formatted shall read.result following tibble now correctly formatted:find whole list cols() parameters col_types .","code":"\ncounts <- read_delim(file = \"data/groups.csv\", \n                     delim = \",\")## Rows: 9 Columns: 3## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): group\n## dbl (2): ID, count## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ncounts## # A tibble: 9 × 3\n##      ID group count\n##   <dbl> <chr> <dbl>\n## 1     1 A         5\n## 2     2 A         3\n## 3     3 A         2\n## 4     4 B         4\n## 5     5 B         5\n## 6     6 B         8\n## 7     7 C         1\n## 8     8 C         2\n## 9     9 C         9\ncounts <- read_delim(file = \"data/groups.csv\", \n                     delim = \",\", \n                     col_types = cols(col_double(), col_factor(), col_integer()))\ncounts## # A tibble: 9 × 3\n##      ID group count\n##   <dbl> <fct> <int>\n## 1     1 A         5\n## 2     2 A         3\n## 3     3 A         2\n## 4     4 B         4\n## 5     5 B         5\n## 6     6 B         8\n## 7     7 C         1\n## 8     8 C         2\n## 9     9 C         9\ncounts <- read_delim(file = \"data/groups.csv\", \n                     delim = \",\", \n                     col_types = cols(group = col_factor()))\ncounts## # A tibble: 9 × 3\n##      ID group count\n##   <dbl> <fct> <dbl>\n## 1     1 A         5\n## 2     2 A         3\n## 3     3 A         2\n## 4     4 B         4\n## 5     5 B         5\n## 6     6 B         8\n## 7     7 C         1\n## 8     8 C         2\n## 9     9 C         9\ncountsdates <- read_delim(file = \"data/groups-dates1.csv\", \n                     delim = \",\")## Rows: 9 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (1): group\n## dbl  (2): ID, count\n## date (1): date## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ncountsdates <- read_delim(file = \"data/groups-dates2.csv\", \n                     delim = \",\")## Rows: 9 Columns: 4## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (2): group, date\n## dbl (2): ID, count## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ncountsdates <- read_delim(file = \"data/groups-dates2.csv\", \n                     delim = \",\",\n                     col_types = cols(date = col_date(\"%d-%m-%Y\")))\ncountsdates ## # A tibble: 9 × 4\n##      ID group count date      \n##   <dbl> <chr> <dbl> <date>    \n## 1     1 A         5 2021-03-01\n## 2     2 A         3 2021-03-02\n## 3     3 A         2 2021-03-03\n## 4     4 B         4 2021-03-01\n## 5     5 B         5 2021-03-02\n## 6     6 B         8 2021-03-03\n## 7     7 C         1 2021-03-01\n## 8     8 C         2 2021-03-02\n## 9     9 C         9 2021-03-03"},{"path":"importing-data-in-r.html","id":"exercise-20","chapter":"4 Importing data in R","heading":"Exercise","text":"Download midge data https://www.ncei.noaa.gov/pub/data/paleo/insecta/chironomidae/northamerica/usa/alaska/alaska2011midge-t.txt import part “3a. Clegg et al. 2011 Hudson Lake Midge Temperature Data”","code":""},{"path":"importing-data-in-r.html","id":"further-reading-2","chapter":"4 Importing data in R","heading":"Further Reading","text":"may find following links useful:R Data Science - Data importData Import Cheatsheet - readr/tidyrreadr","code":""},{"path":"importing-data-in-r.html","id":"contributors-2","chapter":"4 Importing data in R","heading":"Contributors","text":"Jonathan SouléAud HalbritterRichard Telford","code":""},{"path":"pipes.html","id":"pipes","chapter":"5 Pipes","heading":"5 Pipes","text":"want run several functions turn, example, wanted find mean bill length penguin species group_by summarise (find functions Chapter 7).\nnest one function inside .larger problems using function, solution becomes almost impossible read easy make mistakes forget brackets belong function.Another strategy make use intermediate objectsThis works better, can generate many intermediates can difficult ensure correct one used.popular alternative use pipes.\nR code pipe |>\nPipes pass results one function directly next function.never need use pipes, can make code readable.","code":"\nsummarise(group_by(penguins, species), mean = mean(bill_length_mm, na.rm = TRUE))## # A tibble: 3 × 2\n##   species    mean\n##   <fct>     <dbl>\n## 1 Adelie     38.8\n## 2 Chinstrap  48.8\n## 3 Gentoo     47.5\npenguins_grouped <- group_by(penguins, species)\nsummarise(penguins_grouped, mean = mean(bill_length_mm, na.rm = TRUE))## # A tibble: 3 × 2\n##   species    mean\n##   <fct>     <dbl>\n## 1 Adelie     38.8\n## 2 Chinstrap  48.8\n## 3 Gentoo     47.5\npenguins |> \n  group_by(species) |>\n  summarise(mean = mean(bill_length_mm, na.rm = TRUE))## # A tibble: 3 × 2\n##   species    mean\n##   <fct>     <dbl>\n## 1 Adelie     38.8\n## 2 Chinstrap  48.8\n## 3 Gentoo     47.5"},{"path":"pipes.html","id":"the-old-pipe","chapter":"5 Pipes","heading":"The old pipe %>%","text":"|> pipe introduced R version 4.1.\nPreviously, magrittr package pipe %>% widely used, especially tidyverse functions.\nsee %>% lot code stackoverflow help sites.\ncases old new pipes work exactly way.\nAdvantages |> pipe isslightly fasterdoesn’t need packages loadingeasier debug","code":""},{"path":"pipes.html","id":"a-recipe-for-mashed-potato","chapter":"5 Pipes","heading":"5.1 A recipe for mashed potato","text":"pipe can read “”.\nrecipe mashed potato can read buy 1kg potatoes, peel , boil , .","code":"\nbuy(\"potatoes\", kg = \"1\") |> \n  peel() |> \n  boil(minutes = \"15\") |> \n  drain() |> \n  mash(add = list(\"salt\", \"milk\", \"butter\")) |> \n  serve(decorate = \"parsley\")"},{"path":"pipes.html","id":"the-native-r-pipe","chapter":"5 Pipes","heading":"5.2 The native R pipe |>","text":"pipe passes result code left pipe function right, puts first available argument.Soand rewritten asIf want put object passed pipe second argument, need name first, available.\nwant pipe penguins lm fit linear model, need penguins put data argument, second argument lm.\ncan force naming formula argument, data first available argument.complex arrangements, example piping object two separate commands can done writing function.\nprobably won’t often.","code":"\nf <- \"file.csv\"\nread_csv(file = f)\nf |>\n read_csv()\n# un-named argument = fails\npenguins |>\n  lm(bill_length ~ species)\n\n# named first argument, penguins pipes into second argument\npenguins |>\n  lm(formula = bill_length ~ species)"},{"path":"pipes.html","id":"making-a-pipe","chapter":"5 Pipes","heading":"5.3 Making a pipe","text":"can make pipe either typing directly, using RStudio keyboard shortcut Ctrl + Shift + m\n(Mac, cmd + Shift + m).\nmay need set RStudio options.\nGo Tools > Global Options > Code tick Use native pipe operator, |>.\nmake code readable, put line break pipe.","code":""},{"path":"pipes.html","id":"contributors-3","chapter":"5 Pipes","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"tidying-data-with-tidyr.html","id":"tidying-data-with-tidyr","chapter":"6 Tidying data with tidyr","heading":"6 Tidying data with tidyr","text":"","code":""},{"path":"tidying-data-with-tidyr.html","id":"tidy-data","chapter":"6 Tidying data with tidyr","heading":"6.1 Tidy data","text":"can start analysing plotting data, often need tidy .\nTidy data standardised way structure dataset makes much easier process, analyse plot data.\nFunctions tidyr dplyr packages, part tidyverse, can useful tidying data.tidy dataEvery column variable.Every row observation.Every cell single value.process tidying data convert data data meets standard.","code":"\nlibrary(tidyr)"},{"path":"tidying-data-with-tidyr.html","id":"separate-multiple-values","chapter":"6 Tidying data with tidyr","heading":"6.2 separate() multiple values","text":"cell contains multiple values, can use tidyr::separate().example, small dataset, site code plot number combined one column separated hyphen.can use separate() split site plot separate columns.\ndefault, separate() splits data non-alphanumeric values.\nbehaviour can controlled sep argument.","code":"\ndat <- tribble(~id, ~value,\n       \"A-1\", 1,\n       \"A-2\", 2,\n       \"B-1\", 3)\n\ndat## # A tibble: 3 × 2\n##   id    value\n##   <chr> <dbl>\n## 1 A-1       1\n## 2 A-2       2\n## 3 B-1       3\ndat |> separate(col = id, into = c(\"site\", \"plot\"))## # A tibble: 3 × 3\n##   site  plot  value\n##   <chr> <chr> <dbl>\n## 1 A     1         1\n## 2 A     2         2\n## 3 B     1         3"},{"path":"tidying-data-with-tidyr.html","id":"reshaping-data---wide-to-long","chapter":"6 Tidying data with tidyr","heading":"6.3 Reshaping data - wide to long","text":"common need reshape data make tidy.\ncan done pivot_* functions.\nFigure 6.1: Wide data long data pivot_longer() pivot_wider() .\nBergen climate data Wikipedia (NB demonstration wikipedia good source climate data - use seklima Norwegian data).might nice way present data tidy data:\nrow observation; column variable.can use pivot_longer() reshape data.\nmonths, selected cols argument column names (see section 7.2.1 syntax used ) become new variable name set names_to, data values get put column named values_to argument.data now tidier, probably useful reshape data , column climate variable.\ncan pivot_wider().","code":"## Rows: 4 Columns: 13## ── Column specification ───────────────────────────────────────────────\n## Delimiter: \"\\t\"\n## chr  (1): Måned\n## dbl (12): Jan, Feb, Mar, Apr, Mai, Jun, Jul, Aug, Sep, Okt, Nov, Des## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.## # A tibble: 4 × 13\n##   Måned       Jan   Feb   Mar   Apr   Mai   Jun   Jul   Aug   Sep   Okt\n##   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n## 1 Normal m…   3.6   4     5.9   9.1  14    16.8  17.6  17.4  14.2  11.2\n## 2 Døgnmidd…   1.7   1.7   3.3   5.8  10.4  13.1  14.2  14.2  11.5   8.8\n## 3 Normal m…  -0.4  -0.5   0.9   3     7.2  10.2  11.5  11.6   9.1   6.6\n## 4 Nedbør (… 190   152   170   114   106   132   148   190   283   271  \n## # … with 2 more variables: Nov <dbl>, Des <dbl>\nbergen_klima_long <- bergen_klima |> \n  pivot_longer(cols = Jan:Des, names_to = \"Month\", values_to = \"value\")\nbergen_klima_long## # A tibble: 48 × 3\n##   Måned                 Month value\n##   <chr>                 <chr> <dbl>\n## 1 Normal maks. temp. °C Jan     3.6\n## 2 Normal maks. temp. °C Feb     4  \n## 3 Normal maks. temp. °C Mar     5.9\n## # … with 45 more rows"},{"path":"tidying-data-with-tidyr.html","id":"reshaping-data---long-to-wide","chapter":"6 Tidying data with tidyr","heading":"6.4 Reshaping data - long to wide","text":"can tell pivot_wider() column contains become column names data names_from values_from, respectively.data now convenient format plotting analysis.","code":"\nbergen_klima_wider <- bergen_klima_long |> \n  pivot_wider(names_from = \"Måned\", values_from = \"value\")\n\nbergen_klima_wider## # A tibble: 12 × 5\n##    Month `Normal maks. temp. °C` `Døgnmiddeltemp. °C` `Normal min. tem…\n##    <chr>                   <dbl>                <dbl>             <dbl>\n##  1 Jan                       3.6                  1.7              -0.4\n##  2 Feb                       4                    1.7              -0.5\n##  3 Mar                       5.9                  3.3               0.9\n##  4 Apr                       9.1                  5.8               3  \n##  5 Mai                      14                   10.4               7.2\n##  6 Jun                      16.8                 13.1              10.2\n##  7 Jul                      17.6                 14.2              11.5\n##  8 Aug                      17.4                 14.2              11.6\n##  9 Sep                      14.2                 11.5               9.1\n## 10 Okt                      11.2                  8.8               6.6\n## 11 Nov                       6.9                  4.8               2.8\n## 12 Des                       4.7                  2.7               0.6\n## # … with 1 more variable: Nedbør (mm) <dbl>"},{"path":"tidying-data-with-tidyr.html","id":"exercise-21","chapter":"6 Tidying data with tidyr","heading":"Exercise","text":"Mt Gonga data downloaded previously, pivot data height data (H1-H10) one column.","code":""},{"path":"tidying-data-with-tidyr.html","id":"further-reading-3","chapter":"6 Tidying data with tidyr","heading":"6.4.1 Further reading","text":"tidy data vignettetidyr cheat sheet","code":""},{"path":"working-with-single-tables-in-dplyr.html","id":"working-with-single-tables-in-dplyr","chapter":"7 Working with single tables in dplyr","heading":"7 Working with single tables in dplyr","text":"Data frames usually convenient objects storing, plotting analysing data R.\nalso need able manipulate data data frames.tutorial show manipulate data frames using dplyr package, part tidyverse.Everything can done dplyr can done base R.\ndplyr solution usually easier write understand, can faster.many function dplyr, tutorial focuses functions find useful.","code":""},{"path":"working-with-single-tables-in-dplyr.html","id":"load-the-package","chapter":"7 Working with single tables in dplyr","heading":"7.0.1 Load the package","text":"can load dplyr withBut usually convenient load tidyverse get ggplot2, dplyr, readr useful packages one command.","code":"\nlibrary(\"dplyr\")\nlibrary(\"tidyverse\")"},{"path":"working-with-single-tables-in-dplyr.html","id":"more-feedback-tidylog","chapter":"7 Working with single tables in dplyr","heading":"7.0.2 More feedback tidylog","text":"can get feedback dplyr functions done data loading tidylog package., tidylog helped identified bugs code.","code":"\nlibrary(\"tidylog\")\n# if you are using conflicted, you will need to set conflict_prefer() for all dplyr function\n# use purrr::map to iterate over tidylog functions \n# library(conflicted)\n# map(getNamespaceExports(\"tidylog\"), ~conflict_prefer(.x, winner = \"tidylog\"))"},{"path":"working-with-single-tables-in-dplyr.html","id":"the-penguins-dataset","chapter":"7 Working with single tables in dplyr","heading":"7.1 The penguins dataset","text":"tutorial use penguins dataset palmerpenguins package.\ndataset includes measurements three species penguin.","code":"\n# Load the data\ndata(\"penguins\", package = \"palmerpenguins\")\n# Show the data\npenguins## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"selecting-columns-with-select","chapter":"7 Working with single tables in dplyr","heading":"7.2 Selecting columns with select()","text":"can choose columns data frame want select().first argument data, supplied pipe |>, next arguments names columns want.\nnames need quote marks.equivalent base R codeRemember want use output code analysis, need assign object name <-.","code":"\n#select species, bill_length_mm & bill_depth_mm\npenguins |> \n  select(species, bill_length_mm, bill_depth_mm)## select: dropped 5 variables (island, flipper_length_mm, body_mass_g, sex, year)## # A tibble: 344 × 3\n##   species bill_length_mm bill_depth_mm\n##   <fct>            <dbl>         <dbl>\n## 1 Adelie            39.1          18.7\n## 2 Adelie            39.5          17.4\n## 3 Adelie            40.3          18  \n## # … with 341 more rows\n#select species, bill_length_mm & bill_depth_mm\npenguins[, c(\"species\", \"bill_length_mm\", \"bill_depth_mm\")] ## # A tibble: 344 × 3\n##   species bill_length_mm bill_depth_mm\n##   <fct>            <dbl>         <dbl>\n## 1 Adelie            39.1          18.7\n## 2 Adelie            39.5          17.4\n## 3 Adelie            40.3          18  \n## # … with 341 more rows"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-22","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, selectspeciesspecies bill_length_mmall columns except year","code":"penguins |> \n  select(___, ___)"},{"path":"working-with-single-tables-in-dplyr.html","id":"select-helpers","chapter":"7 Working with single tables in dplyr","heading":"7.2.1 select() helpers","text":"Sometimes don’t want write names columns want select.\nmight even know advance.\nFortunately helper functions.want select() adjacent columns, can use notation first:last.Sometimes easier remove columns don’t want.\ncan putting - front column name.pattern column names want select (remove), helper functions.\nexample, select columns start “bill”, can use starts_with().Conversely, want select columns end “mm”, can use ends_with().\ncontains() flexible matches() powerful helper functions, using regular expressions identify columns (see regular expression tutorial).Sometimes, might want select columns certain type.\nexample, select numeric columns can use .numeric function inside select() helper ()..* functions exist, example, .character text.can also select columns number (1 first column), generally bad idea makes code difficult understand new column added, column order changed, code break.strategies works best context dependent.","code":"\n#select species to bill_depth_mm\npenguins |> select(species:bill_depth_mm)## select: dropped 4 variables (flipper_length_mm, body_mass_g, sex, year)## # A tibble: 344 × 4\n##   species island    bill_length_mm bill_depth_mm\n##   <fct>   <fct>              <dbl>         <dbl>\n## 1 Adelie  Torgersen           39.1          18.7\n## 2 Adelie  Torgersen           39.5          17.4\n## 3 Adelie  Torgersen           40.3          18  \n## # … with 341 more rows\n#select everything but year and sex\npenguins |> select(-year, -sex)## select: dropped 2 variables (sex, year)## # A tibble: 344 × 6\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 1 more variable: body_mass_g <int>\n#select bill_length_mm & bill_depth_mm\" \npenguins |> select(starts_with(\"bill\"))## select: dropped 6 variables (species, island, flipper_length_mm, body_mass_g, sex, …)## # A tibble: 344 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # … with 341 more rows\npenguins |> select(where(is.numeric)) # No brackets on the function## select: dropped 3 variables (species, island, sex)## # A tibble: 344 × 5\n##   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n##            <dbl>         <dbl>             <int>       <int> <int>\n## 1           39.1          18.7               181        3750  2007\n## 2           39.5          17.4               186        3800  2007\n## 3           40.3          18                 195        3250  2007\n## # … with 341 more rows"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-23","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, selectall columns except yearall non-numeric columnsspecies columns ending “mm”","code":"# hint 1\npenguins |> \n  select(-___)\n\n# hint 2\n?where\n\n# hint 3\n?ends_with"},{"path":"working-with-single-tables-in-dplyr.html","id":"renaming-columns-with-rename","chapter":"7 Working with single tables in dplyr","heading":"7.3 Renaming columns with rename","text":"can use rename() rename columnsThe syntax new_name = current_name.can also rename column selecting.\nconvenient using select() anyway.","code":"\npenguins |> rename(Species = species)## rename: renamed one variable (Species)## # A tibble: 344 × 8\n##   Species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins |> select(Species = species)## select: renamed one variable (Species) and dropped 7 variables## # A tibble: 344 × 1\n##   Species\n##   <fct>  \n## 1 Adelie \n## 2 Adelie \n## 3 Adelie \n## # … with 341 more rows"},{"path":"working-with-single-tables-in-dplyr.html","id":"moving-columns-with-relocate","chapter":"7 Working with single tables in dplyr","heading":"7.4 Moving columns with relocate()","text":"Sometimes useful reorder columns.\nnever necessary data analysis plotting, can needed making table presentation.default move named column first, ..arguments let move column position.","code":"\npenguins |> relocate(island)## relocate: columns reordered (island, species, bill_length_mm, bill_depth_mm, flipper_length_mm, …)## # A tibble: 344 × 8\n##   island    species bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>     <fct>            <dbl>         <dbl>             <int>\n## 1 Torgersen Adelie            39.1          18.7               181\n## 2 Torgersen Adelie            39.5          17.4               186\n## 3 Torgersen Adelie            40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"filtering-rows-with-filter","chapter":"7 Working with single tables in dplyr","heading":"7.5 Filtering rows with filter()","text":"Filtering rows meet condition common task.example, filter rows penguins bill length greater 40 mm, can useThis filter row condition TRUE.base R equivalent isGenerally, filter makes easier understand, especially complex criteria.tests include== exactly equals. Often bad idea use numeric datanear safe function testing equality numeric data tolerance rounding errors.!= equal < less <= less equal > greater >= greater equal tois.na() filtering missing values.() filtering values range%% used want test value vector","code":"\npenguins |> filter(bill_length_mm > 40)## filter: removed 102 rows (30%), 242 rows remaining## # A tibble: 242 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           40.3          18                 195\n## 2 Adelie  Torgersen           42            20.2               190\n## 3 Adelie  Torgersen           41.1          17.6               182\n## # … with 239 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins[penguins$bill_length_mm > 40, ]## # A tibble: 244 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           40.3          18                 195\n## 2 <NA>    <NA>                NA            NA                  NA\n## 3 Adelie  Torgersen           42            20.2               190\n## # … with 241 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\nsqrt(2) ^ 2 == 2 # should be true, but rounding errors ## [1] FALSE\nsqrt(2) ^ 2 - 2 # the difference## [1] 4.440892e-16\nnear(sqrt(2) ^ 2, 2) # safe alternative## [1] TRUE\npenguins |> \n  filter(species %in% c(\"Adelie\", \"Chinstrap\"))## filter: removed 124 rows (36%), 220 rows remaining## # A tibble: 220 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 217 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\n#equivalent to \npenguins |> \n  filter(species == \"Adelie\" | species == \"Chinstrap\") # with many alternatives, this gets long## filter: removed 124 rows (36%), 220 rows remaining## # A tibble: 220 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 217 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"filtering-on-multiple-criteria","chapter":"7 Working with single tables in dplyr","heading":"7.5.1 Filtering on multiple criteria","text":"want filter multiple criteria, need decide whether want criteria TRUE (Boolean logic), one TRUE (Boolean logic).want criteria TRUE, can separate comma (& want explicit).want rows criteria TRUE, can separate |.can negate criterion putting ! front .\nfilter rows bills longer 40 mm can useOf course, example, also use <= test.","code":"\npenguins |> \n  filter(bill_length_mm > 40, bill_depth_mm > 18)## filter: removed 263 rows (76%), 81 rows remaining## # A tibble: 81 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           42            20.2               190\n## 2 Adelie  Torgersen           42.5          20.7               197\n## 3 Adelie  Torgersen           46            21.5               194\n## # … with 78 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins |> \n  filter(bill_length_mm > 40 | bill_depth_mm > 18)## filter: removed 53 rows (15%), 291 rows remaining## # A tibble: 291 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           40.3          18                 195\n## 3 Adelie  Torgersen           36.7          19.3               193\n## # … with 288 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins |> filter(!bill_length_mm > 40)## filter: removed 244 rows (71%), 100 rows remaining## # A tibble: 100 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           36.7          19.3               193\n## # … with 97 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"common-errors","chapter":"7 Working with single tables in dplyr","heading":"7.5.2 Common errors","text":"commonest error use single = rather ==.\nlatter test equality.\n, error message quite helpful.Another common error forget quote strings.","code":"\npenguins |> filter(species = \"Chinstrap\")## Error: Problem with `filter()` input `..1`.\n## x Input `..1` is named.\n## ℹ This usually means that you've used `=` instead of `==`.\n## ℹ Did you mean `species == \"Chinstrap\"`?\npenguins |> filter(species == Chinstrap)## Error: Problem with `filter()` input `..1`.\n## ℹ Input `..1` is `species == Chinstrap`.\n## x object 'Chinstrap' not found"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-24","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, filterGentoo penguinsGentoo Adelie penguinspenguins mass greater equal 5000gpenguins bill length 45 50 mmGentoo penguins Dream Island","code":"#hint 1\npenguins |> filter(___ = ___)\n\n#hint 2\n?`%in%`\n\n#hint 3\npenguins |> filter(___ >= ___)\n\n#hint 4\n?between\n\n#hint 5\n?`!`"},{"path":"working-with-single-tables-in-dplyr.html","id":"slicing-the-data-with-slice","chapter":"7 Working with single tables in dplyr","heading":"7.6 Slicing the data with slice()","text":"Sometimes useful extract rows row number.can use negative numbers remove rows.\ncareful using slice() data change, different rows may returned.","code":"\npenguins |> slice(3:7)## slice: removed 339 rows (99%), 5 rows remaining## # A tibble: 5 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           40.3          18                 195\n## 2 Adelie  Torgersen           NA            NA                  NA\n## 3 Adelie  Torgersen           36.7          19.3               193\n## 4 Adelie  Torgersen           39.3          20.6               190\n## 5 Adelie  Torgersen           38.9          17.8               181\n## # … with 3 more variables: body_mass_g <int>, sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"distinct-rows-with-distinct","chapter":"7 Working with single tables in dplyr","heading":"7.7 Distinct rows with distinct()","text":"duplicates data, can remove distinct().\ndistinct() extra arguments remove duplicate rows.interested columns, can supply names columns.columns removed unless argument .keep_all = TRUE used.","code":"\npenguins |> distinct()## distinct: no rows removed## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins |> distinct(island)## distinct: removed 341 rows (99%), 3 rows remaining## # A tibble: 3 × 1\n##   island   \n##   <fct>    \n## 1 Torgersen\n## 2 Biscoe   \n## 3 Dream"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-25","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, find distinct values ofspeciesspecies, island sex","code":"penguins |> distinct(___, ___)"},{"path":"working-with-single-tables-in-dplyr.html","id":"random-rows","chapter":"7 Working with single tables in dplyr","heading":"7.8 Random rows","text":"Sometimes want sample rows random data.frame.\ncan done slice_sample().\ncan either sample constant n rows constant fraction rows depending whether n prop argument used.","code":"\npenguins |> slice_sample(n = 10)## slice_sample: removed 334 rows (97%), 10 rows remaining## # A tibble: 10 × 8\n##    species   island    bill_length_mm bill_depth_mm flipper_length_mm\n##    <fct>     <fct>              <dbl>         <dbl>             <int>\n##  1 Gentoo    Biscoe              NA            NA                  NA\n##  2 Gentoo    Biscoe              55.1          16                 230\n##  3 Chinstrap Dream               52.2          18.8               197\n##  4 Adelie    Torgersen           36.7          18.8               187\n##  5 Chinstrap Dream               50.6          19.4               193\n##  6 Adelie    Torgersen           39            17.1               191\n##  7 Adelie    Dream               37.8          18.1               193\n##  8 Adelie    Biscoe              37.7          16                 183\n##  9 Gentoo    Biscoe              50.5          15.9               222\n## 10 Adelie    Torgersen           38.7          19                 195\n## # … with 3 more variables: body_mass_g <int>, sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"mutating-and-adding-columns-with-mutate","chapter":"7 Working with single tables in dplyr","heading":"7.9 Mutating and adding columns with mutate","text":"function mutate() can add new column replace existing one.make new column called body_mass_kg can useThere lots functions useful use mutate.\nfunction returns either single value many values data can used.mutate() useful cleaning data.See text manipulation tutorial cleaning text stringr package.See date time tutorial cleaning dates times lubridate package.","code":"\npenguins |> \n  mutate(body_mass_kg = body_mass_g / 1000)## mutate: new variable 'body_mass_kg' (double) with 95 unique values and 1% NA## # A tibble: 344 × 9\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 4 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>, body_mass_kg <dbl>"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-26","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data,convert flipper length cmadd column ratio bill width length","code":"# hint 1\npenguins |> \n  mutate(___ = ___)"},{"path":"working-with-single-tables-in-dplyr.html","id":"summarising-data-with-summarise","chapter":"7 Working with single tables in dplyr","heading":"7.10 Summarising data with summarise()","text":"summarise() lets us summarise data.\ncan use want calculate summary statistic data.\nRemember separate arguments comma.columns created summarise() grouping columns (see ) kept.","code":"\npenguins |> summarise(\n  flipper_len_mean = mean(flipper_length_mm, na.rm = TRUE), \n  flipper_len_sd = sd(flipper_length_mm, na.rm = TRUE)\n  )## summarise: now one row and 2 columns, ungrouped## # A tibble: 1 × 2\n##   flipper_len_mean flipper_len_sd\n##              <dbl>          <dbl>\n## 1             201.           14.1"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-27","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, findthe maximum minimum bill length","code":"penguins |> \n  summarise(___ = ___(___))"},{"path":"working-with-single-tables-in-dplyr.html","id":"summarising-multiple-columns","chapter":"7 Working with single tables in dplyr","heading":"7.10.1 Summarising multiple columns","text":"Sometimes want summarise multiple columns time.\ncan done across() helper function.\nacross() needs told columns process function functions use.can also use across() mutate() mutate several columns time.","code":"\npenguins |>\n   summarise(across(c(bill_length_mm, bill_depth_mm), .fns = mean, na.rm = TRUE))## summarise: now one row and 2 columns, ungrouped## # A tibble: 1 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           43.9          17.2\n#using a list of functions\npenguins |>\n  summarise(across(.cols = starts_with(\"bill\"), .fns = list(sd = sd, mean = mean), na.rm = TRUE))## summarise: now one row and 4 columns, ungrouped## # A tibble: 1 × 4\n##   bill_length_mm_sd bill_length_mm_m… bill_depth_mm_sd bill_depth_mm_m…\n##               <dbl>             <dbl>            <dbl>            <dbl>\n## 1              5.46              43.9             1.97             17.2"},{"path":"working-with-single-tables-in-dplyr.html","id":"grouping-data-with-group_by","chapter":"7 Working with single tables in dplyr","heading":"7.11 Grouping data with group_by","text":"group_by() changes way many dplyr functions work.\nInstead working entire dataset, now work group dataTo find mean flipper length species, need group_by() species summarise().Grouped data can ungrouped ungroup().\ncan help prevent surprises!","code":"\npenguins |> \n  group_by(species) |> \n  summarise(mean_flipper_length = mean(flipper_length_mm))## group_by: one grouping variable (species)## summarise: now 3 rows and 2 columns, ungrouped## # A tibble: 3 × 2\n##   species   mean_flipper_length\n##   <fct>                   <dbl>\n## 1 Adelie                    NA \n## 2 Chinstrap                196.\n## 3 Gentoo                    NA"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-28","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, findthe maximum minimum bill depth species","code":"penguins |> \n  group_by(___)\n  summarise(___ =  ___(___))"},{"path":"working-with-single-tables-in-dplyr.html","id":"sorting-with-arrange","chapter":"7 Working with single tables in dplyr","heading":"7.12 Sorting with arrange()","text":"sort data frame one variables can use arrange().sort smallest first.\nreverse sort order, use desc()","code":"\npenguins |> arrange(bill_length_mm, bill_depth_mm)## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Dream               32.1          15.5               188\n## 2 Adelie  Dream               33.1          16.1               178\n## 3 Adelie  Torgersen           33.5          19                 190\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>\npenguins |> arrange(desc(bill_length_mm), desc(bill_depth_mm))## # A tibble: 344 × 8\n##   species   island bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>     <fct>           <dbl>         <dbl>             <int>\n## 1 Gentoo    Biscoe           59.6          17                 230\n## 2 Chinstrap Dream            58            17.8               181\n## 3 Gentoo    Biscoe           55.9          17                 228\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-29","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"Sort penguins data bybody massisland body mass, largest birds first","code":"# hint 1\npenguins |> \n  arrange(___, ___)\n\n# hint 2\n?desc"},{"path":"working-with-single-tables-in-dplyr.html","id":"counting-rows-with-count-and-n","chapter":"7 Working with single tables in dplyr","heading":"7.13 Counting rows with count() and n()","text":"function n can count many rows group (entire data frame grouped).\ncan used either mutate() summarise().count()count() concise, group_by() summarise() useful need calculate variables (example mean standard deviation).","code":"\npenguins |> \n  group_by(species) |> \n  summarise(n = n())## group_by: one grouping variable (species)## summarise: now 3 rows and 2 columns, ungrouped## # A tibble: 3 × 2\n##   species       n\n##   <fct>     <int>\n## 1 Adelie      152\n## 2 Chinstrap    68\n## 3 Gentoo      124\npenguins |> \n  count(species)## count: now 3 rows and 2 columns, ungrouped## # A tibble: 3 × 2\n##   species       n\n##   <fct>     <int>\n## 1 Adelie      152\n## 2 Chinstrap    68\n## 3 Gentoo      124"},{"path":"working-with-single-tables-in-dplyr.html","id":"exercise-30","chapter":"7 Working with single tables in dplyr","heading":"Exercise","text":"penguins data, findhow many penguins specieshow many penguins species island","code":"penguins |> \n  count(___, ___)\n\n# or\npenguins |> \n  group_by(___) |> \n  summarise(___ = n())"},{"path":"working-with-single-tables-in-dplyr.html","id":"common-problems","chapter":"7 Working with single tables in dplyr","heading":"7.14 Common problems","text":"","code":""},{"path":"working-with-single-tables-in-dplyr.html","id":"non-standard-names","chapter":"7 Working with single tables in dplyr","heading":"7.14.1 Non standard names","text":"Ideally column names follow standard rules naming objects R - UPPER lower case letters, numbers, “.” \"_\" first character letter (dot want invisible object).\nSometimes import data, non-standard names spaces extra characters.\nneed refer column name doesn’t follow rules, need enclose back-ticks.sometimes best rename columns make easier refer .\njanitor::clean_names() efficient making easy--use names.","code":"\ndf <- tibble(`Region/Country` = \"Norway\", value = 42)\ndf## # A tibble: 1 × 2\n##   `Region/Country` value\n##   <chr>            <dbl>\n## 1 Norway              42\ndf |> rename(region_country = `Region/Country`)## rename: renamed one variable (region_country)## # A tibble: 1 × 2\n##   region_country value\n##   <chr>          <dbl>\n## 1 Norway            42"},{"path":"working-with-single-tables-in-dplyr.html","id":"resources","chapter":"7 Working with single tables in dplyr","heading":"7.15 Resources","text":"stat545R data science (Online copy book)dplyr cheatsheet","code":""},{"path":"working-with-single-tables-in-dplyr.html","id":"contributors-4","chapter":"7 Working with single tables in dplyr","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"working-with-multiple-tables-in-dplyr.html","id":"working-with-multiple-tables-in-dplyr","chapter":"8 Working with multiple tables in dplyr","heading":"8 Working with multiple tables in dplyr","text":"dplyr functions looked far work single data frame.\nchapter introduces joins, work pair data frames least one identifying variable common, bind_* functions bind two data frames together.","code":""},{"path":"working-with-multiple-tables-in-dplyr.html","id":"merging-data-frames-with-mutating-joins","chapter":"8 Working with multiple tables in dplyr","heading":"8.1 Merging data frames with mutating joins","text":"Mutating joins combine two data frames matching rows according one identifying variables data frames.commonly used mutating join left join.\nLeft joins take rows first data set, rows second data frame values identifying variable match first (Fig. 8.1).\nFigure 8.1: Left join. coloured column contains identifiers.\nduplicate values identifying column, (Fig. 8.2) causes matching rows duplicated.\nnumber rows result increases expecting , can indicate identifier unique.\nFigure 8.2: Left join. coloured column contains identifiers.\nLeft joins implemented dplyr left_join().Let use left_join() add location island penguin data set.first two arguments left_join() data frames, third argument tells join column make join .\n, joining single column name data frames.\npossible join multiple columns columns different names dataset.three four islands penguin_islands data penguins data set.\nDifferent variants mutating joins treat different ways.left_join() takes rows first (left) data frame matching rows second (right).right_join() opposite left_join(), taking rows second (right) data frame matching rows first.inner_join() take rows match data frames.full_join() take rows data frames.cases, missing values given NA.","code":"\n# location of the three islands in the Palmer Archipelago\n\npenguin_islands <- tribble(\n  ~ island, ~ Latitude, ~ Longitude, # tribble is a convenient way to make small datasets\n  \"Torgersen\", -64.766667,-64.083333,\n  \"Biscoe\", -64.818569, -63.775636,\n  #\"Dream\",  -64.733333, -64.233333, # Dream data missing\n  \"Alpha\", -64.316667, -63)\n\npenguin_islands## # A tibble: 3 × 3\n##   island    Latitude Longitude\n##   <chr>        <dbl>     <dbl>\n## 1 Torgersen    -64.8     -64.1\n## 2 Biscoe       -64.8     -63.8\n## 3 Alpha        -64.3     -63\npenguin_small <- penguins |> \n  group_by(species) |> \n  slice(1:2) # small version of data for easy viewing## group_by: one grouping variable (species)## slice (grouped): removed 338 rows (98%), 6 rows remaining\nleft_join(penguin_small, penguin_islands, by = \"island\")## left_join: added 2 columns (Latitude, Longitude)##            > rows only in x   2##            > rows only in y  (1)##            > matched rows     4##            >                 ===##            > rows total       6## # A tibble: 6 × 10\n## # Groups:   species [3]\n##   species   island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>     <chr>              <dbl>         <dbl>             <int>\n## 1 Adelie    Torgersen           39.1          18.7               181\n## 2 Adelie    Torgersen           39.5          17.4               186\n## 3 Chinstrap Dream               46.5          17.9               192\n## 4 Chinstrap Dream               50            19.5               196\n## 5 Gentoo    Biscoe              46.1          13.2               211\n## 6 Gentoo    Biscoe              50            16.3               230\n## # … with 5 more variables: body_mass_g <int>, sex <fct>, year <int>,\n## #   Latitude <dbl>, Longitude <dbl>"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"exercise-31","chapter":"8 Working with multiple tables in dplyr","heading":"Exercise","text":"Join penguins penguin_islands datasets toget data penguin island data","code":"inner_join(___, ___, by = ___)"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"all-possible-combinations","chapter":"8 Working with multiple tables in dplyr","heading":"8.2 All possible combinations","text":"mutating joins described give rows data frame identifying variables match.\nSometimes want possible combinations rows.\nknown Cartesian product can generated crosing().\ncrosing() works data frames well vectors shown .","code":"\ncrossing(a = letters[1:3], b = 1:2)## # A tibble: 6 × 2\n##   a         b\n##   <chr> <int>\n## 1 a         1\n## 2 a         2\n## 3 b         1\n## 4 b         2\n## 5 c         1\n## 6 c         2"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"filtering-joins","chapter":"8 Working with multiple tables in dplyr","heading":"8.3 Filtering joins","text":"Filtering joins let filter one dataset according whether rows match second dataset.semi_join() finds rows matching row\nFigure 8.3: Left join. coloured column contains identifiers.\nanti_join() finds rows matching row\nFigure 8.4: Left join. coloured column contains identifiers.\ncan useful cleaning data find problems.","code":"\npenguin_islands |> \n  semi_join(penguins, by = \"island\")## semi_join: added no columns##            > rows only in x  (  1)##            > rows only in y  (124)##            > matched rows       2##            >                 =====##            > rows total         2## # A tibble: 2 × 3\n##   island    Latitude Longitude\n##   <chr>        <dbl>     <dbl>\n## 1 Torgersen    -64.8     -64.1\n## 2 Biscoe       -64.8     -63.8\npenguin_islands |> \n  anti_join(penguins, by = \"island\")## anti_join: added no columns##            > rows only in x     1##            > rows only in y  (124)##            > matched rows    (  2)##            >                 =====##            > rows total         1## # A tibble: 1 × 3\n##   island Latitude Longitude\n##   <chr>     <dbl>     <dbl>\n## 1 Alpha     -64.3       -63"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"binding-data-frames-together","chapter":"8 Working with multiple tables in dplyr","heading":"8.4 Binding data frames together","text":"two data frames want combine can one bind_* functions.","code":""},{"path":"working-with-multiple-tables-in-dplyr.html","id":"more-columns---bind_cols","chapter":"8 Working with multiple tables in dplyr","heading":"8.4.1 More columns - bind_cols()","text":"data frames contain information observations, can combined bind_cols().data1, data2, data3 can combined make one data frame many columnsbind_cols() expects row order datasets, check .\nchecks number rows data frame.\npossible, use join instead.","code":"\nbind_cols(data1, data2, data3)"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"more-rows---bind_rows","chapter":"8 Working with multiple tables in dplyr","heading":"8.4.2 More rows - bind_rows()","text":"data frame contain observations (rows), typically least columns, can combined bind_rows().\nuseful , example, data two years need combining.One feature bind_rows() find useful .id argument makes extra column identifier.","code":"\nsvalbard_islands <-  tribble( ~ island, ~ Latitude, ~ Longitude,\n   \"Nordaustlandet\", 79.558405, 24.017351,\n \"Prins Karls Forland\", 78.554090, 11.256545)\n\nbind_rows(\n  Palmer = penguin_islands, \n  Svalbard = svalbard_islands, \n  .id = \"Archipelago\")## # A tibble: 5 × 4\n##   Archipelago island              Latitude Longitude\n##   <chr>       <chr>                  <dbl>     <dbl>\n## 1 Palmer      Torgersen              -64.8     -64.1\n## 2 Palmer      Biscoe                 -64.8     -63.8\n## 3 Palmer      Alpha                  -64.3     -63  \n## 4 Svalbard    Nordaustlandet          79.6      24.0\n## 5 Svalbard    Prins Karls Forland     78.6      11.3"},{"path":"working-with-multiple-tables-in-dplyr.html","id":"contributors-5","chapter":"8 Working with multiple tables in dplyr","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"why-is-data-visualization-important.html","id":"why-is-data-visualization-important","chapter":"10 Why is data visualization important?","heading":"10 Why is data visualization important?","text":"Data core science scientist collects, analyses, presents reports data daily bases.\nData visualization important part scientific work needs clear, attractive convincing [@Wilke2019-qp].\ncleverly constructed data vizualisation can summarise condense large amount information help communicate results audience.First, one needs choose best type vizualization, .e. figure, map table, present data.\nSecond, every figure good figure.\ndata needs presented clear main message needs convincing.\nFinally, many elements like colour, text size, linetype can used highlight important information.\ntakes skills succeed data vizualization, right place learn .chapter data visualization focuses basics vizualize data communicate scientific results.\nFigures tool vizualize data also touch upon types, maps tables.\nalso give advice make “good” figures tables, takes write figure table caption, best present data report.","code":""},{"path":"why-is-data-visualization-important.html","id":"data-visualisation-in-r","chapter":"10 Why is data visualization important?","heading":"10.1 Data visualisation in R","text":"least three major systems making figures R.Base RThe lattice packageThe ggplot2 packageWe focus tutorial ggplot2 [@Wickham2011-yw] associated R packages, generally easier make nice figures ggplot2 others.\nuse ggplot2 figures papers.ggplot2 system ‘declaratively’ creating graphics, based “Grammar Graphics”.\nprovide data, tell ‘ggplot2’ map variables aesthetics (x, y, colour, etc), graphical elements use, takes care details.","code":""},{"path":"why-is-data-visualization-important.html","id":"contributors-6","chapter":"10 Why is data visualization important?","heading":"Contributors","text":"Aud HalbritterRichard J. Telford","code":""},{"path":"getting-started-with-ggplot.html","id":"getting-started-with-ggplot","chapter":"11 Getting started with ggplot","heading":"11 Getting started with ggplot","text":"","code":""},{"path":"getting-started-with-ggplot.html","id":"before-you-start","chapter":"11 Getting started with ggplot","heading":"11.0.1 Before you start","text":"need befamiliar different types data (continuous, categorical)able handle tibblesknow install package","code":""},{"path":"getting-started-with-ggplot.html","id":"install-the-ggplot2-package","chapter":"11 Getting started with ggplot","heading":"11.1 Install the ggplot2 package","text":"ggplot2 part tidyverse already installed tidyverse, already ggplot2 installed.\n, see section installing tidyverse.activate ggplot2, can useBut time can use library(tidyverse).","code":"\nlibrary(ggplot2)"},{"path":"getting-started-with-ggplot.html","id":"the-basics","chapter":"11 Getting started with ggplot","heading":"11.2 The basics","text":"ggplot based grammar graphics, terminology describing components figure.Let us look terms.produce figure plot, take data values use elements like dots, squares, lines, colour convert data visual graphic.\nmany different ways make figure, rules apply general.\nplot always built data, number components called aestetics, geometry scales.\ndifferent components combined make figure","code":""},{"path":"getting-started-with-ggplot.html","id":"the-code","chapter":"11 Getting started with ggplot","heading":"11.3 The code","text":"basic code scatterplot looks something like :main function ggplot() used define data aesthetics.\ndata data frame tibble containing variables produce figure.\nmapping uses aes() describe variables mapped onto aestetics, x y location colour.\nEvery component plot added +.\nmakes code easier read put new line + (+ must go end line, start).\nelements include graphical elements display data, usually created geom_*() function, labels created labs(), themes change non-data elements plot themes().can think different layers put top see 11.1.\nFigure 11.1: Visualization ggplots built.\n","code":"\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(x = \"Body mass, g\", y = \"Bill length, mm\", colour = \"Species\") +\n  theme_bw()"},{"path":"getting-started-with-ggplot.html","id":"the-palmer-penguin-example","chapter":"11 Getting started with ggplot","heading":"11.4 The Palmer Penguin Example","text":"mostly work Palmer Penguin data set [@Horst2020-jy].\nunfamiliar dataset look webpage: https://github.com/allisonhorst/palmerpenguinsTo install dataset run code:datasets contains data 344 individuals three species penguins, collected tree islands Palmer Archipelago, Antarctica.\nincludes several morphological traits like bill length depth, flipper length, body mass, sex.","code":"\ninstall.packages(\"palmerpenguins\")\n\ndata(penguin, package = 'palmerpenguins')\npenguins## # A tibble: 344 × 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>              <dbl>         <dbl>             <int>\n## 1 Adelie  Torgersen           39.1          18.7               181\n## 2 Adelie  Torgersen           39.5          17.4               186\n## 3 Adelie  Torgersen           40.3          18                 195\n## # … with 341 more rows, and 3 more variables: body_mass_g <int>,\n## #   sex <fct>, year <int>"},{"path":"getting-started-with-ggplot.html","id":"building-a-ggplot-figure","chapter":"11 Getting started with ggplot","heading":"11.5 Building a ggplot figure","text":"Now describe different components ggplot made .","code":""},{"path":"getting-started-with-ggplot.html","id":"data","chapter":"11 Getting started with ggplot","heading":"11.5.1 Data","text":"make figure use function ggplot().\nfirst element function data object containing variables need make figure\nGenerally, advisable data long format.penguin example look like:ggplot function produce empty plot, show data.","code":"\nggplot(data = penguins)"},{"path":"getting-started-with-ggplot.html","id":"aestetics","chapter":"11 Getting started with ggplot","heading":"11.5.2 Aestetics","text":"second element ggplot() function called aestetics.\ndifferent elements aesthetics used display data.\nimportant element position describes location data plot, usually x y.\nimportant elements shape, fill, size, colour line type, describe data presented plot.penguin example, want plot bill length bill depth, choose two variables x y.\nsecond aesthetic chosen define species colour.One thing might confusing argument colour allows variable, example colour = species colour = island.\nexample colour = \"red\" work.\nwant choose specific colour, done geom scales (see ).Now ggplot function added x y axis plot.\n","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species))"},{"path":"getting-started-with-ggplot.html","id":"geoms","chapter":"11 Getting started with ggplot","heading":"11.5.3 Geoms","text":"plot actual data, need geom function.\nmany different geom functions can choose.\nSee chapter 3. different plot types overview., use geom_point(), displays data points (scatterplot).\nAlso, legend automatically plotted right side.come back previous point, want make points red can done geom_point() function using colour = \"red\". Note time choseshape = species`, another aesthetics use different symbols three species.","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point()\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, shape = species)) +\n  geom_point(colour = \"red\")"},{"path":"getting-started-with-ggplot.html","id":"scales","chapter":"11 Getting started with ggplot","heading":"11.5.4 Scales","text":"Scales name says scaling, converting, inverting.\nscales can manipulate labels, breaks, transformations palettes.\nwords can manually change axis text, labels, ticks, add breaks, make transformations, manipulate aesthetics like colour, shape, linetype.just small selection show possible.\ncan log transform y axis, change axis titles, manipulate colours.","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, group = species)) +\n  geom_point() +\n  scale_y_log10(name = \"Log bill length in mm\") +\n  scale_x_continuous(name = \"Bill depth in mm\") +\n  scale_color_viridis_d()"},{"path":"getting-started-with-ggplot.html","id":"labs","chapter":"11 Getting started with ggplot","heading":"11.5.5 Labs","text":"labs() useful function modify axis labels, titles legend.axis titles can renamed, title tag can added.","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, group = species)) +\n  geom_point() +\n  labs(x = \"Bill depth in mm\", y = \"Bill length in mm\", title = \"Bill length vs. depth in penguins\", tag = \"A\")"},{"path":"getting-started-with-ggplot.html","id":"stats","chapter":"11 Getting started with ggplot","heading":"11.5.6 Stats","text":"Stats statistical transformations summarize objects data different ways.\ncan add means confidence intervals top data.","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, group = species)) +\n  geom_point() +\n  stat_summary(fun = \"mean\", colour = \"red\", size = 1)"},{"path":"getting-started-with-ggplot.html","id":"facets","chapter":"11 Getting started with ggplot","heading":"11.5.7 Facets","text":"Facets can used divide data different subplots, can enhance readability figure.penguin example can show 3 different panels island.\nway plotting makes easy see penguin species occurs island.","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point() +\n  facet_wrap(~ island)"},{"path":"getting-started-with-ggplot.html","id":"themes","chapter":"11 Getting started with ggplot","heading":"11.5.8 Themes","text":"Themes powerful element controls look plot.\nthemes can change, remove add background, gridlines, ticks, text, text size much .example, change axis tile text size, colour axis text change theme theme_minimal().","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point() +\n  facet_wrap(~ island) +\n  theme_minimal() +\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(colour = \"purple\"))"},{"path":"getting-started-with-ggplot.html","id":"a-ggplots-are-built-with-layers","chapter":"11 Getting started with ggplot","heading":"11.5.9 A ggplots are built with layers","text":"can see, almost limits can ggplot.\ntrick know element changes remember names (.e. axis.text axis.ticks etc.).order code different components plot often matter (although discussions around topic, see ).\ncan imagine different components (geom, scale, stats) plot different layers plotted top .\nUsually, order important, unless something needs plotted top something else.\neasy spot see plot.examle, want plot data mean values top, way round.\nSee , red points showing means disapeard. , things want top plotted .","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  stat_summary(fun = \"mean\", colour = \"red\", size = 2) +\n  geom_boxplot()"},{"path":"getting-started-with-ggplot.html","id":"common-mistakes","chapter":"11 Getting started with ggplot","heading":"11.6 Common mistakes","text":"beginning make mistakes result error messages, warnings incomplete plots.\nmistakes often occur one layers missing, + forgotten end line, due typo, data elements forgotten.\nLet us look common mistakes ggplot displayed .\n","code":""},{"path":"getting-started-with-ggplot.html","id":"no-data","chapter":"11 Getting started with ggplot","heading":"11.6.1 No data","text":"forget specify data ggplot able make plot get following error message:","code":"\nggplot(aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point()## Error: `data` must be a data frame, or other object coercible by `fortify()`, not an S3 object with class uneval.\n## Did you accidentally pass `aes()` to the `data` argument?"},{"path":"getting-started-with-ggplot.html","id":"missing-aesthetics","chapter":"11 Getting started with ggplot","heading":"11.6.2 Missing aesthetics","text":"forget define aesthetics aes() also get error message empty image:","code":"\nggplot(data = penguins) +\n  geom_point()## Error: geom_point requires the following missing aesthetics: x and y"},{"path":"getting-started-with-ggplot.html","id":"missing-geometry","chapter":"11 Getting started with ggplot","heading":"11.6.3 Missing geometry","text":"geometry missing geom_point(), ggplot draw empty plot, axis labels, show data, defined plot data.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species))"},{"path":"getting-started-with-ggplot.html","id":"whats-next-2","chapter":"11 Getting started with ggplot","heading":"11.6.4 What’s next?","text":"Next, show essential elements plot (title, axes, legend, …) can learn change adapt elements.\ncan learn common plots types commonly used.","code":""},{"path":"getting-started-with-ggplot.html","id":"before-we-start-3","chapter":"11 Getting started with ggplot","heading":"11.6.5 Before we start","text":"Data types\nFamiliar ggplot (chapter 1 2)\nUncertainty things…","code":""},{"path":"types-of-vizualization.html","id":"types-of-vizualization","chapter":"12 Types of vizualization","heading":"12 Types of vizualization","text":"type data define type plot can make.\nexample continuous data can make scatter plot, need categorical data make boxplot.\nnext step think want show figure.\nimportant elements vizualise., present number common plot types related different types data.\ncode make plot always shown plot.uncertain, guide help choose plot type.ggplot, geom_xxx() function defines type plot drawn.\nfirst example, use geom_point(), makes dots also called scatterplot.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, shape = species)) +\n  geom_point(size = 2) +\n  labs(title = \"Penguin\", x = \"Bill Length  in mm\", y = \"Bill depth in mm\") +\n  scale_color_viridis_d()"},{"path":"types-of-vizualization.html","id":"continous-data","chapter":"12 Types of vizualization","heading":"12.1 Continous data","text":"Continuous data often visualized using scatterplot boxplot.\nheatmap can also used (see ).","code":""},{"path":"types-of-vizualization.html","id":"scatterplot","chapter":"12 Types of vizualization","heading":"12.1.1 Scatterplot","text":"scatterplot made using function geom_point().","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, shape = species)) +\n  geom_point(size = 2) +\n  labs(x = \"Bill Length  in mm\", y = \"Bill depth in mm\") +\n  scale_color_viridis_d()"},{"path":"types-of-vizualization.html","id":"boxplot","chapter":"12 Types of vizualization","heading":"12.1.2 Boxplot","text":"Similarly, boxplot uses function geom_boxplot().boxplot show?\nbold line middle box shows median.\nHalf data points larger half lower median.box represents 50% quartile.\nBasically, half observations fall box half outside.wiskers side box show 25% upper lower quartile.Outliers shown points wiskers.details boxplots see .interprete boxplot\nboxplots show distribution data.\ntall box means data variable, short box means data points similar median.Boxplots make easy compare different groups.\nboxplots placed different heights, means groups compared different.\nboxplot however test, gives indication groups differ .\n## {.toc-ignore}","code":"\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = species)) +\n  geom_boxplot() +\n  labs(x = \"\", y = \"Bill Length  in mm\") +\n  scale_fill_viridis_d()"},{"path":"types-of-vizualization.html","id":"categorical-data-factors-and-groups","chapter":"12 Types of vizualization","heading":"12.2 Categorical data, factors and groups","text":"Categorical data, factors groups often vizualized using boxplots, types plots like scatterplots possible.\ncan use fill, colour, size, shape linetype distinguish different groups plot.\nAnother option divide plot subplots using facet function.","code":""},{"path":"types-of-vizualization.html","id":"scatterplot-1","chapter":"12 Types of vizualization","heading":"12.2.1 Scatterplot","text":"Shape colour can used show different groups.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species, shape = species)) +\n  geom_point(size = 2) +\n  labs(x = \"Bill Length  in mm\", y = \"Bill depth in mm\") +\n  scale_color_viridis_d()"},{"path":"types-of-vizualization.html","id":"boxplot-1","chapter":"12 Types of vizualization","heading":"12.2.2 Boxplot","text":"Boxplots commonly used show factors groups.","code":"\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = species)) +\n  geom_boxplot() +\n  labs(x = \"\", y = \"Bill Length  in mm\") +\n  scale_fill_viridis_d()"},{"path":"types-of-vizualization.html","id":"distributions","chapter":"12 Types of vizualization","heading":"12.3 Distributions","text":"Histograms density plots commonly used plot distributions.\nvisualize several densities time, boxplots, violin sina plot can useful.\nViolin sina plots extension boxplots.\nalso show actual distribution data data iteslf.\nAnother type plots rigdeline plots.","code":""},{"path":"types-of-vizualization.html","id":"histogram","chapter":"12 Types of vizualization","heading":"12.3.1 Histogram","text":"Histograms display counts size class using bars.\nargument bins can used define many size classes used.","code":"\nggplot(data = penguins, aes(x = bill_length_mm)) +\n  geom_histogram(bins = 50) +\n  labs(x = \"Bill Length  in mm\")"},{"path":"types-of-vizualization.html","id":"densities","chapter":"12 Types of vizualization","heading":"12.3.2 Densities","text":"Similarly histgrams, density plots show kernel desnity estimate.\nsmoothed version histogram.Densities can example coloured species show species distribution separately.\nNote added alpha = 0.5, makes fill transparent can see three distributions clearly.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, fill = species)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Bill Length  in mm\")"},{"path":"types-of-vizualization.html","id":"violin","chapter":"12 Types of vizualization","heading":"12.3.3 Violin","text":"Violin plots…","code":"\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = species)) +\n  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +\n  labs(x = \"\", y = \"Bill Length  in mm\")"},{"path":"types-of-vizualization.html","id":"sina","chapter":"12 Types of vizualization","heading":"12.3.4 Sina","text":"Sina plots ggforce package.\npackage needs installed function can used.Sina plots show data form density distribution.\ninformative way, plot violin plot data top .","code":"\nlibrary(\"ggforce\")\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, colour = species)) +\n  geom_violin() +\n  geom_sina() +\n  labs(x = \"\", y = \"Bill Length  in mm\")"},{"path":"types-of-vizualization.html","id":"proportions","chapter":"12 Types of vizualization","heading":"12.4 Proportions","text":"Proportions often displayed using barplots stacked barplots.","code":"## Error in knitr::include_graphics(\"Figures/Proportions.png\"): Cannot find the file(s): \"Figures/Proportions.png\""},{"path":"types-of-vizualization.html","id":"bars","chapter":"12 Types of vizualization","heading":"12.4.1 Bars","text":"can use either geom_col() geom_bar() create barplot.\ngeom_col makes heights bars represent values data.\ngeom_bar hand makes height bar proportional number cases group.\nusing geom_bar, must forget argument stat = \"identity\", ","code":"\nggplot(data = penguins, aes(x = species, y = bill_length_mm)) +\n  geom_col()\nggplot(data = penguins, aes(x = species, y = bill_length_mm)) +\n  geom_bar(stat = \"identity\")"},{"path":"types-of-vizualization.html","id":"stacked-bars","chapter":"12 Types of vizualization","heading":"12.4.2 Stacked bars","text":"Grouped bars\ngrouped barplot displays values, bill length three different species three years data collected.\nNote year needs factorx group, y continous variable data, fill subgroup.\ngeom_bar() argument position stat need defined.\nargument position = \"dodge\" defines position bars, next .Stacked bars\nbars can also stacked.\nbars stacked top .\nSwitch argument position = \"stack\".Proportional\ndata can also displayed proportional.\nNow, percentage subgroup represented, group bar summs 1.\nSwitch argument position = \"fill\".\n## {.toc-ignore}\n","code":"\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = factor(year))) +\n  geom_bar(position = \"dodge\", stat = \"identity\")\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = factor(year))) +\n  geom_bar(position = \"stack\", stat = \"identity\")\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = factor(year))) +\n  geom_bar(position = \"fill\", stat = \"identity\")"},{"path":"types-of-vizualization.html","id":"xy-relationships","chapter":"12 Types of vizualization","heading":"12.5 x~y relationships","text":"show relationship two continous variables, often use scatterplots.\nDensities two variables can shown using contour lines, correlations can use heatmap.","code":"## Error in knitr::include_graphics(\"Figures/XY_relationships.png\"): Cannot find the file(s): \"Figures/XY_relationships.png\""},{"path":"types-of-vizualization.html","id":"scatterplots","chapter":"12 Types of vizualization","heading":"12.5.1 Scatterplots","text":"Scatterplots commonly used plot type show relationships two continous variables.\ncan add regression line plot.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")## `geom_smooth()` using formula 'y ~ x'"},{"path":"types-of-vizualization.html","id":"d-density","chapter":"12 Types of vizualization","heading":"12.5.2 2D density","text":"Scatterplots commonly used plot type show relationships two continous variables.\ncan add regression line plot.","code":"\nggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +\n  geom_density2d()"},{"path":"types-of-vizualization.html","id":"heatmap","chapter":"12 Types of vizualization","heading":"12.5.3 Heatmap","text":"correlation calculate …Now can use function geom_tile plot data.\nNote type plot also called heat map.\n## {.toc-ignore}\n","code":"\n# Select only numeric variables and remove all NAs\npenguine_matrix <- penguins |> \n  select(bill_length_mm:body_mass_g) |> \n  filter(!is.na(bill_length_mm))## select: dropped 4 variables (species, island, sex, year)## filter: removed 2 rows (1%), 342 rows remaining\n# Calculate the correlation between all variables and rearrange the table\ncor_matrix <- cor(penguine_matrix)\n\n# rearrange\ncor_long <- cor_matrix |> \n  as.data.frame() |> \n  rownames_to_column() |> \n  pivot_longer(cols = -rowname, names_to = \"colname\", values_to = \"cor\")## pivot_longer: reorganized (bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) into (colname, cor) [was 4x5, now 16x3]\nggplot(data = cor_long, aes(x = rowname, y = colname, fill = cor)) + \n  geom_tile()"},{"path":"types-of-vizualization.html","id":"spatial-and-temporal-data","chapter":"12 Types of vizualization","heading":"12.6 Spatial and temporal data","text":"Density heat maps usful spatial data.\nAnother option maps.Temporal data, often shown lines, x axis represens time.","code":"## Error in knitr::include_graphics(\"Figures/Maps.png\"): Cannot find the file(s): \"Figures/Maps.png\""},{"path":"types-of-vizualization.html","id":"maps","chapter":"12 Types of vizualization","heading":"12.6.1 Maps","text":"Maps","code":""},{"path":"types-of-vizualization.html","id":"lines","chapter":"12 Types of vizualization","heading":"12.6.2 Lines","text":"Temporal data often plottet line plots.\nTime usually x axis.\n## {.toc-ignore}\n","code":"\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line() +\n  labs(x = \"\", y = \"Unemployment\")"},{"path":"types-of-vizualization.html","id":"uncertainty","chapter":"12 Types of vizualization","heading":"12.7 Uncertainty","text":"Errorbars often used show uncertainty data likely values\n- posterior distribbution/eye plot\n- confidence bands\n## {.toc-ignore}\n","code":""},{"path":"types-of-vizualization.html","id":"further-reading-4","chapter":"12 Types of vizualization","heading":"12.7.1 Further reading","text":"Something","code":""},{"path":"themes-1.html","id":"themes-1","chapter":"13 Themes","heading":"13 Themes","text":"Themes let customise non-data elements plot.\ncan change whole theme, update just elements.\nplot default theme.\nFigure 13.1: default theme, theme_grey()\n","code":"\nlibrary(ggplot2)\np1 <- ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point()\np1"},{"path":"themes-1.html","id":"complete-themes","chapter":"13 Themes","heading":"13.1 Complete themes","text":"can change whole theme new pre-built theme adding one theme_*() functions.\nFigure 13.2: theme_classic()\nmany pre-built themes, ggplot2, others ggthemes, cowplot, packages.\ncan also write .\nFigure 13.3: Various themes ggplot2 gthemes.\n","code":"\np1 + \n  theme_classic()"},{"path":"themes-1.html","id":"setting-the-font","chapter":"13 Themes","heading":"13.1.1 Setting the font","text":"theme_*() functions argument set base size font.\ndefault (size 11 themes) normally fine manuscripts theses, small presentations.\nIncrease 18 20 audience back auditorium can read text.\nFigure 13.4: theme_classic()\n","code":"\np1 + \n  theme_classic(base_size = 18)"},{"path":"themes-1.html","id":"setting-the-default-theme","chapter":"13 Themes","heading":"13.2 Setting the default theme","text":"making several figures want theme, can set default theme_set().\nsetup chunk R markdown documents.","code":"\ntheme_set(theme_classic())"},{"path":"themes-1.html","id":"changing-individual-elements-of-the-theme","chapter":"13 Themes","heading":"13.3 Changing individual elements of the theme","text":"Every non-data element plot can changed theme.\nexamples.","code":""},{"path":"themes-1.html","id":"rotating-axis-labels","chapter":"13 Themes","heading":"13.3.1 Rotating axis labels","text":"Sometimes long axis labels need rotating stop overlapping.Reading angled text hard work, consider alternative solutions problem, dodging axis labelsOr flipping plot.","code":"\np2 <- ggplot(penguins, aes(x = species, y = body_mass_g)) + \n  geom_boxplot()\np2\np2 + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\np2 + scale_x_discrete(guide = guide_axis(n.dodge=2))\np2 + coord_flip()"},{"path":"themes-1.html","id":"changing-the-legend-position","chapter":"13 Themes","heading":"13.3.2 Changing the legend position","text":"default, legend put right plot.\ncan moved legend.position argument theme().space, legend can moved plot giving legend.position x y coordinates relative plot (0 left bottom, 1 top right).\nUse legend.justification specify corner legend position set legend.position justify legend.legend can removed withThis remove legends.\nplot multiple legends, want keep , get control using show.legend argument geoms using guides()","code":"\np1 + theme(legend.position = \"bottom\")\np1 + \n  theme(\n    legend.position = c(x = 0.99, y = 0.01),\n    legend.justification = c(x = \"right\", y = \"bottom\"))\np1 + theme(legend.position = \"none\")"},{"path":"themes-1.html","id":"removing-an-element","chapter":"13 Themes","heading":"13.3.3 Removing an element","text":"can remove non-data elements plot setting element_blank().\nFigure 13.5: Removing gridlines element_blank()\n","code":"\np1 + theme(panel.grid = element_blank())"},{"path":"themes-1.html","id":"contributors-7","chapter":"13 Themes","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"shapes-colours-and-linetypes.html","id":"shapes-colours-and-linetypes","chapter":"14 Shapes, colours and linetypes","heading":"14 Shapes, colours and linetypes","text":"","code":""},{"path":"shapes-colours-and-linetypes.html","id":"colours-and-fill","chapter":"14 Shapes, colours and linetypes","heading":"14.1 Colours and fill","text":"colour aesthetic give colour points lines, fill aesthetic gives colour areas.\neasy forget .\nFigure 14.1: Use fill areas.\ncan set colour points lines fill areas setting geom_*() used.map variable colour aesthetic, points lines, fill aesthetics areas, ggplot give different colours/fills different values variable.\ndon’t like default colours/fills, shouldn’t colour blind friendly, can change scale_colour_*() scale_fill_*.\nFirst need decide type colour/fill scale need.first decision whether scale continuous discrete.","code":"\nggplot(penguins, aes(x = bill_length_mm, colour = species)) +\n  geom_histogram()\nggplot(penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(colour = \"purple\", fill = \"pink\")## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"shapes-colours-and-linetypes.html","id":"discrete-colourfill-scales","chapter":"14 Shapes, colours and linetypes","heading":"14.1.1 Discrete colour/fill scales","text":"Discrete scales automatically used variable mapped colour fill character factor variable.\nwant use discrete scale numeric variable, example, 0 represents Male 1 represents Female (bad idea), need coerce factor factor().\ndon’t , get error.choice three types discrete colour/fill scalesQualitative categorical variablesSequential ordinal variablesDiverging ordinal variables natural midpoint.","code":""},{"path":"shapes-colours-and-linetypes.html","id":"qualitative","chapter":"14 Shapes, colours and linetypes","heading":"14.1.2 Qualitative","text":"Qualitative palettes natural order colours.\nUse categorical variables.\npenguins dataset, species, island, sex categorical variables.can change default colours/fill either picking colours scale_colour_manual() scale_fill_manual().Picking colours can hard!Normally better use built qualitative palettes, example RColorBrewer package.\ncan use scale_colour_brewer() scale_fill_brewer()","code":"\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_density()\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_density() +\n  scale_fill_manual(values = c(Adelie = \"pink\", Chinstrap = \"purple\", Gentoo = \"green\"))\nRColorBrewer::display.brewer.all(type = \"qual\")\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_density() +\n  scale_fill_brewer(palette = \"Set1\")"},{"path":"shapes-colours-and-linetypes.html","id":"sequential","chapter":"14 Shapes, colours and linetypes","heading":"14.1.3 Sequential","text":"Sequential colour/fill scales useful ordinal variables - example, high, medium, low concentrations treatment drug.examples RColorBrewer package, can used .\nAnother example sequential colour/fill palette viridis, can used scale_fill_viridis_d().","code":"\nRColorBrewer::display.brewer.all(type = \"seq\")"},{"path":"shapes-colours-and-linetypes.html","id":"diverging","chapter":"14 Shapes, colours and linetypes","heading":"14.1.4 Diverging","text":"Diverging colour/fill scales useful ordinal variables natural midpoint, might zero, mean data.examples RColorBrewer package, can used .","code":"\nRColorBrewer::display.brewer.all(type = \"div\")"},{"path":"shapes-colours-and-linetypes.html","id":"continuous-colourfill-scales","chapter":"14 Shapes, colours and linetypes","heading":"14.1.5 Continuous colour/fill scales","text":"Continuous colour/fill scales used continuous variables.\ncan directional diverging.can make continuous colour/fill scales scale_colour_gradient() two colours choice.\nscale_fill_gradient2() make diverging scale adding mid-point colour.can better use existing colour scales.\nscale_fill_viridis_c() popular continuous scale.\ncan also use interpolated versions RColorBrewer palettes scale_fill_distiller().Continuous colour/fill scales also can binned (just histogram bins data x-axis) scale_fill_binned(), scale_fill_viridis_b()binned viridis palettes, scale_colour_fermenter() binned RColorBrewer palettes.many examples colour palettes paletteer package","code":""},{"path":"shapes-colours-and-linetypes.html","id":"colour-blind-friendly-colours","chapter":"14 Shapes, colours and linetypes","heading":"14.1.6 Colour blind friendly colours","text":"1/8 men 1/200 women colour blind.\nneed use colour fill palettes colourblind friendly.\npopular scales .\nexample, can use colorblindr package simulate figure percieved people different forms colourblindness.\nFigure 14.2: Default ggplot fill.\n\nFigure 14.3: people different types colourblindness see default colour scale.\nhopeless.\nwon’t even print well black white (shown Desaturated panel).\nLet’s try different palette.\nFigure 14.4: Viridis fill.\n\nFigure 14.5: people different types colourblindness see viridis colour scale.\nMuch better.\nAlways test colour palette colourblind friendly, use one known ok.","code":"\np3 <- ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_discrete()\np3\nlibrary(colorblindr)## Loading required package: colorspace\ncvd_grid(p3)\np3_v <- p3 + scale_fill_viridis_d()\np3_v"},{"path":"shapes-colours-and-linetypes.html","id":"shapes","chapter":"14 Shapes, colours and linetypes","heading":"14.2 Shapes","text":"can change shape points made , example, geom_point() setting shape.map discrete variable shape aesthetic, points made geom_point(), geom_pointrange(), etc different shaped points different values variable.\nMany shapes difficult distinguish small, usually best use shape colour distinguish groups.\navailable shapes.\nFigure 14.6: Shapes\nShapes 21-24 take fill colour aesthetic, whereas shapes just take colour.want change shape default shapes, use scale_shape_manual().","code":"\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(shape = 4)\nggplot(penguins, \n       aes(x = body_mass_g, y = bill_length_mm, colour = species, shape = species)) +\n  geom_point() +\n  scale_shape_manual(values = c(Adelie = 17, Chinstrap = 6, Gentoo = 16))"},{"path":"shapes-colours-and-linetypes.html","id":"linetypes","chapter":"14 Shapes, colours and linetypes","heading":"14.3 linetypes","text":"can change line types lines made , example, geom_line() setting linetype.map discrete variable linetype aesthetic, lines made geom_line, geom_path, etc different line types different values variable.\nLine types can sometimes used addition colour make easier differentiate lines.need change linetypes assigned value, can use scale_linetype_manual specify name (Fig. 14.7).\nFigure 14.7: named linetypes\nCustom linetypes can also made using eight hexadecimal digits (1-9, -F) give length lines gaps.\n\"1FFF\" draw dot followed long gap, long line, another long gap, pattern repeat.","code":"\nggplot(ChickWeight, aes(x = Time, y = weight, group = Chick, colour = Diet)) +\n  geom_line(linetype = \"dashed\")\nggplot(ChickWeight, aes(x = Time, y = weight, group = Chick, colour = Diet, linetype = Diet)) +\n  geom_line()"},{"path":"combining-plots.html","id":"combining-plots","chapter":"15 Combining plots","heading":"15 Combining plots","text":"often need combine plots make multipart figure manuscript thesis.First, check actually need combine plots use facets instead.\nTypically, use facets x-axis variable plots plots use geoms.Plots can combined using patchwork package.Start making plotsThe simplest way use patchwork + combine plots.\npatchwork try make combined figure square.\n| (side side) \\ (), can control.plot_layout gives control relative size plot whether legends combined possible.want change plots combined figure, can add ggplot2 function &.can also overlay figures, might useful show inset map.","code":"\nlibrary(patchwork)\np1 <- ggplot(penguins, aes(x = species, y = bill_length_mm)) +\n  geom_boxplot()\np2 <- ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point()\np3 <- ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  facet_wrap(~ species)\np4 <- ggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar()\np1 + p2 + p3 + p4\n(p1 | p2  | p4) / p3\n(p1 | p2  | p4) / p3 + \n  plot_layout(heights = c(2, 1), guides = \"collect\")\n(p1 | p2  | p4) / p3 + \n  plot_layout(heights = c(2, 1), guides = \"collect\") &\n  theme(panel.grid = element_blank())\nlibrary(rnaturalearth)\nlibrary(sf)## Linking to GEOS 3.6.2, GDAL 2.2.3, PROJ 4.9.3\n# map data inset\neurope <- ne_countries(scale = 110, continent = \"Europe\", returnclass = \"sf\")\n\n# map data main map\nsvalbard <- ne_countries(scale = 50, country = \"Norway\", returnclass = \"sf\") |>  \n   st_crop(c(xmin = 0, xmax = 34, ymin = 76, ymax = 81))\n\n# bounding box main map\nbb <- svalbard |> \n  st_bbox()\n\n#inset map\neuro_map <- ggplot() +\n  geom_sf(data = europe) +\n  # annotate bounding box\n  annotate(geom = \"rect\", \n           xmin = bb$xmin, xmax = bb$xmax, ymin = bb$ymin, ymax = bb$ymax, \n           fill = \"red\", alpha = 0.3) +\n  coord_sf(xlim = c(-25, 40), y = c(50, 82)) +\n  ggthemes::theme_map() +\n  theme(\n  #give white background and black border\n    panel.background = element_rect(fill = \"white\", colour = \"black\"), \n    plot.margin = margin() #remove margins\n  )\n\n# main map\nsvalbard_map <- ggplot() +\n  geom_sf(data = svalbard)\n\n# combined map\nsvalbard_map + \n  inset_element(euro_map, \n                left = 0.7, \n                right = 0.99, \n                top = 0.4, \n                bottom = 0.01)"},{"path":"combining-plots.html","id":"further-reading-5","chapter":"15 Combining plots","heading":"Further reading","text":"patchwork package","code":""},{"path":"combining-plots.html","id":"contributors-8","chapter":"15 Combining plots","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"using-functions-and-packages.html","id":"using-functions-and-packages","chapter":"16 Using functions and packages","heading":"16 Using functions and packages","text":"","code":""},{"path":"using-functions-and-packages.html","id":"functions","chapter":"16 Using functions and packages","heading":"16.1 Functions","text":"Everything something R function.functions function name followed brackets.\nWithin brackets zero arguments separated commas.Missing commas common mistake give error.get help function, use ?.examples bottom help file can useful understand use function.\ncan run examples either copying pasting , using example().","code":"rnorm(n = 10, mean = 5 sd = 1)## Error: <text>:1:24: unexpected symbol\n## 1: rnorm(n = 10, mean = 5 sd\n##                            ^\n?rnorm\nexample(rnorm)"},{"path":"using-functions-and-packages.html","id":"infix-functions","chapter":"16 Using functions and packages","heading":"16.1.1 infix functions","text":"special type function called infix function use brackets placed two objects.example, < infix function tests first number smaller second returns TRUE FALSE.infix functions areTo get help infix function surround backticks.","code":"\n5 < 3## [1] FALSE\n5 > 3 # Greater than## [1] TRUE\nc(\"a\", \"z\") %in% c(\"a\", \"b\", \"c\") # are the first values in the second vector## [1]  TRUE FALSE\n7 %% 4 # modulus (finds the remainder)## [1] 3\n7 %/% 4 # integer division## [1] 1\n?`%in%`"},{"path":"using-functions-and-packages.html","id":"packages","chapter":"16 Using functions and packages","heading":"16.2 Packages","text":"functions arranged packages.R packages, example, stats utils, automatically loaded start R.also several recommended packages installed default, example mgcv package fitting generalised additive models.","code":""},{"path":"using-functions-and-packages.html","id":"loading-packages","chapter":"16 Using functions and packages","heading":"16.3 Loading packages","text":"want use functions package, need load package function library().","code":"\nlibrary(\"mgcv\")## Loading required package: nlme## \n## Attaching package: 'nlme'## The following object is masked from 'package:dplyr':\n## \n##     collapse## This is mgcv 1.8-36. For overview type 'help(\"mgcv-package\")'."},{"path":"using-functions-and-packages.html","id":"installing-extra-packages","chapter":"16 Using functions and packages","heading":"16.4 Installing extra packages","text":"lots extra R packages available CRAN (Rs homepage).can install update package CRAN install.packages()need (unless need install new version package), run directly console keep script (otherwise install package every time run code).installed package, can use library() load .\nneed every time use use .Often know package want install.\ndon’t know name package need analyses task views can help.\nexample, Environmetrics task view describes packages analysis ecological environmental data.R packages available CRAN.\npackages development available github.com.\nPackages github can installed remotes package.","code":"\ninstall.packages(\"vegan\")\ninstall.packages(\"remotes\")\n#ggvegan for plotting ordinations is only on github\nremotes::install_github(\"gavinsimpson/ggvegan\")"},{"path":"using-functions-and-packages.html","id":"debugging-failed-package-installation","chapter":"16 Using functions and packages","heading":"16.5 Debugging failed package installation","text":"Sometimes packages fail install properly.\ncan frustrating.recommendationsCheck exactly package won’t install. may dependency package want. Try install .Restart R (Session menu RStudio) try .Google error message. Someone else may problem.","code":""},{"path":"using-functions-and-packages.html","id":"name-conflicts","chapter":"16 Using functions and packages","heading":"16.6 Name conflicts","text":"","code":""},{"path":"using-functions-and-packages.html","id":"the-problem","chapter":"16 Using functions and packages","heading":"16.6.1 The problem","text":"Sometimes two packages functions names.\nexample, MASS dplyr select function completely different things.\npackages loaded time conflict function loaded last takes priority.\ncan cause big problems, difficult interpret error messages.code worked one day fails next weird error messages, might name conflict.\nstart typing function name RStudio, show package function comes .three solutions.","code":"\nlibrary(palmerpenguins)#load data\nlibrary(dplyr)\nlibrary(MASS) # R will report that select is being masked## \n## Attaching package: 'MASS'## The following object is masked from 'package:tidylog':\n## \n##     select## The following object is masked from 'package:patchwork':\n## \n##     area## The following object is masked from 'package:dplyr':\n## \n##     select\npenguins |> select(species)## Error in select(penguins, species): unused argument (species)"},{"path":"using-functions-and-packages.html","id":"loading-order","chapter":"16 Using functions and packages","heading":"16.6.2 Loading order","text":"careful order packages loaded.\nexample loaded MASS dplyr select function MASS masked code worked.\nsolution can work script source, fragile interactive sessions easy load packages wrong order.","code":""},{"path":"using-functions-and-packages.html","id":"packagefunction","chapter":"16 Using functions and packages","heading":"16.6.3 package::function","text":"Use package::function notation specify package function comes .\nsafe can make code easier understand showing packages functions . code written safely asThis gets ugly fairly quickly, best used packages need functions twice, functions need many times.","code":"\npenguins |> dplyr::select(species)## # A tibble: 344 × 1\n##   species\n##   <fct>  \n## 1 Adelie \n## 2 Adelie \n## 3 Adelie \n## # … with 341 more rows"},{"path":"using-functions-and-packages.html","id":"conflicted-package","chapter":"16 Using functions and packages","heading":"16.6.4 conflicted package","text":"safest solution use conflicted package.\nconflicted package converts conflicts packages errors.\nmight seem like bad idea, much easier diagnose error conflicted weird error masked function.error message suggests, can resolve error either using package::function notation, use function conflict_prefer say function want use default.","code":"\nlibrary(dplyr)\nlibrary(MASS)\nlibrary(conflicted)\n\npenguins |> select(Species)## Error: [conflicted] `select` found in 3 packages.\n## Either pick the one you want with `::` \n## * MASS::select\n## * tidylog::select\n## * dplyr::select\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"select\", \"MASS\")\n## * conflict_prefer(\"select\", \"tidylog\")\n## * conflict_prefer(\"select\", \"dplyr\")\nlibrary(dplyr)\nlibrary(MASS)\nlibrary(conflicted)\nconflict_prefer(\"select\", \"dplyr\")## [conflicted] Will prefer dplyr::select over any other package\npeguins |> select(Species)## Error in select(peguins, Species): object 'peguins' not found"},{"path":"using-functions-and-packages.html","id":"citing-packages","chapter":"16 Using functions and packages","heading":"16.7 Citing packages","text":"use package important cite manuscript thesis acknowledge author’s work making package increase reproducibility.\ncorrect citation can seen function citation.also important cite version used.also cite R.\n, citation function can usedThe R version can obtained R.version.string.\nvariable function take brackets.","code":"\ncitation(\"lme4\")## \n## To cite lme4 in publications use:\n## \n##   Douglas Bates, Martin Maechler, Ben Bolker, Steve Walker\n##   (2015). Fitting Linear Mixed-Effects Models Using lme4.\n##   Journal of Statistical Software, 67(1), 1-48.\n##   doi:10.18637/jss.v067.i01.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Article{,\n##     title = {Fitting Linear Mixed-Effects Models Using {lme4}},\n##     author = {Douglas Bates and Martin M{\\\"a}chler and Ben Bolker and Steve Walker},\n##     journal = {Journal of Statistical Software},\n##     year = {2015},\n##     volume = {67},\n##     number = {1},\n##     pages = {1--48},\n##     doi = {10.18637/jss.v067.i01},\n##   }\npackageVersion(\"lme4\")## [1] '1.1.27.1'\ncitation()## \n## To cite R in publications use:\n## \n##   R Core Team (2021). R: A language and environment for\n##   statistical computing. R Foundation for Statistical\n##   Computing, Vienna, Austria. URL https://www.R-project.org/.\n## \n## A BibTeX entry for LaTeX users is\n## \n##   @Manual{,\n##     title = {R: A Language and Environment for Statistical Computing},\n##     author = {{R Core Team}},\n##     organization = {R Foundation for Statistical Computing},\n##     address = {Vienna, Austria},\n##     year = {2021},\n##     url = {https://www.R-project.org/},\n##   }\n## \n## We have invested a lot of time and effort in creating R,\n## please cite it when using it for data analysis. See also\n## 'citation(\"pkgname\")' for citing R packages.\nR.version.string## [1] \"R version 4.1.1 (2021-08-10)\""},{"path":"using-functions-and-packages.html","id":"packages-change-over-time","chapter":"16 Using functions and packages","heading":"16.8 Packages change over time","text":"R packages often get updated.\ngood functions get improved bugs get fixed.\nHowever, also means code written last year might work next year latest packages.\nbig problem reproducibility.solution make sure re-run code packages.\neasy hand.\nrenv package keeps track packages using (packages depend ).\nuse renv analyses.workflow working renv :Call renv::init() initialise private R library projectCall renv::init() initialise private R library projectWork project normal, installing R packages needed projectWork project normal, installing R packages needed projectCall renv::snapshot() save state project libraryCall renv::snapshot() save state project libraryContinue working project, installing updating R packages needed.\nUse renv::install() install packages CRAN github.Continue working project, installing updating R packages needed.\nUse renv::install() install packages CRAN github.changes successful, call renv::snapshot() . updated packages introduced problems, call renv::restore() revert previous state library.changes successful, call renv::snapshot() . updated packages introduced problems, call renv::restore() revert previous state library.","code":""},{"path":"using-functions-and-packages.html","id":"writing-your-own-functionpackages","chapter":"16 Using functions and packages","heading":"16.9 Writing your own function/packages","text":"find need run code several times, can useful write function.make function, need use reserved word function followed brackets zero arguments. brackets, braces encompass body function.function multiples two numbers together.written function, can useful make package.\nmakes easy use analysis easy share users.\nInformation make package using usethis devtools packages can found package writing book https://r-pkgs.org/whole-game.html.","code":"\nmutliply <- function(x, y = 1){ #The default value of y is 1\n  x * y\n}\n\nmultiply(x = 6, y = 7)"},{"path":"handling-missing-values.html","id":"handling-missing-values","chapter":"17 Handling missing values","heading":"17 Handling missing values","text":"Many datasets missing values.\nrepresent data measured, perhaps instrument failure, impossible measure, example water temperature 200m sea 100m deep.Missing values R represented NA.tutorial shows cope missing values R, focusing manipulating data tidyverse package, running statistical analyses, making figures ggplot2.penguins dataset palmerpenguins used example.","code":"\nx <- c(0, 5, NA)\nx## [1]  0  5 NA"},{"path":"handling-missing-values.html","id":"data-handling-with-missing-values","chapter":"17 Handling missing values","heading":"17.1 Data handling with missing values","text":"","code":""},{"path":"handling-missing-values.html","id":"detecting-missing-values","chapter":"17 Handling missing values","heading":"17.1.1 Detecting missing values","text":"NA values can detected function .na (NB lower case).use , example, find number missing values column penguins data.","code":"\nx <- c(0, 7, NA)\nis.na(x)## [1] FALSE FALSE  TRUE\npenguins |> \n  summarise(n_missing = sum(is.na(bill_length_mm)))## Error: [conflicted] `summarise` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::summarise\n## * dplyr::summarise\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"summarise\", \"tidylog\")\n## * conflict_prefer(\"summarise\", \"dplyr\")"},{"path":"handling-missing-values.html","id":"importing-data-with-missing-values","chapter":"17 Handling missing values","heading":"17.1.2 Importing data with missing values","text":"import text file (e.g., csv file) blank cells, cells “NA” treated NA.\ncoded missing values something else, can use na argument read_delimIn readxl::read_excel, default na argument just blank cells made NA, values can added way read_delim.","code":"\n# set blank cells, \"NA\" or \"missing\" to NA  \nread_delim(file = \"my_file.csv\", na = c(\"\", \"NA\", \"missing\"))"},{"path":"handling-missing-values.html","id":"removing-rows-with-missing-values","chapter":"17 Handling missing values","heading":"17.1.3 Removing rows with missing values","text":"can remove rows NA particular columns data frame using drop_na.\nexample, remove rows penguins data set NA bill_length_mm bill_depth_mm columns, useAlternatively, can use filter .na.\nuseful removing NA one several arguments filter.might see code using na.omit remove rows missing values data frame.\ncan dangerous remove rows NA column, just columns interested .","code":"\npenguins |> \n  drop_na(bill_length_mm, bill_depth_mm)## Error: [conflicted] `drop_na` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::drop_na\n## * tidyr::drop_na\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"drop_na\", \"tidylog\")\n## * conflict_prefer(\"drop_na\", \"tidyr\")\npenguins |> \n  filter(species == \"Gentoo\", !is.na(bill_length_mm))## Error: [conflicted] `filter` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::filter\n## * dplyr::filter\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"filter\", \"tidylog\")\n## * conflict_prefer(\"filter\", \"dplyr\")"},{"path":"handling-missing-values.html","id":"replacing-missing-values","chapter":"17 Handling missing values","heading":"17.1.4 Replacing missing values","text":"Sometimes want replace NA another value.\nPerhaps want make plot NA values labelled unknown, know NA values actually zeros, NA values detection limit instrument want replace half detection limit.can use tidyr::replace_na ., code replaces missing values bill length mean value bill length.","code":"\npenguins |> \n  mutate(\n    bill_length_mm = replace_na(\n      data = bill_length_mm, \n      replace = mean(bill_length_mm, na.rm = TRUE))\n  )## Error: [conflicted] `mutate` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::mutate\n## * dplyr::mutate\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"mutate\", \"tidylog\")\n## * conflict_prefer(\"mutate\", \"dplyr\")"},{"path":"handling-missing-values.html","id":"replacing-na-in-factors","chapter":"17 Handling missing values","heading":"17.1.5 Replacing NA in factors","text":"code previous section won’t work try replace NA factor.warning indicates, problem “missing” one levels factor sex.Instead need use function forcats::fct_explicit_na (forcats package part tidyverse manipulating factors).","code":"\npenguins |> \n  mutate(sex = replace_na(sex, \"missing\")) |> \n  distinct(sex)## Error: [conflicted] `distinct` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::distinct\n## * dplyr::distinct\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"distinct\", \"tidylog\")\n## * conflict_prefer(\"distinct\", \"dplyr\")\npenguins |> \n  mutate(sex = fct_explicit_na(sex, na_level = \"missing\")) |> \n  count(sex)## Error: [conflicted] `count` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::count\n## * dplyr::count\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"count\", \"tidylog\")\n## * conflict_prefer(\"count\", \"dplyr\")"},{"path":"handling-missing-values.html","id":"replacing-na-with-values-from-another-vector","chapter":"17 Handling missing values","heading":"17.1.6 Replacing NA with values from another vector","text":"Sometimes vector NA want replace missing values values second vector.\ncoalesce can ., first value x NA, first value y used.\nsecond value x NA, can used.\n.","code":"\nx <- c(NA, 2, 3, NA)\ny <- c(-1, -2, -3, -4)\ncoalesce(x, y)## [1] -1  2  3 -4"},{"path":"handling-missing-values.html","id":"setting-mising-values","chapter":"17 Handling missing values","heading":"17.1.7 Setting mising values","text":"data sets use number represent missing value, example -9999.\nObviously, calculations data set containing -9999 missing value, results seriously wrong.\nInstead need replace values NA.\ncan dplyr::na_if.","code":"\nx <- c(1, 7, -9999)\nna_if(x, y = -9999)## [1]  1  7 NA"},{"path":"handling-missing-values.html","id":"missing-values-and-dplyr-filter","chapter":"17 Handling missing values","heading":"17.1.8 Missing values and dplyr filter","text":"dplyr::filter returns rows condition strictly TRUE.\nusually want: want filter penguins long bills penguins dataset don’t want birds unknown bill length.Occasionally want keep rows NA.\nPerhaps column comments, many NA, want remove rows non-NA values meet criterion.| means Boolean logic.","code":"\npenguins |> \n  filter(sex == \"Female\" | is.na(sex))## Error: [conflicted] `filter` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::filter\n## * dplyr::filter\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"filter\", \"tidylog\")\n## * conflict_prefer(\"filter\", \"dplyr\")"},{"path":"handling-missing-values.html","id":"missing-values-and-dplyr-if_else-and-case_when","chapter":"17 Handling missing values","heading":"17.1.9 Missing values and dplyr if_else and case_when","text":"Sometimes useful set values NA if_else (choice two outcomes) case_when (choice two outcomes).possible values returned if_else case_when need type (character, numeric, integer, logical).\ntypes inconsistent, error produced.\nuseful forcing consistency helps avoid unexpected behaviour.problem occurs NA treated logical vector, values characters.\nsolution use NA_character_ NA correct type.typed NA include NA_real_ numeric values NA_integer integer values.","code":"\nx <- 0:2\ncase_when(\n  x == 0 ~ NA,\n  x == 1 ~ \"One\",\n  x == 2 ~ \"Two\"\n)## Error: must be a logical vector, not a character vector.\nx <- 0:2\ncase_when(\n  x == 0 ~ NA_character_,\n  x == 1 ~ \"One\",\n  x == 2 ~ \"Two\"\n)## [1] NA    \"One\" \"Two\""},{"path":"handling-missing-values.html","id":"statistics-with-missing-values","chapter":"17 Handling missing values","heading":"17.2 Statistics with missing values","text":"","code":""},{"path":"handling-missing-values.html","id":"na-arithemetic","chapter":"17 Handling missing values","heading":"17.2.1 NA arithemetic","text":"five plus unknown number?\nanswer , course, unknown.NA contagious calculations: one value NA result NA.\neffects many descriptive statistics.solution use na.rm argument functions exclude NA calculation.","code":"\n5 + NA## [1] NA\nx <- c(1, 7, NA)\nsum(x)## [1] NA\nmean(x)## [1] NA\nmin(x)## [1] NA\nsum(x, na.rm = TRUE)## [1] 8\nmean(x, na.rm = TRUE)## [1] 4\nmin(x, na.rm = TRUE)## [1] 1"},{"path":"handling-missing-values.html","id":"na-in-correlations-and-covariances","chapter":"17 Handling missing values","heading":"17.2.2 NA in correlations and covariances","text":"functions calculating correlation, cor, covariance, cov, work little differently functions can work two vectors matrix data frame.\nuse argument used control NA treated.default, values NA either vector, result also NA.\nwant find correlation two vectors without NA, useIf matrix (data frame), want calculate correlation matrix, use = \"complete.obs\" calculate using just rows NA, use = \"pairwise.complete.obs\" calculate correlation pair variables using complete pairs observations variables.","code":"\ncor(x = penguins$bill_length_mm,\n    y = penguins$bill_depth_mm, \n    use = \"pairwise.complete.obs\")## [1] -0.2350529\npenguins |> \n  select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) |> \n  cor(use = \"pairwise.complete.obs\") ##                   bill_length_mm bill_depth_mm flipper_length_mm\n## bill_length_mm         1.0000000    -0.2350529         0.6561813\n## bill_depth_mm         -0.2350529     1.0000000        -0.5838512\n## flipper_length_mm      0.6561813    -0.5838512         1.0000000\n## body_mass_g            0.5951098    -0.4719156         0.8712018\n##                   body_mass_g\n## bill_length_mm      0.5951098\n## bill_depth_mm      -0.4719156\n## flipper_length_mm   0.8712018\n## body_mass_g         1.0000000"},{"path":"handling-missing-values.html","id":"missing-values-and-regession-models","chapter":"17 Handling missing values","heading":"17.2.3 Missing values and regession models","text":"default regression models lm, glm, lmer remove case NA either response predictors.\nbehaviour controlled na.action argument.\ngreat interested model coefficients, can cause problems NA data want add residuals, fitted values, predictions original data frame plotting.problem fewer observation model (omitted NA) original data frame (still ).can make work using na.action = na.exclude pad fitted values NA length original data.na.exclude NA still excluded model fitting - models allow NA values.comparing models, example anova, models need fit dataset.\ncan cause problems NA caused different numbers observations removed.easiest solution remove rows NA predictor fitting models.","code":"\nmod <- lm(bill_length_mm ~ body_mass_g, data = penguins)\n\npenguins |> mutate(fit = fitted(mod))## Error: [conflicted] `mutate` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::mutate\n## * dplyr::mutate\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"mutate\", \"tidylog\")\n## * conflict_prefer(\"mutate\", \"dplyr\")\nmod <- lm(bill_length_mm ~ body_mass_g, data = penguins, na.action = na.exclude)\n\npenguins |> mutate(fit = fitted(mod))## Error: [conflicted] `mutate` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::mutate\n## * dplyr::mutate\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"mutate\", \"tidylog\")\n## * conflict_prefer(\"mutate\", \"dplyr\")\nmod2 <- lm(bill_length_mm ~ body_mass_g + sex, data = penguins, na.action = na.exclude)\n\nanova(mod, mod2)## Error in anova.lmlist(object, ...): models were not all fitted to the same size of dataset"},{"path":"handling-missing-values.html","id":"imputing-missing-values","chapter":"17 Handling missing values","heading":"17.2.4 Imputing missing values","text":"shown , observations missing values omitted model.\npredictor many missing values, may better exclude predictor model avoid losing many observations.alternative impute missing data.\ndone caution can bias results, especially substantial proportion data imputed.\nhand, missing data randomly distributed, omitting observations missing data can also bias results.several ways can used impute missing values.simplest replace missing value mean median variable shown section 17.1.4.complex methods use multivariate relationship predictors estimate missing values.\nSeveral R packages can help , e.g., mice.\nYadav Roychoudhury (2018) compare performance popular methods.","code":""},{"path":"handling-missing-values.html","id":"missing-values-and-ggplot2","chapter":"17 Handling missing values","heading":"17.3 Missing values and ggplot2","text":"default, missing values x y aesthetics dropped ggplot warning, whereas missing values colour fill aesthetics shown grey.\nbehaviour can controlled na.value argument relevant scale_*_* function.","code":"\n#x or y NA\np <- tibble(\n  x = 1:5, \n  y = c(1, 2, NA, 4, 5),\n  colour = c(1, 2, 3, 4, NA)\n) |> \n  ggplot(aes(x = x, y = y, colour = colour)) +\n  geom_point(size = 3)\n\np## Warning: Removed 1 rows containing missing values (geom_point).\n# change defaults\np + \n  scale_y_continuous(na.value = 0) +\n  scale_colour_continuous(na.value = \"hotpink\")"},{"path":"handling-missing-values.html","id":"related-concepts","chapter":"17 Handling missing values","heading":"17.4 Related concepts","text":"NaN Inf related NA.","code":""},{"path":"handling-missing-values.html","id":"nan","chapter":"17 Handling missing values","heading":"17.4.1 NaN","text":"NaN represents Number.\nNaN can generated, example, taking log negative number.\ncan tested .nan()","code":"\nx <- log(c(1, -1, NA))\nx## [1]   0 NaN  NA\nis.nan(x)## [1] FALSE  TRUE FALSE"},{"path":"handling-missing-values.html","id":"inf","chapter":"17 Handling missing values","heading":"17.4.2 Inf","text":"Inf -Inf represent positive negative infinite numbers respectively.\ncan generated, example, dividing zero, tested .infinite()","code":"\nx <- c(-Inf, 0, Inf)\nis.infinite(x)## [1]  TRUE FALSE  TRUE"},{"path":"handling-missing-values.html","id":"comparison-of-tests","chapter":"17 Handling missing values","heading":"17.4.3 Comparison of tests","text":"test .finite() TRUE value numeric NA, NaN, Inf -Inf.","code":""},{"path":"handling-missing-values.html","id":"contributors-9","chapter":"17 Handling missing values","heading":"Contributors","text":"Richard J. Telford","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"bestiary-of-brackets-and-other-r-notation","chapter":"18 Bestiary of Brackets and other R notation","heading":"18 Bestiary of Brackets and other R notation","text":"!#@%&?mean?page guide decoding non-alphanumeric used R mean.\ncovers base R use common uses within tidyverse related packages.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"assignment-arrows","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.1 Assignment arrows","text":"usual way assign object name use left-pointing arrow <-.keyboard short-cut assign arrow Alt+-.also possible use right-pointing arrows ->.recommended use scripts makes code difficult read.","code":"\nx <- 42 # This will assign the value 42 to the name x\n42 -> x # This will assign the value 42 to the name x"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"backslash","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.2 Backslash","text":"characters directly represented character strings escape sequence used instead.\nEscape sequences always start backslash character \\.\\n new line\\t tab (useful importing tab-delimited files read_delim)\\\\ backslash\\U1F600 including Unicode emoji 😀want use literal backslash character string, needs escaped another backslash.\nNote print shows contents string, including backslashes, cat shows shows ggplot etc.","code":"\nx <- \"Backslash-n gives a newline\\nThis is a literal backslash '\\\\'\"\nprint(x)## [1] \"Backslash-n gives a newline\\nThis is a literal backslash '\\\\'\"\ncat(x)## Backslash-n gives a newline\n## This is a literal backslash '\\'"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"brackets","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.3 Brackets","text":"Three different types bracket used R.round brackets () used contain arguments function.Round brackets () also used force order operations calculation Boolean logic.Single square brackets [] used sub-setting vectors, matrices similar objects.Double square brackets used extract elements listCurly brackets braces {} used keep code needs run together single expression.\ncommonly done writing functionor writing statementCurly brackets also used glue package, easy use alternative paste.\ncurly brackets demarcate R code include output.Double curly brackets {{}} used programming tidyverse.\nSee dplyr programming vignette details.","code":"\nrnorm(n = 10, mean = 10)\n9 * 6 + 5 # 59## [1] 59\n9 * (6 + 5) # 99## [1] 99\nmonth.name[6:7] # extract the 6th and 7th element of month.name## [1] \"June\" \"July\"\npenguins[1, \"species\"] # first element of species column (dplyr gives neater ways to do this)## # A tibble: 1 × 1\n##   species\n##   <fct>  \n## 1 Adelie\nx <- list(a = 1, b = TRUE)\nx[1] # single square bracket returns a list - see the $a## $a\n## [1] 1\nx[[1]] # double square bracket returns element directly## [1] 1\ncylinder_volume <- function(radius = 1, height){\n  radius ^ 2 * pi * height \n}\n\ncylinder_volume(height = 2)\nif(logical_condition){\n  #some code to run if logical_condition is TRUE\n}\nglue::glue(\"The penguins dataset has {nrow(penguins)} rows\")## The penguins dataset has 344 rows\npaste(\"The penguins dataset has\", nrow(penguins), \"rows\") # base R alternative gets clunky fast## [1] \"The penguins dataset has 344 rows\""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"boolean-operators","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.4 Boolean operators","text":"Boolean operators used combine logical tests.b logical vectors (.e. TRUE FALSE). vectors can coerced logical vectors, !aa & b ba | b bBoolean operators can combined form complex statements.\nRound brackets can used force order evaluationIt probably good idea always use brackets statements multiple Boolean operators make order evaluation clear reader.also see doubled || && operators.\nspecial Boolean operators return first element vector results. useful statements want single TRUE FALSE.","code":"\nx <- 10\nx > 0 | x < 20  # is x between 0 and 20## [1] TRUE\nx > 0 | x < 20  & x %% 2 == 1 # is x an odd number between 0 and 20. Wrong order of evaluation.## [1] TRUE\n(x < 20 | x > 0)  & x %% 2 == 1 # Brackets force correct order.## [1] FALSE"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"colons","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.5 Colons","text":"single colon : used get sequence two values step size one.single colon also used detaching package almost, quite, opposite running library.detach exactly opposite library, normally better restart R session (Rstudio go ‘Session’ ‘Restart R’).Double colons :: let use single function package without loading entire package.\nexample, readxl::read_excel() run read_excel().\ncan prevent conflicts functions name different packages, make code clearer explicit function comes .Triple colons ::: used access package’s internal functions.\ncan useful access help file view code, rely internal functions staying .","code":"\n1:10##  [1]  1  2  3  4  5  6  7  8  9 10\n#equivalent to \nseq(from = 1, to = 10, by = 1)##  [1]  1  2  3  4  5  6  7  8  9 10\nlibrary(mgcv) # loads mgcv package\ndetach(\"package:mgcv\") # "},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"commas","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.6 Commas","text":"Arguments function need separated comma.forget use comma, get reminder R, Rstudio underline problem.Rstudio puts cross margin underlines unexpected text missing comma.","code":"\nx <- rnorm(n = 10, mean = 1, sd = 0.5)x <- rnorm(n = 10, mean = 1 sd = 0.5)## Error: <text>:1:29: unexpected symbol\n## 1: x <- rnorm(n = 10, mean = 1 sd\n##                                 ^"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"dot","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.7 Dot","text":"dot . used decimal separator R, example 3.1415927.Object names can dot .\nname starts dot, object invisible won’t show environment tab Rstudio.Dots function names can decorative, can also used R determine function needs used type object.\nexample, summary.lm() anova.lm() process lm class objects generated function lm().\nalso glm(), lme(), many versions functions available process different classes objects.\nrun summary() anova(), known generic functions, R automatically select correct version use based class object given.\ncan find class object using function class().","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"section-1","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.8 …","text":"often see three dots ... function’s arguments.\nused name (number) arguments known advance.\nexample, functionc() ... arguments, allowing put number objects names function make vector.\nthree dots often used generic functions different versions function different classes object need different arguments.\ndplyr, dots used column names data frame tibble processed.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"dollars","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.9 Dollars","text":"dollar symbol $ used subset lists.\nMany objects R, including data frames, special types lists.","code":"\nx <- list(a = 1, b = TRUE)\nx$a## [1] 1\npenguins$species[1:3] # just the first few elements## [1] Adelie Adelie Adelie\n## Levels: Adelie Chinstrap Gentoo"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"equals-sign","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.10 Equals sign","text":"One equals sign = used assign value argument functionOne equals sign can used instead assignment arrow, intent arrow clearer.Two equals signs == used test exact equality.\ntest sensitive numerical impression floating point numbers (numbers decimal point).\ncan safer use near numeric values built tolerance.common mistake use one equals sign rather two.\nfilter dplyr gives helpful error message","code":"\nrnorm(n = 10, mean = 0)\n2 == sqrt(2) ^ 2 # see 2 - sqrt(2) ^ 2## [1] FALSE\nnear(2, sqrt(2) ^ 2)## [1] TRUE\npenguins |> filter(year = 2007)## Error: [conflicted] `filter` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::filter\n## * dplyr::filter\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"filter\", \"tidylog\")\n## * conflict_prefer(\"filter\", \"dplyr\")"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"file-paths","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.11 File paths","text":"want import data save file , directory (folder) working directory (usually RStudio project .rproj file ), need specify path.directory name need separated file name forwards slash /.use backslash mistake, get error, backslash escape character.\nsometimes see double backslash used path separator, recommended.can also use function file.path() generate paths files.want read file directory working directory, can use ../my_file.csv, .. means go one, probably use package.","code":"\n\"my_directory/my_file.csv\"\nfile.path(\"my_directory\", \"my_file.csv\")## [1] \"my_directory/my_file.csv\""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"formula-notation","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.12 Formula notation","text":"Formulae mainly used regression models, also plotting (base plot facet_wrap()) functions.Formula always tilde ~.\nresponse () goes left tilde, predictors right.characters can used formula include * + | / : ^ take different meaning usual meaning.following linear model formula bill length response species, year, interaction year species predictors.model can also run following formulae concise notation.give exactly result.","code":"\nlm(bill_length_mm ~ species + year + species:year, data = penguins)## \n## Call:\n## lm(formula = bill_length_mm ~ species + year + species:year, \n##     data = penguins)\n## \n## Coefficients:\n##           (Intercept)       speciesChinstrap          speciesGentoo  \n##            -1.268e+02             -1.527e+02             -1.390e+03  \n##                  year  speciesChinstrap:year     speciesGentoo:year  \n##             8.248e-02              8.106e-02              6.963e-01\nlm(bill_length_mm ~ species * year, data = penguins)\nlm(bill_length_mm ~ (species + year) ^ 2, data = penguins)"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"greater-than-and-less-than","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.13 Greater than and less than","text":"greater > less < characters used logical tests.express greater equal, use >=.\n<=, less equal.greater sign also used native pipe |> (tidyverse pipe %>%).","code":"\npi > 22/7## [1] FALSE"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"hash","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.14 Hash","text":"text # comment.Comments end four hashes treated section breaks Rstudio.\nuseful navigating long scripts.Rstudio can use keyboard short-cut ctrl+shift+c (Windows/Linux) command+shift+c (Mac) comment uncomment multiple lines code time.Hashes also used indicate hexadecimal (base 16) numbers.\noften used colours, hash followed three pairs digits (0-9, -F) representing intensity red, green blue components colour (option extra pair represents alpha transparency).\nLarge numbers (towards FF, 255 expressed decimal number) intense low numbers.five colours viridis colour scaleIf want make special colours, can write\nhexadecimal string hand.","code":"\n# this is a comment\n#### this is a section break ####\n# Only needs one leading #, \n# but symmetry makes code more beautiful\nviridisLite::viridis(n = 5)## [1] \"#440154FF\" \"#3B528BFF\" \"#21908CFF\" \"#5DC863FF\" \"#FDE725FF\"\ntibble(x = viridisLite::viridis(n = 5)) |> \n  mutate(x = factor(x, levels = rev(x))) |>  \nggplot(aes(x = x, y = 1, fill = I(x), label = x)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(y = 0.5, angle = 0, aes(colour = I(c(rep(\"white\", 2), rep(\"black\", 3)))), show.legend = FALSE) +\n  coord_flip() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid = element_blank())## Error: [conflicted] `mutate` found in 2 packages.\n## Either pick the one you want with `::` \n## * tidylog::mutate\n## * dplyr::mutate\n## Or declare a preference with `conflict_prefer()`\n## * conflict_prefer(\"mutate\", \"tidylog\")\n## * conflict_prefer(\"mutate\", \"dplyr\")"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"mathematical-operators","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.15 Mathematical operators","text":"Mathematical operators usual meaning:+ b plus b-minus aa - b minus ba * b times ba / b divided ba ^ b power bSome useful less commonly seen operatorsa %% b remainder b (13 %% 5 = 3). Also called modulo operator.%/% b integer division (13 %/% 5 = 2).mathematical operators used tidyverse associated packages different purposes.ggplot2 uses + add elements plot togetherpatchwork uses + / arrange separate plots one combined plot, uses & modify plots.\nFigure 18.1: Boxplot violin plot combined patchwork\n","code":"\np_box <- ggplot(penguins, aes(x = species, y = bill_length_mm)) + \n  geom_boxplot() +\n  labs(x = \"Species\", y = \"Bill length mm\")\np_violin <- ggplot(penguins, aes(x = species, y = bill_length_mm)) + \n  geom_violin() +\n  labs(x = \"Species\", y = \"Bill length mm\")\n\nlibrary(patchwork)\np_box + p_violin & \n  theme(axis.text.x = element_text(angle = 45))"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"percent-signs","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.16 Percent signs","text":"Percent signs come pairs surround infix operator.\ninfix operator special type function goes two operands.\nexample, integer division operator 13 %/% 5.\ncan re-written regular function `%/%`(13, 5)important infix operators %% remainder modulo operator%/% integer division%% matching operator tests elements first vector second vector.%*% matrix multiplication%>% tidyverse pipeIf want get help infix operator, need surround backticks get error unexpected SPECIAL \"?%%\"","code":"\nx <- c(\"January\", \"Wednesday\")\nx %in% month.name # which element of x is a name of a month## [1]  TRUE FALSE\n#equivalent to, but much neater than\nx == \"January\" | x == \"February\" | x == \"March\" # etc## [1]  TRUE FALSE\n ?`%in%`"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"quote-marks","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.17 Quote marks","text":"Strings R need surrounded quote marks.\ncan use single double quote marks.\nstring contains quotes, either need opposite type around string, escaped backslash (see section 18.2).backtick ` looks little bit like small quote mark.\nused enclose names legal R names.","code":"\nx <- \"cat\" # double quote marks\nx <- 'cat' # single quote marks\n\nx <- \"She said 'The cat.'\" # single quote marks nested in double quotes\nx <- \"She said \\\"The cat.\\\"\" # escaped quote marks\ntibble(`Standard Deviation` = 2)## # A tibble: 1 × 1\n##   `Standard Deviation`\n##                  <dbl>\n## 1                    2"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"question-marks","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.18 Question marks","text":"Use ? get help function, example ?lm, equivalent help(lm)\n?? get help topic, example ??\"linear models\", equivalent help.search(\"linear models\").want help something start letter dot, need surround backticks, example ?`+.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"regular-expressions","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.19 Regular expressions","text":"Several characters take special meaning regular expressions, including ^ $ ? * + () [] {} :.\nRegular expressions always enclosed quote marks. See tutorial text manipulation introduction regular expressions.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"semi-colon","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.20 Semi-colon","text":"semi-colon ; can optionally used end line code, advantage (languages can compulsory).\ncan used separate two R statements line.\nrecommended can make code difficult read.","code":"\n# bad\ni <- 7 * 6; print(i)\n\n# good\ni <- 7 * 6\nprint(i)"},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"underscore","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.21 Underscore","text":"underscore _ can used object names along alphanumeric characters dot.\nfirst character name.\nuseful word separator snake_case.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"white-space","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.22 White space","text":"White space free usually impact code runs.\nUse lots make code readable.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"section-2","chapter":"18 Bestiary of Brackets and other R notation","heading":"18.23 @","text":"occasionally see @ R code.\nused subset S4 class objects, analogous use $ subset lists data frames.\nUnless coding S4 classes, probably won’t see use @ often.\nSee Chapter 15 Advanced R information S4 classes.","code":""},{"path":"bestiary-of-brackets-and-other-r-notation.html","id":"contributors-10","chapter":"18 Bestiary of Brackets and other R notation","heading":"Contributors","text":"Richard J. Telford","code":""}]
