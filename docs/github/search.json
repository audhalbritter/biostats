[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"index.html","id":"why-we-use-version-control","chapter":"1 Introduction","heading":"1.1 Why we use version control?","text":"Version control makes easy share code, collaborate project, keep track changes code.guide process installing git, connecting RStudio GitHub explain basic workflow.Git version control system, manages evolution files. GitHub online tool using software git store data track changes.\nGitHub can used files works best text files, example R scripts.\nfocus using git GitHub RStudio.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"version-control-with-github-and-rstudio","chapter":"2 Version control with GitHub and RStudio","heading":"2 Version control with GitHub and RStudio","text":"","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"basic-workflow","chapter":"2 Version control with GitHub and RStudio","heading":"2.1 Basic workflow","text":"Let’s start explaining basic workflow briefly.\nGitHub can make repositories, kind project.\nonline repository, short repo, called remote.\nuse repository, need clone locally onto computer called local.\ncan write edit R code locally computer.\nnew code committed pushed back remote.\nfollow workflow consistently, GitHub keep track changes make.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"the-workflow","chapter":"2 Version control with GitHub and RStudio","heading":"2.1.1 The workflow","text":"sake tutorial, Kingsley Angelina show us workflow RStudio GitHub.\nFigure 2.1: GitHub workflow\ngeneral workflow looks like (Figure 2.2):\nKingsley repo GitHub.\nclones repo computer (1).\ndevelops code makes commits (2).\npushes changes back remote repo GitHub (3).\ntutorial, explain steps detal.\nFigure 2.2: GitHub workflow\n","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"installation","chapter":"2 Version control with GitHub and RStudio","heading":"2.2 Installation","text":"Download install git: https://git-scm.com/(UiB users, can find Git Software Center;\nMac users need software xcode)Get GitHub account : https://github.com/, sign follow instructions.\n","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"set-up","chapter":"2 Version control with GitHub and RStudio","heading":"2.3 Set-up","text":"Now configure name email associated GitHub account.\nGo RStudio , using identification, type:next step connect RStudio GitHub.\nseveral ways .\neasiest use usethis package (version 2.0.0 higher).","code":"\n## install if needed (do this exactly once):\n## install.packages(\"usethis\")\n\nlibrary(usethis)\nuse_git_config(\n  user.name = \"kingsleyshaklebolt\", \n  user.email = \"kingsleyshaklebolt@ministryofmagic.com\"\n  )"},{"path":"version-control-with-github-and-rstudio.html","id":"connect-rstudio-and-github","chapter":"2 Version control with GitHub and RStudio","heading":"2.4 Connect RStudio and GitHub","text":"GitHub needs validate can connect RStudio.\ncan generating saving Personal Access Token (PAT).\nneed every RStudio project.function open GitHub.\nconfirming password, shown page make new PAT.\ndon’t need change options.\nJust click green “Generate token” button bottom page.next page show PAT.\nCopy clicking clipboard icon return R.Now runthis ask PAT: paste prompt press return.\nsave PAT can used access GitHub.\nTreat PAT password - never save script.good time runto make git safer use.","code":"\ncreate_github_token()\ngitcreds::gitcreds_set()\ngit_vaccinate()"},{"path":"version-control-with-github-and-rstudio.html","id":"making-a-repo","chapter":"2 Version control with GitHub and RStudio","heading":"2.5 Making a repo","text":"Now ready start using RStudio GitHub.\ntwo main workflows:Make new local repo push GitHub (section 2.5.1)Clone existing repo GitHub onto computer (section 2.5.2)cover turn: choose best one circumstances.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"local-first","chapter":"2 Version control with GitHub and RStudio","heading":"2.5.1 Local first","text":"workflow useful already RStudio project computer starting new project.RStudio, start creating git repo project withAfter creating repo, function ask whether want commit files.new project, safe agree .existing project might files don’t want commit, example large files files sensitive information passwords.\ncase, don’t let R commit everything, instead pick files want committed (see section 2.6) improve .gitignore (see section 2.8) committed accident.let RStudio restart git panel activated.committed least one file, can create repo GitHub.default, repo name GitHub match RStudio project name, repo public.Now go GitHub, find repo check files committed uploaded.new repo looks like.\n","code":"\nuse_git()\nuse_github()"},{"path":"version-control-with-github-and-rstudio.html","id":"github-first","chapter":"2 Version control with GitHub and RStudio","heading":"2.5.2 GitHub first","text":"Cloning GitHub repository means making copy remote repository Github, locally computer.\ncan clone repository GitHub, whether belongs somebody else, long public.\nalso means repositories public can seen everybody, worry much , GitHub millions repos.\nmake sure commit sensitive information passwords.Go GitHub repository want clone find names owner repo.clone “kingsleyshacklebolt/dragon_study” repo, useIf repo trying clone , function first make fork (see forking tutorial) GitHub account.\nfunction clone repo onto desktop default.\ncan copy entire directory somewhere appropriate.Now time commit push.","code":"\ncreate_from_github(\"kingsleyshacklebolt/dragon_study\")"},{"path":"version-control-with-github-and-rstudio.html","id":"stage-commit-and-push","chapter":"2 Version control with GitHub and RStudio","heading":"2.6 Stage, commit and push","text":"create edit file repository save changes file appear Git panel.\ntwo yellow boxes question marks add file, blue box M edit file already committed.\nred box D delete file.\ncan also move files show deleted added new place.\nstaged (ticking box file name) deleted new file, become purple R.written chunk code, save click Commit button.\nnew window appear.changes file shown green red color.\nGreen code added file.\nRed code deleted.\nmakes easy see changes haven made.Stage changes made ticking box file name add Commit message (top right).\ncommit message contain changes done.\ncan short, complete.\nhelp later searching specific commit.Note need tick files want commit.Click Commit save changes creates permanent snapshot file Git directory along message describe changes made file.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"some-rules","chapter":"2 Version control with GitHub and RStudio","heading":"2.6.1 Some rules","text":"Commits cheap.\ntake much time click Commit, stage file(s) write words commit (aim max 50 characters).\ngood rule use word probably two commits.\nTherefore, commit often provide useful messages can keep track .example useless commit messages:\n(Picture xkcd; https://xkcd.com/1296/)","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"push-and-pull","chapter":"2 Version control with GitHub and RStudio","heading":"2.6.2 Push and pull","text":"far still working locally computer changed remote repository GitHub.\nnew code still locally computer.\nupload commits remote GitHub repository need Push (green arrow Git tab) changes remote repository GitHub.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"share-a-repository","chapter":"2 Version control with GitHub and RStudio","heading":"2.7 Share a repository","text":"possible share repository GitHub.Let’s say Kingsley repo GitHub wants collaborate Angelina project (Figure 2.3).\nAngelina Kingsley can clone repo locally computer (1), develop code (2) push changes remote repo GitHub (3). get changes person made repo, need pull GitHub (4).\nFigure 2.3: workflow sharing GitHub repo\n\nRegular pulling pushing important working files avoid merge conflicts.\nmerge conflict occurs two people modifying file time.\nconflict can resolved, tedious best avoid.\nstrongly suggest use forks branches collaborating project (see 4 Collaborating forks tutorial details).\n","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"gitignore-file","chapter":"2 Version control with GitHub and RStudio","heading":"2.8 .gitignore file","text":"creating new GitHub repository can add .gitignore text file, tells git files ignored.\ngeneral, data output files committed, exceptions can useful relatively small unchanging files.Every change making file R project commit GitHub, tracked.\nCommit files, code output GitHub, want track changes.\ncommit files, example output files like figures can easily recreated code.example .gitignore file:\n","code":"# History files\n.Rhistory\n.Rapp.history\n\n# Session Data files\n.RData\n\n# RStudio files\n.Rproj.user/\n\n# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3\n.httr-oauth\n.Rproj.user\n\n#data (excludes everything in the folder data)\ndata/*\n\n# you can make exceptions for specific files\n!data/dragon_taxonomy.csv\n\n#figures & output (excludes all figure files)\n*.png\n*.pdf\n*.jpeg\n"},{"path":"version-control-with-github-and-rstudio.html","id":"useful-terminal-comands","chapter":"2 Version control with GitHub and RStudio","heading":"2.9 Useful terminal comands","text":"RStudio range possibilities work Git GitHub shown tutorial.\nTerminal commands options handy trouble shooting.\ntutorial explain limited selection things can go wrong.","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"trouble-shooting","chapter":"2 Version control with GitHub and RStudio","heading":"2.10 Trouble shooting","text":"Git foundSometimes, RStudio complain find git even install .RStudio click Tools > Global Options, select Git/SVN tab.Ensure path Git executable correct.\nparticularly important Windows may default correctly (e.g. C:/Program Files (x86)/Git/bin/git.exe).Git workingIf use university windows computer, might default using path like\\\\helix\\user_name\\..UNC path.\nGit work UNC paths.\nMake sure start RStudio , example, O:\\.Undo last commitIf committed something want , can undo last commit.\nworks pushed yet.\nGo terminal type:help trouble shooting see https://github.com/k88hudson/git-flight-rules git.\n","code":"git reset --soft HEAD@{1}"},{"path":"version-control-with-github-and-rstudio.html","id":"useful-resources","chapter":"2 Version control with GitHub and RStudio","heading":"Useful resources","text":"Happy Git provides instructions getting started Git, R RStudio, explains workflows useful tips things go wrong.\nhttps://happygitwithr.com/Git flight rules exaustive ressource whne things go wrong. https://github.com/k88hudson/git-flight-rules","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"whats-next","chapter":"2 Version control with GitHub and RStudio","heading":"2.10.1 What’s next","text":"advanced workflows using branches see chapter Working branchesFor collaborating others project see chapter Collaborating forks branches","code":""},{"path":"version-control-with-github-and-rstudio.html","id":"contributors","chapter":"2 Version control with GitHub and RStudio","heading":"Contributors","text":"Aud H. HalbritterRichard J. Telford","code":""},{"path":"working-with-branches.html","id":"working-with-branches","chapter":"3 Working with branches","heading":"3 Working with branches","text":"","code":""},{"path":"working-with-branches.html","id":"what-is-a-branch","chapter":"3 Working with branches","heading":"3.1 What is a branch?","text":"branch lets develop code, fix problem, test idea without affecting original project.\nbranch created existing branch, usually main branch project.\nNote main branch previously named master branch, removed reference slavery.\nchange might find references old name looking help elsewhere.can work branch, bravely develop code works work break code main branch.\nBasically, can experiment .idea work another idea, branch can deleted nobody ever needs know .\nMake new branch start .\nNone affect original project.working project, happy new code, idea tested working, can merge branch working main branch.","code":""},{"path":"working-with-branches.html","id":"the-workflow-1","chapter":"3 Working with branches","heading":"3.1.1 the workflow","text":"understand workflow, let’s see Kingsley using branches (see Figure 3.1).Kingsley owns GitHub repo.\nclones repo computer (1).\ndevelop code, create new branch (2) makes commits (3).\nmerges new branch main branch locally computer (4).\nFinally, pushes changes remote repo GitHub (5).\nKingsley continue workflow (2-5).\nFigure 3.1: Workflow using branches\n\nLet’s look create, use delete branches.\n","code":""},{"path":"working-with-branches.html","id":"make-a-new-branch-in-rstudio","chapter":"3 Working with branches","heading":"3.1.2 Make a new branch in RStudio","text":"RStudio, click New Branch button Git tab.\nNext button say branch .\ncase main, default branch.Give branch short informative name (spaces) click Create.\nnow newly created branch.\n\nwant switch back main branch another branch, click box top corner switch.\nNote switch another branch uncommitted changes.\nneed committed first.","code":""},{"path":"working-with-branches.html","id":"code-commit-and-push-to-origin-in-rstudio","chapter":"3 Working with branches","heading":"3.1.3 Code, commit and push to origin in RStudio","text":"Now time work new edit existing file project.\ncan work way described section 2.6.\nWrite edit code, test , commit regularly add useful commit message.done task time merge new branch main branch.First need go main branch.\ngo Terminal type:merge new branch main branch type:example , name new branch community_analysis :\nlast step push changes new branch GitHub.\n, go git tab RStudio push green arrow.RStudio also tells branch 2 commits ahead main branch, means made 2 commits new branch.\n","code":"git checkout maingit merge my_branchgit merge community_analysis"},{"path":"working-with-branches.html","id":"delete-branches","chapter":"3 Working with branches","heading":"3.1.4 Delete branches","text":"created couple branches, become difficult track branch still working old.\nGenerally, want delete branch done .delete branch locally type:delete branch remotely, type:","code":"git branch -d community_analysisgit push origin --delete community_analysis"},{"path":"working-with-branches.html","id":"trouble-shooting-1","chapter":"3 Working with branches","heading":"3.1.5 Trouble shooting","text":"Check configurations TerminalYou might want check configurations repository.\nTerminal can check origin repo, push pull.\nshow origin wrong.Go Terminal tab type repo type:\n\noutput look like :\nHandle merge conflictA merge conflict can occur changing line one file differently, example using two different branches.goal avoid conflicts good strategy commit often, work small steps, push pull regular.\nMerge conflicts can avoided use separate branches file creating editing.merge conflicts always avoided.\nhappen get notified Terminal trying merge new branch main branch.\nmessage look like \nFirst, panic.\nmessage simply tells merge merge “dragon_analysis.R” file.Go file merge conflict, look like :\nfile merge conflict starts <<<<<< HEAD:dragon_analysis indicating name file.\ntwo different versions code shown, separated ======.\nFinally, >>>>>>> issue-5:dragon_analysis indicates end merge conflict.resolve conflict, edit section remove conflicting parts.\nBasically, choose one versions combine .\nAlso remove conflict markers <<<<<<, ====== >>>>>>.\nSave file, commit, switch main branch, merge push GitHub.Easy peasy!","code":"git remote -vorigin  git@github.com:kingsleyshacklebolt/magic_dragons.git (pull)\norigin  git@github.com:kingsleyshacklebolt/magic_dragons.git (push)CONFLICT (content): Merge conflict in R/dragon_analysis.R### Dragon analysis ###\n\nlibrary(\"broom\")\n\n# Import data\nsource(\"R/import_dragon_data.R\")\n\n\n# Run model\n\n<<<<<< HEAD:dragon_analysis \nmod <- lm(body_size ~ body_length, data = dragon)\n======\n  mod <- lm(body_size ~ body_length * temperature, data = dragon)\n>>>>>>> issue-5:dragon_analysis \n\ntidy(mod)\n### Dragon analysis ###\n\nlibrary(\"broom\")\n\n# Import data\nsource(\"R/import_dragon_data.R\")\n\n\n# Run model\nmod <- lm(body_size ~ body_length * temperature, data = dragon)\n\ntidy(mod)\n"},{"path":"working-with-branches.html","id":"further-reading","chapter":"3 Working with branches","heading":"Further reading","text":"Happy Git provides instructions getting started Git, R RStudio, explains workflow useful tips things go wrong.https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching--MergingNote book competent user level command line focus.Git flight rules exhaustive resource things go wrong. https://github.com/k88hudson/git-flight-rules","code":""},{"path":"working-with-branches.html","id":"whats-next-1","chapter":"3 Working with branches","heading":"3.1.6 What’s next","text":"collaborating others project read chapter Collaborating forks","code":""},{"path":"working-with-branches.html","id":"contributors-1","chapter":"3 Working with branches","heading":"Contributors","text":"Aud H. HalbritterRichard J. Telford","code":""},{"path":"collaborating-with-forks.html","id":"collaborating-with-forks","chapter":"4 Collaborating with forks","heading":"4 Collaborating with forks","text":"","code":""},{"path":"collaborating-with-forks.html","id":"what-is-a-fork","chapter":"4 Collaborating with forks","heading":"4.1 What is a fork?","text":"GitHub useful developing code, point might want collaborate people project.\nmight come across GitHub repository want use starting point work.\ncases forks way go.fork copy somebody’s GitHub repository.\ncan fork repo work independently original project.\ncollaborating people can stay connected original repository via pull requests.However, directly affect (damage) original project, somewhat less scary, right?\n","code":""},{"path":"collaborating-with-forks.html","id":"the-workflow-2","chapter":"4 Collaborating with forks","heading":"4.1.1 The workflow","text":"understand workflow, let’s see Angelina Kingsley collaborate using GitHub (see Figure 4.1).Kingsley owns GitHub repo.\nAngelina forks repo (1) clones computer (2).\nAngelina develops code using branches makes commits (3).\npushes changes remote repo GitHub (4) makes pull request original repo, Kingsley merges (5).now Angelina fetch (6) merge (7) newest changes upstream local repo continue workflow (3-5).\nFigure 4.1: GitHub workflow using fork\n","code":""},{"path":"collaborating-with-forks.html","id":"forking-with-usethis","chapter":"4 Collaborating with forks","heading":"4.1.2 Forking with usethis","text":"easiest way fork repo GitHub clone computer usethis package.\nFind user name repo name repo want fork.\nfork clone “kingsleyshacklebolt/dragon_study” repo, useThis willfork repo, creating copy GitHub account.clone fork repo onto computer.\ndefault, clone put desktop.\ncan copy entire folder somewhere convenient, set destdir argument.set connections clone, fork original repo. can see connections terminal command","code":"\nlibrary(usethis)\ncreate_from_github(\"kingsleyshacklebolt/dragon_study\", fork = TRUE)git remote -v"},{"path":"collaborating-with-forks.html","id":"fork-a-repo-on-github","chapter":"4 Collaborating with forks","heading":"4.1.3 Fork a repo on GitHub","text":"Sometimes want make small change repo, might convenient make fork GitHub make edits directy GitHub., go GitHub, log account go repository want fork.Let us assume Angelina wants fork magic_dragon repo biostats.\nClick fork button top right webpage wait repo forked.","code":""},{"path":"collaborating-with-forks.html","id":"what-is-a-branch-1","chapter":"4 Collaborating with forks","heading":"4.2 What is a branch?","text":"forked repository ready start working project.\nLet’s talk branches.branch lets develop code, fix problem, test idea without affecting original project.\nbranch created existing branch, usually main branch project.\nNote main branch previously named master branch, removed reference slavery.\nchange might find references old name looking help elsewhere.can work branch, bravely develop code works work break code main branch.\nBasically, can experiment .idea work another idea, branch can deleted nobody ever needs know .\nMake new branch start .\nNone affect original project.collaborating people forked repo work main branch.\nchange main branch later update repo original repo, cause merge conflicts.\nTherefore, collaborating others, always work branches, make pull requests.\nmaintainer review pull-request maybe ask changes current branch.\nmaintainer satisfied, changes current branch merge main branch (see 2.10).Let’s look create, use delete branches.","code":""},{"path":"collaborating-with-forks.html","id":"make-a-new-branch-in-rstudio-1","chapter":"4 Collaborating with forks","heading":"4.2.1 Make a new branch in RStudio","text":"RStudio, click New Branch button Git tab.\nNext button say branch .\ncase main, default branch.\nGive branch short informative name (spaces) click Create.\nnow newly created branch.want switch back main branch another branch, click box top corner switch.\nNote switch another branch uncommited changes.\nneed commited first.\n","code":""},{"path":"collaborating-with-forks.html","id":"code-commit-and-push-to-origin-in-rstudio-1","chapter":"4 Collaborating with forks","heading":"4.2.2 Code, commit and push to origin in RStudio","text":"Now time work new edit existing file project.\ncan work way described section 2.6.\nWrite edit code, test , commit regularly, add useful commit message.done task branch, test send code upstream original repo, described next section.","code":""},{"path":"collaborating-with-forks.html","id":"make-a-pull-request-on-github","chapter":"4 Collaborating with forks","heading":"4.2.3 Make a pull request on GitHub","text":"pushed branch back main branch can make pull request.\npull request request maintainer upstream repository pull code original repository.Go fork GitHub (upstream repo).\nClick green box Compare & pull request appear top page.\n\nAdd comment pull request click Create pull request.\n\ncreated pull request, GitHub check merge conflict.\nmerge conflict can occur two people changing line one file differently.\nSee 2.10 deal merge conflict.merge conflict occurs, GitHub give green light merging.\nmerge conflict, resolved file can merged (see 2.10 Trouble shooting).\n\nNow ’s time relax, wait response repo maintainer cake 🍰, earned !\n","code":""},{"path":"collaborating-with-forks.html","id":"excercise-make-pull-request","chapter":"4 Collaborating with forks","heading":"4.2.3.1 Excercise: make pull request","text":"Let’s make pull request together.\nGo magic_dragons repo forked , fork now.\nOpen file called successfully forked.Click main button create new branch.\nType name click Create branch: new_name.now working new branch.\nClick pencil symbol right side edit file.\nAdd name scroll way bottom page.Type commit message make sure commit new branch just made.Go original magic_dragons repo GitHub click green button Compare & pull request next page Create pull request\nNow ’s time relax, wait response repo maintainer cake 🍰, earned !\n","code":""},{"path":"collaborating-with-forks.html","id":"repo-maintainer-accepts-pull-request-or-not","chapter":"4 Collaborating with forks","heading":"4.2.4 Repo maintainer accepts pull request (or not)","text":"maintainer original repository get notified pull request.\nmaintainer evaluate changes project can make comments specific parts code, even start review.\nget notification changes required can go forth back .\n\nEventually, maintainer merge pull request get notification.\n","code":""},{"path":"collaborating-with-forks.html","id":"excercise-make-pull-request-continues","chapter":"4 Collaborating with forks","heading":"4.2.4.1 Excercise: make pull request continues","text":"Maybe got request Kingsley Shackelbolt pull request.\nGo ahead fix .everything ok, done.","code":""},{"path":"collaborating-with-forks.html","id":"update-your-fork","chapter":"4 Collaborating with forks","heading":"4.2.5 Update your fork","text":"pull request accepted, update fork get latest changes upstream.can either GitHub terminal","code":""},{"path":"collaborating-with-forks.html","id":"on-github","chapter":"4 Collaborating with forks","heading":"4.2.5.1 On GitHub","text":"Go fork GitHub.\nClick “Fetch upstream” link beneath green “Code” button, press “Fetch Merge” popup.\nfork behind? can now sync parent repo just single click! 🖱💥 pic.twitter.com/4Zx6OwVTxO\nNow go RStudio pull updates computer.\nUnless want continue working branch, now return main branch.","code":""},{"path":"collaborating-with-forks.html","id":"in-the-terminal","chapter":"4 Collaborating with forks","heading":"4.2.5.2 In the terminal","text":"Go RStudio Terminal tab.\ntype:Fetch downloads changes upstream.\nCheckout main makes sure main branch active.\nlast line merges changes local repository.\n","code":"git fetch upstream\n\ngit checkout main\n\ngit merge upstream/main"},{"path":"collaborating-with-forks.html","id":"delete-branches-1","chapter":"4 Collaborating with forks","heading":"4.2.6 Delete branches","text":"created couple branches, become difficult track branch still working old.\nGenerally, want delete branch done .delete branch locally type:delete branch remotely, type:","code":"git branch -d community_analysisgit push origin --delete community_analysis"},{"path":"collaborating-with-forks.html","id":"trouble-shooting-2","chapter":"4 Collaborating with forks","heading":"4.2.7 Trouble shooting","text":"Check configurations TerminalYou might want check configurations repository.\nTerminal can check origin repo, push pull.\nforked repo also show upstream repo (see 4 Collaborating forks branches tutorial details).\nalso show origin wrong upstream repo set.Go Terminal tab type repo type:output look like :Handle merge conflictA merge conflict can occur two people changing line one file differently.goal avoid conflicts good strategy fo commit often, work small steps, push pull/fetch regular communicate people collaborating .\nMerge conflicts can easily avoided work files.merge conflicts always avoided happen one pull request, get message resolve conflict changes can merge.\nFirst, panic find files conflicting.conflicting file called dragon_analysis.\nlikely somebody changed file meantime recent version code.\nCheck status file upstream repo.\nFix changes, conflicting anymore, commit, push make pull request .\nNow everything work.Prevent pushing mainWe already established collaborate repo using fork, never change main branch.\ncan difficult remember, way prevent committing main.\nInstall package usethis already.run code console:now trying commit changes main give warning message.\nhappens, make new branch, commit changes push.","code":"git remote -vorigin  git@github.com:angelinajohnson/magic_dragons.git (fetch)\norigin  git@github.com:angelinajohnson/magic_dragons.git (push)\nupstream        git@github.com:biostats-r/magic_dragons.git (fetch)\nupstream        git@github.com:biostats-r/magic_dragons.git (push)install.packages(\"usethis\")usethis::use_git_hook(\n  hook = \"pre-commit\",\n  script = '#!/bin/sh\n  branch=\"$(git rev-parse --abbrev-ref HEAD)\"\n  if [ \"$branch\" = \"main\" ]; then\n  echo \"You cannot commit directly to main branch\"\n  exit 1\n  fi'\n)"},{"path":"collaborating-with-forks.html","id":"further-reading-1","chapter":"4 Collaborating with forks","heading":"Further reading","text":"Happy Git provides instructions getting started Git, R RStudio, explains workflows useful tips things go wrong.\nhttps://happygitwithr.com/Git flight rules exhaustive resource things go wrong. https://github.com/k88hudson/git-flight-rules","code":""},{"path":"collaborating-with-forks.html","id":"whats-next-2","chapter":"4 Collaborating with forks","heading":"4.2.8 What’s next","text":"Nothing yet.\nGo eat cake 🍰","code":""},{"path":"collaborating-with-forks.html","id":"contributors-2","chapter":"4 Collaborating with forks","heading":"Contributors","text":"Aud H. HalbritterRichard J. Telford","code":""}]
