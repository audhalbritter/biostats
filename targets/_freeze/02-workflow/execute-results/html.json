{
  "hash": "3c9d38325406d33666859549f08de976",
  "result": {
    "markdown": "---\neditor_options: \n  markdown: \n    wrap: sentence\n---\n\n\n# Getting started with targets\n\n::: callout-note\n## In this chapter, you will\n\n- learn the basic targets workflow\n- build your own targets pipeline\n\n:::\n\nIn this chapter we will go through the basic workflow of a `targets` pipeline.\nWe will use plant trait data from Svalbard from the reproducible documents exercise (REF to Quarto book).\nEven if you have done the exercise already, download a clean repo to start from scratch to keep the workflow simple.\n\n::: callout-note\n## Exercise\n\nTo download the R project containing the data, the code and the qmd file, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"biostats-r/svalbardQuartoDemo\")\n```\n:::\n\n\nThen follow the instructions.\nThis will open the svalbardQuartoDemo Rstudio project.\n\n<!-- I added thi back in, because people will have to understand what is going on in the script -->\nOpen the `svalbard_traits_targets.qmd` file and render it.\nCheck the htlm output and try to understand what is going on. \n\n:::\n\nIn the next steps, we will set up a basic targets pipeline for the Svalbard trait R project and go through the main elements of a target plan, and how to run it.\n\n\n## The targets pipeline\n\nA target workflow has a specific file structure including R code, functions, qmd files, data and a `_targets.R` file (@fig-file-structure).\nThe `_targets.R` file is mandatory and the most important file defining the targets pipeline.\nThis file lives at the root of the R project folder.\n\nAn R project has many other files and it is recommended to keep code and data files in separate folders to keep the repository tidy.\nIt is common to have one or several scripts that contain custom user-defined functions (`R/functions.R`).\nTargets pipelines are based on functions, which is good practice coding (e.g. avoid repetition), and also keeps the pipeline tidy.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![File structure of an R Studio project with a target pipeline.](Pics/file_structure.png){#fig-file-structure fig-alt='The file structure of an R Studio project with a target pipeline.' width=351}\n:::\n:::\n\n\nTo set up this file structure use the `use_targets()` function, which creates an initial `_targets.R` script with comments to help you populate the script.\n\nNote that it also creates a couple of other files, one of which is called `run.R`.\nThis is a helper script to run the pipeline and will be explained later.\n\n::: callout-note\n## Exercise\n\nGo to the Svalbard trait project and start to set up a targets pipeline by using the `use_targets()` function.\n \n:::\n\n\n### _target.R script file\n\nThe `_targets.R` file configures and defines the pipeline.\nThis file is mandatory and without it the targets pipeline will not work.\nWhen using the `use_targets()` function, it sets up the basic structure and comments to help fill out the rest (see below).\n\nThe `_targets.R` file contains the following components:\n\n- **Set options** such as load necessary packages or defining the output format using `tar_option_set()`.\n\n- **Run R scripts** containing custom functions using the `tar_source()` function.\n\n- **Make a list of targets**, which define the pipeline and is created with `tar_target()`. \nEach *target* is a step in the workflow, for example importing data, analysis or figure and looks like a normal R object (e.g. tibble, vector, figure).\nThe targets are stored in `_targets/objects/` and can be used downstream in the pipeline.\nOne advantage of the targets pipeline is that once the pipeline has run, all targets can be reproduced using `tar_load()` and the pipeline does not need rerunning each time before accessing the targets.\nTo access all the targets at once. use `tar_load_everything()`.\nIn `tar_load()` you can also use tidy select commands to load specific targets, e.g. `tar_load(starts_with(\"y\"))`\n\nNote that the file also contains other options which are optional.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Created by use_targets().\n# Follow the comments below to fill in this target script.\n# Then follow the manual to check and run the pipeline:\n#   https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline # nolint\n\n# Load packages required to define the pipeline:\nlibrary(targets)\n# library(tarchetypes) # Load other packages as needed. # nolint\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n\n# tar_make_clustermq() configuration (okay to leave alone):\noptions(clustermq.scheduler = \"multicore\")\n\n# tar_make_future() configuration (okay to leave alone):\n# Install packages {{future}}, {{future.callr}}, and {{future.batchtools}} to allow use_targets() to configure tar_make_future() options.\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n# source(\"other_functions.R\") # Source other scripts as needed. # nolint\n\n# Replace the target list below with your own:\nlist(\n  tar_target(\n    name = data,\n    command = tibble(x = rnorm(100), y = rnorm(100))\n#   format = \"feather\" # efficient storage of large data frames # nolint\n  ),\n  tar_target(\n    name = model,\n    command = coefficients(lm(y ~ x, data = data))\n  )\n)\n```\n:::\n\n\nNow it is your turn to populate the targets pipeline.\n\n\n### Make custom functions\n\nTargets workflows are based on functions.\nFunctions are very useful if a task has to be done multiple times.\n\nFunctions are made with the keyword `function()`, can have one or more arguments separated by commas, and need assigning to a name (e.g. my_function).\nLet us make an example we multiply two numbers, but the numbers are not always the same.\nThis is a case for a function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function <- function(arg1, arg2){\n  arg1 * arg2\n}\n\nmy_function(arg1 = 3, arg2 = 4)\n```\n:::\n\n\nFunctions in the targets workflow need to be saved in a script in the folder `R/`.\nThe `_target.R` script will look for all R files in this folder and run them.\n\nHere is a working example for a function that runs a linear regression:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_model <- function(data){\n  mod <- lm(Value ~ Treatment, data = data)\n  mod\n}\n\nfit_model(data = my_data)\n```\n:::\n\n\n\n::: callout-note\n## Exercise\n\nGo to the Svalbard trait project create a file called `functions.R` and save it in the `R/` folder.\nThen add three functions that do the fallowing:\n\n- import the data and filter the species *Bistorta vivipara* and the trait *plant height*\n\n- fit a linear regression to test how the warming treatment affects plant height\n\n- and make a boxplot showing plant height in control and warming treatments.\n\nThe code you need for this exercise is already in the `svalbard_trait.qmd` file.\nYou need to copy it and turn it into functions.\n\nWhen you are finished, test if the functions are doing what you think they do, i.e. test them with a small dataset.\n\n:::\n\n\nThe next step is to configure and define the targets pipeline.\n\n### Populate the `_targets.R` file\n\nThe `_targets.R` file has 3 main components that need to be populated.\n\n1. Use `tar_option_set()` and the argument `package` to load all the required packages that are needed to run the pipeline.\nNote that `targets` and `tarchetypes` need to be loaded first and outside this function, otherwise the pipeline will not work.\nFunctions that are only used in a quarto file can be loaded directly in there and do not need to be loaded here. \nThe argument `format` let's you define default storage format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages required to define the pipeline:\nlibrary(targets)\nlibrary(tarchetypes) # Load other packages as needed.\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n```\n:::\n\n\n2. The function `tar_source()` will source all the R scripts in the `R/` folder.\nYou do not need to do anything else here.\nIf there are scripts that you do not want to run at the moment, move them to another place.\n\n3. The pipeline is a list of target objects, separated by commas.\nEach target is declared by the `tar_target()` function.\nThis function needs the argument `name` and `command` that defines the code to produce the target.\nHere is an example of a target that uses the function to run a regression from above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit model for plant height\nlist(\n  tar_target(name = mod_height,\n             command = fit_model(data))\n  )\n```\n:::\n\n\nTarget names should be unique (no duplicates), should not start with a dot and the name should be meaningful (do not use my_variable).\n\nData files are special, because they also need the argument `format` to decalre that this is a file.\nTargets will check if the file has been changed and automatically import the data again the next time the pipeline is run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  tar_target(name = file,\n             command = \"data/PFTC4_Svalbard_2018_ITEX_Traits.csv\",\n             format = \"file\")\n  )\n```\n:::\n\n\nA target usually creates a dataset, analyse data using a model or summarise or vizualise a dataset.\nA target should do one thing only and if a functions gets too long, it can be split into nested sub-functions to make the code readable and easier to maintain.\nYou also want to keep the number of targets manageble.\nDo not put too much in one target, and also try not to procude too many.\n\n::: callout-note\n## Exercise\n\nPopulate the `_targets.R` file:\n\n- add all packages to the `tar_option_set()` function in the `_targets.R` file that are needed to run the pipeline.\n\n- check that your `_targets.R` file sources the custom functions `tar_source()` and that all your functions are in the right place.\n\n- and set up the pipeline with three targets that imports the data, runs the model and makes a figure.\n\n:::\n\n\n### Output files\n<!-- word document? what is the correct term for a report thesis etc. -->\nThe results and figures of an analysis are usually presented in a document or presentation.\nAn output files, such as a reproducible quarto document can be added to a targets pipeline.\nThe targets that have been produced in the pipeline can be used in the quarto file, for example a figure can be plotted.\n\nThe targets that are used in the quarto document need to be loaded into the current environment.\nFor this we can use `tar_load()` or `tar_read()`.\nThe first function is used when a target is used several times.\n`tar_read()` is useful if a target is only needed once, e.g. to show a figure.\n<!-- Not sure if this is correct, but I mean that it is not enough to load it, you also have to print it. -->\nOnce the target is loaded, it can be printed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print model output\ntar_read(mod_height)\ntidy(mod_height)\n```\n:::\n\n\nTo add the quarto document to the pipeline, the manuscript has to be rendered.\nThis is done in `_targets.R` file in the list of targets using `tar_quarto()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# render ms\ntar_quarto(name = manuscript, path = \"svalbard_traits.qmd\")\n```\n:::\n\n\nNote that all packages that are needed to run the quarto file need to be loaded in the .qmd file.\nIf you are using a function exclusively in the quarto script, the package can be loaded only in the quarto file, but not in the `_target.R` file.\n`targets` and `tarchetypes` always need to be loaded in both files.\n\n::: callout-note\n## Exercise\n\nPrepare your `svalbard_traits.qmd` script and add it to the pipeline.\n\n- Load all the necessary R packages in the quarto file.\n\n- Load all the necessary targets that you want to use in the quarto file.\n\n- And add the quarto file to the pipeline using `tar_quarto()`.\n\n- Clean the quarto file and remove the unnecessary code, which has been moved to the custom functions.\n\n:::\n\n\n### Inspect and run the pipeline\n\nWe are now ready to inspect the pipeline, check for errors and run it.\nUse `tar_manifest()` to check for errors.\nThis function lists useful information about each target, let you know if you are missing a R package and check for missing or duplicate targets (@fig-inspect).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Names and commands for each target in the pipeline.](Pics/inspect.png){#fig-inspect fig-alt='A table showing all the target names and commands to inspect the pipeline before running it for real.' width=636}\n:::\n:::\n\n\n\n::: callout-note\n## Exercise\n\nRun the `tar_manifest()` function to check if the pipeline is properly set up.\n\n:::\n\n\nNow we are ready to run the pipeline.\nFor this open the `run.R` script and run the `tar_make()` function.\nThis function looks for the `_targets.R` in the working directory and runs the pipeline.\n\nWhen running the pipeline for the first time you will see a list of all the targets and each of them is built.\nOnce you have run the pipeline, it will always skip the targets that have not changed and are up to date and only run the once that need updating (@fig-run-pipeline).\nIn the long run this will save a lot of computational time and is one of the big advantages of using targets pipelines.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![R output after running the pipeline.](Pics/pipeline.png){#fig-run-pipeline fig-alt='R output after running the pipeline.' width=282}\n:::\n:::\n\n\n\n::: callout-note\n## Exercise\n\nOpen the `run.R` script and run the pipeline.\nHopefully, everything will run smoothly 🤞!\nIf not check out the Trouble shooting section below.\n\nRun the pipeline again and check if the targets that are already built are skipped.\n\nChange something in your pipeline and run it again and see what happens.\nYou can for example add a sentence in the quarto file, or change the colour in the figure.\n\n:::\n\n\n::: callout-tip\n## Do it step by step\n\nTarget plans can be huge and complex.\nStart small, create a few targets and functions and make the plan running.\nThen add new code in small steps and check regularly if the plan is still working\nThis will help to understand and solve errors (see next section).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Vizualisation of complex target pipeline.](Pics/complex_network.png){#fig-complex-network fig-alt='Dependency graph that vizualises a complex target pipeline.' width=541}\n:::\n:::\n\n:::\n\n\n## Trouble shooting\n\n### Vizualise the pipeline\n\nIf something goes wrong, a good place to start is to vizualise your pipeline.\nThe `tar_visnetwork()` function shows the dependency graph of the pipeline.\nCircles are targets, triangles functions, and the colour indicates if the targets are up to date or not.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Vizualise the targets pipeline.](Pics/viz_workflow.png){#fig-vizualise fig-alt='Dependency graph that vizualises the target pipeline.' width=552}\n:::\n:::\n\n\n\n### Object not found\n\nA common error is to call a target that does not exist.\nWhen running the pipeline this error will appear (@fig-error-not-found).\nThis is usually if the name is spelled wrong or when using an old name.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Error message for missing object](Pics/error_not_found.png){#fig-error-not-found fig-alt='Error message for missing object.' width=546}\n:::\n:::\n\n\n### Duplicate target\n\nAnother common mistake is to use the same name for two different targets (@fig-error-duplicate).\nThis is common when copy pasting code.\nRename one of the objects and the problem is solved.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Error message for duplicate target.](Pics/error_duplicate.png){#fig-error-duplicate fig-alt='Error message for duplicate target.' width=579}\n:::\n:::\n\n\n::: callout-note\n## Exercise\n\nIf you have problems getting the target pipeline running, here is a working example that you can download or check online.\nNote that you need to have all the packages that are required for the targets pipeline to run installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"biostats-r/targets_workflow_svalbard\")\n```\n:::\n\n\n:::\n\n## Resources\n\n- The [target manual](https://books.ropensci.org/targets/) contains everything you need to know\n<!-- did not find it on github -->\n- Here is a large and working [target plan]()\n- Here is a short introduction video {{< video https://vimeo.com/700982360 >}}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}