{
  "hash": "0f533032efa56c487bc948f597e6f446",
  "result": {
    "markdown": "---\neditor_options: \n  markdown: \n    wrap: sentence\n---\n\n\n# Getting started with targets\n\n::: callout-note\n## In this chapter, you will\n\n- learn the basic targets workflow\n- build your own targets pipeline\n\n:::\n\nIn this chapter we will go through the basic workflow of a `targets` pipeline.\nFor this, we will use plant trait data from Svalbard from the reproducible documents exercise (REF).\nIf you have done this exercise already, skip the next step, otherwise follow the instructions below to download the R project.\n\n::: callout-note\n## Exercise\n\nTo download R project containing the data and qmd file, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"usethis\") # if you don't have it already.\nusethis::use_course(\"https://github.com/biostats-r/targets_workflow_svalbard\")\n```\n:::\n\n\nThen follow the instructions.\nThis will open the targets_workflow_svalbard Rstudio project.\n\nIn the next steps, we will set up a basic targets pipeline for this R project and go through the main elements of a target plan, and how to run it.\n\n:::\n\n\n## The targets pipeline\n\nA target pipeline has a specific file structure including R code, functions, qmd files, data and a `_targets.R` file (@fig-file-structure).\nThe `_targets.R` file is mandotory and the most important file defining the targets pipeline.\nThis file lives at the root of the R project folder.\n\nAn R project has many other files and it is recommended to keep code and data files in separate folders to keep the repository tidy.\nIt is common to have one or several scripts that contain custom user-defined functions (`R/functions.R`).\nTargets pipelines are based on functions, which is good practice coding (e.g. avoid repetition), and also keeps the pipeline tidy.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![File structure of an R Studio project with a target plan.](Pics/file_structure.png){#fig-file-structure width=337}\n:::\n:::\n\n\nTo set up this file structure use the `use_targets()` function, which creates an initial target script with comments to help you populate the script.\n\nNote that there is a file called `run.R`.\nThis is a helper script to run the pipeline and will be explained later.\n\n::: callout-note\n## Exercise\n\nGo to the Svalbard trait R project and set up a targets file using the `use_targets()` function.\n \n:::\n\n\n### _target.R script file\n\nThe `_targets.R` file configures and defines the pipeline (@fig-target-file).\nThis file is mandatory and without it the targets pipeline will not work.\n\nThe `_targets.R` file should contain the following components:\n\n- load necessary packages and set options, such as defining the output format. This can be defined with the `tar_option_set()` function.\n\n- run R scripts containing custom functions `source(R/function.R)`\n\n- define pipeline, as a list of *targets* that are created with `tar_target()`. Each *target* is a step in the workflow, for example importing data, analysis and figure and are stored in the `_targets/objects/`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Created by use_targets().\n# Follow the comments below to fill in this target script.\n# Then follow the manual to check and run the pipeline:\n#   https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline # nolint\n\n# Load packages required to define the pipeline:\nlibrary(targets)\n# library(tarchetypes) # Load other packages as needed. # nolint\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tibble\"), # packages that your targets need to run\n  format = \"rds\" # default storage format\n  # Set other options as needed.\n)\n\n# tar_make_clustermq() configuration (okay to leave alone):\noptions(clustermq.scheduler = \"multicore\")\n\n# tar_make_future() configuration (okay to leave alone):\n# Install packages {{future}}, {{future.callr}}, and {{future.batchtools}} to allow use_targets() to configure tar_make_future() options.\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source()\n# source(\"other_functions.R\") # Source other scripts as needed. # nolint\n\n# Replace the target list below with your own:\nlist(\n  tar_target(\n    name = data,\n    command = tibble(x = rnorm(100), y = rnorm(100))\n#   format = \"feather\" # efficient storage of large data frames # nolint\n  ),\n  tar_target(\n    name = model,\n    command = coefficients(lm(y ~ x, data = data))\n  )\n)\n```\n:::\n\n\nNow it is your turn to start adding a target pipeline to the Svalbard traits R project.\n\n\n::: callout-note\n## Exercise\n\n### Make custom functions\n\nGo to the Svalbard trait project and add three functions to the `R/functions.R` script that:\n\n- import the data and filter the bistorta vivipara species\n\n- fit the lm model for plant height\n\n- make a boxplot for plant height\n\nAlmost all the code you need is in the manuscript/svalbard_trait.qmd file.\n\n\nHere is an example for how to write a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function <- function(data){\n  mod <- lm(Value ~ Treatment, data = data)\n  }\n```\n:::\n\n\n\n <details>\n  <summary>Hint</summary>\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# import and select bistorta\nget_file <- function(file){\n  dat <- read_csv(file) |> \n    filter(Taxon == \"...\")\n  }\n  \n# fit lm\nfit_model <- function(dat){\n  mod <- lm(Value ~ Treatment, data = ...)\n  }\n  \n# make figure\nmake_figure <- function(dat){\n  ggplot(dat, aes(x = ..., y = ...)) + \n    geom_boxplot() +\n    labs(x = \"Treatment\", y = \"Height cm\")\n}\n```\n:::\n\n</details> \n\nOnce all the functions are written it's important to test if the functions are doing what you want them to do.\n\n:::\n\nThe custom functions are made.\nThe next step is to configure and define the targets pipeline.\n\n::: callout-note\n## Exercise\n\n### Populate the `_targets.R` file\n\nPopulate the `_targets.R` file with the necessary packages, source the custom functions and set up the targets pipeline:\n\n- add the all necessary packages to the `tar_option_set()` function in the `_targets.R` file\n\n- add code to source the functions\n\n- set up the pipeline with three targets that imports the data and selects bistorta vivipara, run the model and make the figure.\n\n<details>\n  <summary>Solution</summary>\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages required to define the pipeline:\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Set target options:\ntar_option_set(\n  packages = c(\"tidyverse\", \"here\", \"lubridate\", \"gt\", \"broom\") # packages that targets need to run\n)\n\n# Run the R scripts in the R/ folder with your custom functions:\ntar_source(\"R/functions.R\")\n\n# target list\nlist(\n  # data file\n  tar_target(name = file,\n             command = \"data/PFTC4_Svalbard_2018_ITEX_Traits.csv\",\n             format = \"file\"),\n  # import and transform\n  tar_target(\n    name = bistorta,\n    command = get_file(file)\n  ),\n  # fit model for plant height\n  tar_target(\n    name = mod_height,\n    command = fit_model(bistorta |>\n                          filter(Trait == \"Plant_Height_cm\"))\n  ),\n  # make figure\n  tar_target(\n    name = fig_height,\n    command = make_figure(bistorta |>\n                            filter(Trait == \"Plant_Height_cm\"))\n  )\n)\n```\n:::\n\n</details> \n\n:::\n\n\n### Output files\n\nUsually, we want to add the results and figure to an output file, like a text file or presentation.\nThis output file can also be added to the targets pipeline.\n\nThis can be done by using the `tar_render()` function in the list of targets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# render ms\ntar_render(name = ms, path = \"manuscript/svalbard_traits.qmd\")\n```\n:::\n\n\n\n::: callout-note\n## Exercise\n\n### Render manuscript\n\nClean the `svalbard_traits.qmd` file and remove the unnecessary code (e.g. loading libraries, code in the functions), because this was moved to the functions of `_targets.R` script.\n\nAnd add `tar_render(name = ms, path = \"manuscript/svalbard_traits.qmd\")` to the pipeline.\n\n:::\n\n\n### Inspect and run the pipeline\n\nWe are now ready to inspect the pipeline and check for errors.\nUse `tar_manifest(fields = all_of(\"command\"))` to check for errors.\nThis function lists all the targets and some information about them.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Inspect the pipeline](Pics/inspect.png){width=609}\n:::\n:::\n\n\n\n`tar_visnetwork()` shows the dependency graph of the pipeline.\nCircles are targets, triangles functions, and the colour indicates if the targets are up to date or not.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Inspect the pipeline](Pics/viz_workflow.png){width=591}\n:::\n:::\n\n\n::: callout-note\n## Exercise\n\nRun these two functions and check if the pipeline is properly set up.\n\n:::\n\n\nNow we are ready to run the pipeline.\nThe `tar_make()` function looks for the `_targets.R` in the working directory and runs the pipeline.\n\n\n::: callout-note\n## Exercise\n\nOpen the `run.R` script and run the pipeline.\n\n:::\n\n\n## Trouble shooting\n\n### Object not found\n\nA common error is to call a target that does not exist.\nWhen running the pipeline this error will appear (@fig-error-not-found).\nThis is usually if the name is spelled wrong or when using an old name.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Pics/error_not_found.png){#fig-error-not-found width=546}\n:::\n:::\n\n\n### Duplicate target\n\nAnother common mistake is to use the same name for two different targets (@fig-error-duplicate).\nThis is common when copy pasting code.\nRename one of the objects and the problem is solved.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Pics/error_duplicate.png){#fig-error-duplicate width=579}\n:::\n:::\n\n\n\n## Resources\n\n- The [target manual](https://books.ropensci.org/targets/) contains everything you need to know \n- Here is a short introduction {{< video https://vimeo.com/700982360 >}}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}